---- uint32_t Matches (5968 in 50 files) ----
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM uint32_t __get_PSP(void)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM void __set_PSP(uint32_t topOfProcStack)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM uint32_t __get_MSP(void)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM void __set_MSP(uint32_t mainStackPointer)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM uint32_t __REV16(uint16_t value)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM uint32_t  __get_BASEPRI(void)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM void __set_BASEPRI(uint32_t basePri)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM uint32_t __get_PRIMASK(void)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM void __set_PRIMASK(uint32_t priMask)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM uint32_t  __get_FAULTMASK(void)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM void __set_FAULTMASK(uint32_t faultMask)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM uint32_t __get_CONTROL(void)
Core_cm3.c (d:\soft\soft_src\car\lib):__ASM void __set_CONTROL(uint32_t control)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_PSP(void)
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_PSP(uint32_t topOfProcStack)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_MSP(void)
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_MSP(uint32_t topOfMainStack)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __REV16(uint16_t value)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __RBIT(uint32_t value)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __LDREXW(uint32_t *addr)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __STREXB(uint8_t value, uint8_t *addr)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __STREXH(uint16_t value, uint16_t *addr)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __STREXW(uint32_t value, uint32_t *addr)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_PSP(void) __attribute__( ( naked ) );
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_PSP(void)
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_PSP(uint32_t topOfProcStack)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_MSP(void) __attribute__( ( naked ) );
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_MSP(void)
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_MSP(uint32_t topOfMainStack)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_BASEPRI(void)
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_BASEPRI(uint32_t value)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_PRIMASK(void)
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_PRIMASK(uint32_t priMask)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_FAULTMASK(void)
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_FAULTMASK(uint32_t faultMask)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __get_CONTROL(void)
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):void __set_CONTROL(uint32_t control)
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __REV(uint32_t value)
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __REV16(uint16_t value)
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __RBIT(uint32_t value)
Core_cm3.c (d:\soft\soft_src\car\lib):  uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __LDREXW(uint32_t *addr)
Core_cm3.c (d:\soft\soft_src\car\lib):    uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __STREXB(uint8_t value, uint8_t *addr)
Core_cm3.c (d:\soft\soft_src\car\lib):   uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __STREXH(uint16_t value, uint16_t *addr)
Core_cm3.c (d:\soft\soft_src\car\lib):   uint32_t result=0;
Core_cm3.c (d:\soft\soft_src\car\lib):uint32_t __STREXW(uint32_t value, uint32_t *addr)
Core_cm3.c (d:\soft\soft_src\car\lib):   uint32_t result=0;
Core_cm3.h (d:\soft\soft_src\car\lib): *     register uint32_t __regBasePri         __asm("basepri"); \n
Core_cm3.h (d:\soft\soft_src\car\lib): *     uint32_t RESERVED0[24]; \n
Core_cm3.h (d:\soft\soft_src\car\lib): *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register           */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED0[24];                                   
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register         */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RSERVED1[24];                                    
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register          */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED2[24];                                   
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register        */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED3[24];                                   
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register           */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED4[56];                                   
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED5[644];                                  
Core_cm3.h (d:\soft\soft_src\car\lib):  __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Register     */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register                                  */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register                      */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register                          */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Control Register        */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register                               */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register                        */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State Register             */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register                    */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register                            */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register                           */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register                           */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register                            */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register                       */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register                            */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register                                */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register                            */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register                         */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register                                  */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Register */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register       */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register      */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register        */
Core_cm3.h (d:\soft\soft_src\car\lib):    __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit                  */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED0[864];                                 
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register                 */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED1[15];                                  
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register              */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED2[15];                                  
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register                */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED3[29];                                  
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register            */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register             */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Register     */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED4[43];                                  
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register                  */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register                  */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED5[6];                                   
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Register #4 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Register #5 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Register #6 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Register #7 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Register #0 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Register #1 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Register #2 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Register #3 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Register #0 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Register #1 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Register #2 */
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Register #3 */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED0;
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
Core_cm3.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED1;
Core_cm3.h (d:\soft\soft_src\car\lib):  __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                              */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register                           */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register                     */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register               */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Register         */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Register       */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and Size Register */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Register       */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and Size Register */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Register       */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and Size Register */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status Register    */
Core_cm3.h (d:\soft\soft_src\car\lib):  __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Register        */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register            */
Core_cm3.h (d:\soft\soft_src\car\lib):  __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Control Register */
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_PSP(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_PSP(uint32_t topOfProcStack);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_MSP(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_MSP(uint32_t topOfMainStack);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __REV16(uint16_t value);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_BASEPRI(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_BASEPRI(uint32_t basePri);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_PRIMASK(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_PRIMASK(uint32_t priMask);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_FAULTMASK(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_FAULTMASK(uint32_t faultMask);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_CONTROL(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_CONTROL(uint32_t control);
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t  __get_BASEPRI(void)
Core_cm3.h (d:\soft\soft_src\car\lib):  register uint32_t __regBasePri         __ASM("basepri");
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE void __set_BASEPRI(uint32_t basePri)
Core_cm3.h (d:\soft\soft_src\car\lib):  register uint32_t __regBasePri         __ASM("basepri");
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t __get_PRIMASK(void)
Core_cm3.h (d:\soft\soft_src\car\lib):  register uint32_t __regPriMask         __ASM("primask");
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE void __set_PRIMASK(uint32_t priMask)
Core_cm3.h (d:\soft\soft_src\car\lib):  register uint32_t __regPriMask         __ASM("primask");
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t __get_FAULTMASK(void)
Core_cm3.h (d:\soft\soft_src\car\lib):  register uint32_t __regFaultMask       __ASM("faultmask");
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE void __set_FAULTMASK(uint32_t faultMask)
Core_cm3.h (d:\soft\soft_src\car\lib):  register uint32_t __regFaultMask       __ASM("faultmask");
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t __get_CONTROL(void)
Core_cm3.h (d:\soft\soft_src\car\lib):  register uint32_t __regControl         __ASM("control");
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE void __set_CONTROL(uint32_t control)
Core_cm3.h (d:\soft\soft_src\car\lib):  register uint32_t __regControl         __ASM("control");
Core_cm3.h (d:\soft\soft_src\car\lib):/* intrinsic uint32_t __REV(uint32_t value);                      */
Core_cm3.h (d:\soft\soft_src\car\lib):/* intrinsic uint32_t __REVSH(uint32_t value);                    */
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_PSP(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_PSP(uint32_t topOfProcStack);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_MSP(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_MSP(uint32_t topOfMainStack);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __REV16(uint16_t value);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __RBIT(uint32_t value);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __LDREXW(uint32_t *addr);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_PSP(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_PSP(uint32_t topOfProcStack);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_MSP(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_MSP(uint32_t topOfMainStack);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_BASEPRI(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_BASEPRI(uint32_t basePri);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t  __get_PRIMASK(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_PRIMASK(uint32_t priMask);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_FAULTMASK(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_FAULTMASK(uint32_t faultMask);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __get_CONTROL(void);
Core_cm3.h (d:\soft\soft_src\car\lib):extern void __set_CONTROL(uint32_t control);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __REV(uint32_t value);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __REV16(uint16_t value);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __RBIT(uint32_t value);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __LDREXW(uint32_t *addr);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
Core_cm3.h (d:\soft\soft_src\car\lib):extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Core_cm3.h (d:\soft\soft_src\car\lib):  uint32_t reg_value;
Core_cm3.h (d:\soft\soft_src\car\lib):  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
Core_cm3.h (d:\soft\soft_src\car\lib):  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
Core_cm3.h (d:\soft\soft_src\car\lib):  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Core_cm3.h (d:\soft\soft_src\car\lib):  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
Core_cm3.h (d:\soft\soft_src\car\lib):  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
Core_cm3.h (d:\soft\soft_src\car\lib):  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
Core_cm3.h (d:\soft\soft_src\car\lib):  return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if active else 0 */
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Core_cm3.h (d:\soft\soft_src\car\lib):    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
Core_cm3.h (d:\soft\soft_src\car\lib):    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Core_cm3.h (d:\soft\soft_src\car\lib):    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M3 system interrupts */
Core_cm3.h (d:\soft\soft_src\car\lib):    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Core_cm3.h (d:\soft\soft_src\car\lib):  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
Core_cm3.h (d:\soft\soft_src\car\lib):  uint32_t PreemptPriorityBits;
Core_cm3.h (d:\soft\soft_src\car\lib):  uint32_t SubPriorityBits;
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
Core_cm3.h (d:\soft\soft_src\car\lib):  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
Core_cm3.h (d:\soft\soft_src\car\lib):  uint32_t PreemptPriorityBits;
Core_cm3.h (d:\soft\soft_src\car\lib):  uint32_t SubPriorityBits;
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t SysTick_Config(uint32_t ticks)
Core_cm3.h (d:\soft\soft_src\car\lib):static __INLINE uint32_t ITM_SendChar (uint32_t ch)
Main.c (d:\soft\soft_src\car\src):void assert_failed(uint8_t* file, uint32_t line)
Misc.c (d:\soft\soft_src\car\lib):#define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
Misc.c (d:\soft\soft_src\car\lib):void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
Misc.c (d:\soft\soft_src\car\lib):  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
Misc.c (d:\soft\soft_src\car\lib):    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
Misc.c (d:\soft\soft_src\car\lib):    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
Misc.c (d:\soft\soft_src\car\lib):      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
Misc.c (d:\soft\soft_src\car\lib):      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
Misc.c (d:\soft\soft_src\car\lib):void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
Misc.c (d:\soft\soft_src\car\lib):  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
Misc.c (d:\soft\soft_src\car\lib):    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
Misc.c (d:\soft\soft_src\car\lib):void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
Misc.h (d:\soft\soft_src\car\lib):#define NVIC_VectTab_RAM             ((uint32_t)0x20000000)
Misc.h (d:\soft\soft_src\car\lib):#define NVIC_VectTab_FLASH           ((uint32_t)0x08000000)
Misc.h (d:\soft\soft_src\car\lib):#define NVIC_PriorityGroup_0         ((uint32_t)0x700) /*!< 0 bits for pre-emption priority
Misc.h (d:\soft\soft_src\car\lib):#define NVIC_PriorityGroup_1         ((uint32_t)0x600) /*!< 1 bits for pre-emption priority
Misc.h (d:\soft\soft_src\car\lib):#define NVIC_PriorityGroup_2         ((uint32_t)0x500) /*!< 2 bits for pre-emption priority
Misc.h (d:\soft\soft_src\car\lib):#define NVIC_PriorityGroup_3         ((uint32_t)0x400) /*!< 3 bits for pre-emption priority
Misc.h (d:\soft\soft_src\car\lib):#define NVIC_PriorityGroup_4         ((uint32_t)0x300) /*!< 4 bits for pre-emption priority
Misc.h (d:\soft\soft_src\car\lib):#define SysTick_CLKSource_HCLK_Div8    ((uint32_t)0xFFFFFFFB)
Misc.h (d:\soft\soft_src\car\lib):#define SysTick_CLKSource_HCLK         ((uint32_t)0x00000004)
Misc.h (d:\soft\soft_src\car\lib):void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);
Misc.h (d:\soft\soft_src\car\lib):void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset);
Misc.h (d:\soft\soft_src\car\lib):void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define HSE_VALUE    ((uint32_t)25000000) /*!< Value of the External oscillator in Hz */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define HSE_VALUE    ((uint32_t)8000000) /*!< Value of the External oscillator in Hz */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define HSI_VALUE    ((uint32_t)8000000) /*!< Value of the Internal oscillator in Hz*/
Stm32f10x.h (d:\soft\soft_src\car\lib):typedef uint32_t  u32;
Stm32f10x.h (d:\soft\soft_src\car\lib):typedef const uint32_t uc32;  /*!< Read Only */
Stm32f10x.h (d:\soft\soft_src\car\lib):typedef __IO uint32_t  vu32;
Stm32f10x.h (d:\soft\soft_src\car\lib):typedef __I uint32_t vuc32;  /*!< Read Only */
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SMPR1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SMPR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t JOFR1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t JOFR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t JOFR3;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t JOFR4;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t HTR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t LTR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SQR1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SQR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SQR3;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t JSQR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t JDR1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t JDR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t JDR3;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t JDR4;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED0;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t TIR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t TDTR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t TDLR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t TDHR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RIR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RDTR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RDLR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RDHR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t FR1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t FR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MSR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t TSR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RF0R;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RF1R;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t IER;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t ESR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t BTR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED0[88];
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED1[12];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t FMR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t FM1R;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t FS1R;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED3;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t FFA1R;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED4;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t FA1R;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED5[8];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CFGR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t OAR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PRES;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t ESR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CSR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t TXD;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RXD;  
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SWTRIGR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHR12R1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHR12L1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHR8R1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHR12R2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHR12L2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHR8R2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHR12RD;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHR12LD;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DHR8RD;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DOR1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DOR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t IDCODE;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR;	
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CNDTR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CPAR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CMAR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t ISR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t IFCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACFFR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACHTHR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACHTLR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACMIIAR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACMIIDR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACFCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACVLANTR;             /*    8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED0[2];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACRWUFFR;             /*   11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACPMTCSR;
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED1[2];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACSR;                 /*   15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACIMR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACA0HR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACA0LR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACA1HR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACA1LR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACA2HR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACA2LR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACA3HR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MACA3LR;               /*   24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED2[40];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCCR;                 /*   65 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCRIR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCTIR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCRIMR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCTIMR;               /*   69 */
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED3[14];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCTGFSCCR;            /*   84 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCTGFMSCCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED4[5];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCTGFCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED5[10];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCRFCECR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCRFAECR;
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED6[10];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MMCRGUFCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED7[334];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PTPTSCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PTPSSIR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PTPTSHR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PTPTSLR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PTPTSHUR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PTPTSLUR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PTPTSAR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PTPTTHR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PTPTTLR;
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED8[567];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMABMR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMATPDR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMARPDR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMARDLAR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMATDLAR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMASR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMAOMR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMAIER;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMAMFBOCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):       uint32_t RESERVED9[9];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMACHTDR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMACHRDR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMACHTBAR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DMACHRBAR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t IMR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t EMR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RTSR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t FTSR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SWIER;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t ACR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t KEYR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t OPTKEYR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t AR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RESERVED;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t OBR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t WRPR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t RESERVED1[8]; 
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t KEYR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t RESERVED2;   
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t AR2; 
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t BTCR[8];   
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t BWTR[7];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PCR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PMEM2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PATT2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED0;   
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t ECCR2; 
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PCR3;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SR3;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PMEM3;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PATT3;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED0;   
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t ECCR3; 
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PCR4;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SR4;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PMEM4;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PATT4;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PIO4; 
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CRL;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CRH;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t IDR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t ODR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t BSRR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t BRR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t LCKR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t EVCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MAPR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t EXTICR[4];
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t RESERVED0;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MAPR2;  
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t KR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t PR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t RLR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CSR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CFGR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CIR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t APB2RSTR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t APB1RSTR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t AHBENR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t APB2ENR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t APB1ENR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t BDCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CSR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t AHBRSTR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CFGR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t RESERVED0;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CFGR2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t POWER;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CLKCR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t ARG;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CMD;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __I uint32_t RESPCMD;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __I uint32_t RESP1;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __I uint32_t RESP2;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __I uint32_t RESP3;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __I uint32_t RESP4;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DTIMER;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DLEN;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t DCTRL;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __I uint32_t DCOUNT;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __I uint32_t STA;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t ICR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t MASK;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED0[2];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __I uint32_t FIFOCNT;
Stm32f10x.h (d:\soft\soft_src\car\lib):  uint32_t  RESERVED1[13];
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t FIFO;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t CFR;
Stm32f10x.h (d:\soft\soft_src\car\lib):  __IO uint32_t SR;
Stm32f10x.h (d:\soft\soft_src\car\lib):#define FLASH_BASE            ((uint32_t)0x08000000) /*!< FLASH base address in the alias region */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define SRAM_BASE             ((uint32_t)0x20000000) /*!< SRAM base address in the alias region */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define PERIPH_BASE           ((uint32_t)0x40000000) /*!< Peripheral base address in the alias region */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define SRAM_BB_BASE          ((uint32_t)0x22000000) /*!< SRAM base address in the bit-band region */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define PERIPH_BB_BASE        ((uint32_t)0x42000000) /*!< Peripheral base address in the bit-band region */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define FSMC_R_BASE           ((uint32_t)0xA0000000) /*!< FSMC registers base address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define OB_BASE               ((uint32_t)0x1FFFF800)    /*!< Flash Option Bytes base address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define DBGMCU_BASE          ((uint32_t)0xE0042000) /*!< Debug MCU registers base address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CRC_DR_DR                           ((uint32_t)0xFFFFFFFF) /*!< Data register bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_HSION                        ((uint32_t)0x00000001)        /*!< Internal High Speed clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_HSIRDY                       ((uint32_t)0x00000002)        /*!< Internal High Speed clock ready flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_HSITRIM                      ((uint32_t)0x000000F8)        /*!< Internal High Speed clock trimming */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_HSICAL                       ((uint32_t)0x0000FF00)        /*!< Internal High Speed clock Calibration */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_HSEON                        ((uint32_t)0x00010000)        /*!< External High Speed clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_HSERDY                       ((uint32_t)0x00020000)        /*!< External High Speed clock ready flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_HSEBYP                       ((uint32_t)0x00040000)        /*!< External High Speed clock Bypass */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_CSSON                        ((uint32_t)0x00080000)        /*!< Clock Security System enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_PLLON                        ((uint32_t)0x01000000)        /*!< PLL enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CR_PLLRDY                       ((uint32_t)0x02000000)        /*!< PLL clock ready flag */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CR_PLL2ON                       ((uint32_t)0x04000000)        /*!< PLL2 enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CR_PLL2RDY                      ((uint32_t)0x08000000)        /*!< PLL2 clock ready flag */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CR_PLL3ON                       ((uint32_t)0x10000000)        /*!< PLL3 enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CR_PLL3RDY                      ((uint32_t)0x20000000)        /*!< PLL3 clock ready flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SW                         ((uint32_t)0x00000003)        /*!< SW[1:0] bits (System clock Switch) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SW_0                       ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SW_1                       ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SW_HSI                     ((uint32_t)0x00000000)        /*!< HSI selected as system clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SW_HSE                     ((uint32_t)0x00000001)        /*!< HSE selected as system clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SW_PLL                     ((uint32_t)0x00000002)        /*!< PLL selected as system clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SWS                        ((uint32_t)0x0000000C)        /*!< SWS[1:0] bits (System Clock Switch Status) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SWS_0                      ((uint32_t)0x00000004)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SWS_1                      ((uint32_t)0x00000008)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SWS_HSI                    ((uint32_t)0x00000000)        /*!< HSI oscillator used as system clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SWS_HSE                    ((uint32_t)0x00000004)        /*!< HSE oscillator used as system clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_SWS_PLL                    ((uint32_t)0x00000008)        /*!< PLL used as system clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE                       ((uint32_t)0x000000F0)        /*!< HPRE[3:0] bits (AHB prescaler) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_0                     ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_1                     ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_2                     ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_3                     ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_DIV1                  ((uint32_t)0x00000000)        /*!< SYSCLK not divided */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_DIV2                  ((uint32_t)0x00000080)        /*!< SYSCLK divided by 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_DIV4                  ((uint32_t)0x00000090)        /*!< SYSCLK divided by 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_DIV8                  ((uint32_t)0x000000A0)        /*!< SYSCLK divided by 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_DIV16                 ((uint32_t)0x000000B0)        /*!< SYSCLK divided by 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_DIV64                 ((uint32_t)0x000000C0)        /*!< SYSCLK divided by 64 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_DIV128                ((uint32_t)0x000000D0)        /*!< SYSCLK divided by 128 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_DIV256                ((uint32_t)0x000000E0)        /*!< SYSCLK divided by 256 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_HPRE_DIV512                ((uint32_t)0x000000F0)        /*!< SYSCLK divided by 512 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE1                      ((uint32_t)0x00000700)        /*!< PRE1[2:0] bits (APB1 prescaler) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE1_0                    ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE1_1                    ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE1_2                    ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE1_DIV1                 ((uint32_t)0x00000000)        /*!< HCLK not divided */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE1_DIV2                 ((uint32_t)0x00000400)        /*!< HCLK divided by 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE1_DIV4                 ((uint32_t)0x00000500)        /*!< HCLK divided by 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE1_DIV8                 ((uint32_t)0x00000600)        /*!< HCLK divided by 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE1_DIV16                ((uint32_t)0x00000700)        /*!< HCLK divided by 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE2                      ((uint32_t)0x00003800)        /*!< PRE2[2:0] bits (APB2 prescaler) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE2_0                    ((uint32_t)0x00000800)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE2_1                    ((uint32_t)0x00001000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE2_2                    ((uint32_t)0x00002000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE2_DIV1                 ((uint32_t)0x00000000)        /*!< HCLK not divided */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE2_DIV2                 ((uint32_t)0x00002000)        /*!< HCLK divided by 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE2_DIV4                 ((uint32_t)0x00002800)        /*!< HCLK divided by 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE2_DIV8                 ((uint32_t)0x00003000)        /*!< HCLK divided by 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PPRE2_DIV16                ((uint32_t)0x00003800)        /*!< HCLK divided by 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_ADCPRE                     ((uint32_t)0x0000C000)        /*!< ADCPRE[1:0] bits (ADC prescaler) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_ADCPRE_0                   ((uint32_t)0x00004000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_ADCPRE_1                   ((uint32_t)0x00008000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_ADCPRE_DIV2                ((uint32_t)0x00000000)        /*!< PCLK2 divided by 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_ADCPRE_DIV4                ((uint32_t)0x00004000)        /*!< PCLK2 divided by 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_ADCPRE_DIV6                ((uint32_t)0x00008000)        /*!< PCLK2 divided by 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_ADCPRE_DIV8                ((uint32_t)0x0000C000)        /*!< PCLK2 divided by 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PLLSRC                     ((uint32_t)0x00010000)        /*!< PLL entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PLLXTPRE                   ((uint32_t)0x00020000)        /*!< HSE divider for PLL entry */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PLLMULL                    ((uint32_t)0x003C0000)        /*!< PLLMUL[3:0] bits (PLL multiplication factor) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PLLMULL_0                  ((uint32_t)0x00040000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PLLMULL_1                  ((uint32_t)0x00080000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PLLMULL_2                  ((uint32_t)0x00100000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CFGR_PLLMULL_3                  ((uint32_t)0x00200000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLSRC_HSI_Div2           ((uint32_t)0x00000000)        /*!< HSI clock divided by 2 selected as PLL entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLSRC_PREDIV1            ((uint32_t)0x00010000)        /*!< PREDIV1 clock selected as PLL entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLXTPRE_PREDIV1          ((uint32_t)0x00000000)        /*!< PREDIV1 clock not divided for PLL entry */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLXTPRE_PREDIV1_Div2     ((uint32_t)0x00020000)        /*!< PREDIV1 clock divided by 2 for PLL entry */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL4                  ((uint32_t)0x00080000)        /*!< PLL input clock * 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL5                  ((uint32_t)0x000C0000)        /*!< PLL input clock * 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL6                  ((uint32_t)0x00100000)        /*!< PLL input clock * 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL7                  ((uint32_t)0x00140000)        /*!< PLL input clock * 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL8                  ((uint32_t)0x00180000)        /*!< PLL input clock * 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL9                  ((uint32_t)0x001C0000)        /*!< PLL input clock * 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL6_5                ((uint32_t)0x00340000)        /*!< PLL input clock * 6.5 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_OTGFSPRE                  ((uint32_t)0x00400000)        /*!< USB OTG FS prescaler */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO                       ((uint32_t)0x0F000000)        /*!< MCO[3:0] bits (Microcontroller Clock Output) */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_0                     ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_1                     ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_2                     ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_3                     ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_NOCLOCK               ((uint32_t)0x00000000)        /*!< No clock */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_SYSCLK                ((uint32_t)0x04000000)        /*!< System clock selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_HSI                   ((uint32_t)0x05000000)        /*!< HSI clock selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_HSE                   ((uint32_t)0x06000000)        /*!< HSE clock selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_PLLCLK_Div2           ((uint32_t)0x07000000)        /*!< PLL clock divided by 2 selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_PLL2CLK               ((uint32_t)0x08000000)        /*!< PLL2 clock selected as MCO source*/
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_PLL3CLK_Div2          ((uint32_t)0x09000000)        /*!< PLL3 clock divided by 2 selected as MCO source*/
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_Ext_HSE               ((uint32_t)0x0A000000)        /*!< XT1 external 3-25 MHz oscillator clock selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_PLL3CLK               ((uint32_t)0x0B000000)        /*!< PLL3 clock selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLSRC_HSI_Div2           ((uint32_t)0x00000000)        /*!< HSI clock divided by 2 selected as PLL entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLSRC_PREDIV1            ((uint32_t)0x00010000)        /*!< PREDIV1 clock selected as PLL entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLXTPRE_PREDIV1          ((uint32_t)0x00000000)        /*!< PREDIV1 clock not divided for PLL entry */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLXTPRE_PREDIV1_Div2     ((uint32_t)0x00020000)        /*!< PREDIV1 clock divided by 2 for PLL entry */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL2                  ((uint32_t)0x00000000)        /*!< PLL input clock*2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL3                  ((uint32_t)0x00040000)        /*!< PLL input clock*3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL4                  ((uint32_t)0x00080000)        /*!< PLL input clock*4 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL5                  ((uint32_t)0x000C0000)        /*!< PLL input clock*5 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL6                  ((uint32_t)0x00100000)        /*!< PLL input clock*6 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL7                  ((uint32_t)0x00140000)        /*!< PLL input clock*7 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL8                  ((uint32_t)0x00180000)        /*!< PLL input clock*8 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL9                  ((uint32_t)0x001C0000)        /*!< PLL input clock*9 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL10                 ((uint32_t)0x00200000)        /*!< PLL input clock10 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL11                 ((uint32_t)0x00240000)        /*!< PLL input clock*11 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL12                 ((uint32_t)0x00280000)        /*!< PLL input clock*12 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL13                 ((uint32_t)0x002C0000)        /*!< PLL input clock*13 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL14                 ((uint32_t)0x00300000)        /*!< PLL input clock*14 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL15                 ((uint32_t)0x00340000)        /*!< PLL input clock*15 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL16                 ((uint32_t)0x00380000)        /*!< PLL input clock*16 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO                       ((uint32_t)0x07000000)        /*!< MCO[2:0] bits (Microcontroller Clock Output) */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_0                     ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_1                     ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_2                     ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_NOCLOCK               ((uint32_t)0x00000000)        /*!< No clock */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_SYSCLK                ((uint32_t)0x04000000)        /*!< System clock selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_HSI                   ((uint32_t)0x05000000)        /*!< HSI clock selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_HSE                   ((uint32_t)0x06000000)        /*!< HSE clock selected as MCO source  */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_PLL                   ((uint32_t)0x07000000)        /*!< PLL clock divided by 2 selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLSRC_HSI_Div2           ((uint32_t)0x00000000)        /*!< HSI clock divided by 2 selected as PLL entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLSRC_HSE                ((uint32_t)0x00010000)        /*!< HSE clock selected as PLL entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLXTPRE_HSE              ((uint32_t)0x00000000)        /*!< HSE clock not divided for PLL entry */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLXTPRE_HSE_Div2         ((uint32_t)0x00020000)        /*!< HSE clock divided by 2 for PLL entry */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL2                  ((uint32_t)0x00000000)        /*!< PLL input clock*2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL3                  ((uint32_t)0x00040000)        /*!< PLL input clock*3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL4                  ((uint32_t)0x00080000)        /*!< PLL input clock*4 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL5                  ((uint32_t)0x000C0000)        /*!< PLL input clock*5 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL6                  ((uint32_t)0x00100000)        /*!< PLL input clock*6 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL7                  ((uint32_t)0x00140000)        /*!< PLL input clock*7 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL8                  ((uint32_t)0x00180000)        /*!< PLL input clock*8 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL9                  ((uint32_t)0x001C0000)        /*!< PLL input clock*9 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL10                 ((uint32_t)0x00200000)        /*!< PLL input clock10 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL11                 ((uint32_t)0x00240000)        /*!< PLL input clock*11 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL12                 ((uint32_t)0x00280000)        /*!< PLL input clock*12 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL13                 ((uint32_t)0x002C0000)        /*!< PLL input clock*13 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL14                 ((uint32_t)0x00300000)        /*!< PLL input clock*14 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL15                 ((uint32_t)0x00340000)        /*!< PLL input clock*15 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_PLLMULL16                 ((uint32_t)0x00380000)        /*!< PLL input clock*16 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_USBPRE                    ((uint32_t)0x00400000)        /*!< USB Device prescaler */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO                       ((uint32_t)0x07000000)        /*!< MCO[2:0] bits (Microcontroller Clock Output) */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_0                     ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_1                     ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_2                     ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_NOCLOCK               ((uint32_t)0x00000000)        /*!< No clock */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_SYSCLK                ((uint32_t)0x04000000)        /*!< System clock selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_HSI                   ((uint32_t)0x05000000)        /*!< HSI clock selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_HSE                   ((uint32_t)0x06000000)        /*!< HSE clock selected as MCO source  */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR_MCO_PLL                   ((uint32_t)0x07000000)        /*!< PLL clock divided by 2 selected as MCO source */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_LSIRDYF                     ((uint32_t)0x00000001)        /*!< LSI Ready Interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_LSERDYF                     ((uint32_t)0x00000002)        /*!< LSE Ready Interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_HSIRDYF                     ((uint32_t)0x00000004)        /*!< HSI Ready Interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_HSERDYF                     ((uint32_t)0x00000008)        /*!< HSE Ready Interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_PLLRDYF                     ((uint32_t)0x00000010)        /*!< PLL Ready Interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_CSSF                        ((uint32_t)0x00000080)        /*!< Clock Security System Interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_LSIRDYIE                    ((uint32_t)0x00000100)        /*!< LSI Ready Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_LSERDYIE                    ((uint32_t)0x00000200)        /*!< LSE Ready Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_HSIRDYIE                    ((uint32_t)0x00000400)        /*!< HSI Ready Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_HSERDYIE                    ((uint32_t)0x00000800)        /*!< HSE Ready Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_PLLRDYIE                    ((uint32_t)0x00001000)        /*!< PLL Ready Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_LSIRDYC                     ((uint32_t)0x00010000)        /*!< LSI Ready Interrupt Clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_LSERDYC                     ((uint32_t)0x00020000)        /*!< LSE Ready Interrupt Clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_HSIRDYC                     ((uint32_t)0x00040000)        /*!< HSI Ready Interrupt Clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_HSERDYC                     ((uint32_t)0x00080000)        /*!< HSE Ready Interrupt Clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_PLLRDYC                     ((uint32_t)0x00100000)        /*!< PLL Ready Interrupt Clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CIR_CSSC                        ((uint32_t)0x00800000)        /*!< Clock Security System Interrupt Clear */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CIR_PLL2RDYF                    ((uint32_t)0x00000020)        /*!< PLL2 Ready Interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CIR_PLL3RDYF                    ((uint32_t)0x00000040)        /*!< PLL3 Ready Interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CIR_PLL2RDYIE                   ((uint32_t)0x00002000)        /*!< PLL2 Ready Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CIR_PLL3RDYIE                   ((uint32_t)0x00004000)        /*!< PLL3 Ready Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CIR_PLL2RDYC                    ((uint32_t)0x00200000)        /*!< PLL2 Ready Interrupt Clear */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CIR_PLL3RDYC                    ((uint32_t)0x00400000)        /*!< PLL3 Ready Interrupt Clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_AFIORST                ((uint32_t)0x00000001)        /*!< Alternate Function I/O reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_IOPARST                ((uint32_t)0x00000004)        /*!< I/O port A reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_IOPBRST                ((uint32_t)0x00000008)        /*!< I/O port B reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_IOPCRST                ((uint32_t)0x00000010)        /*!< I/O port C reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_IOPDRST                ((uint32_t)0x00000020)        /*!< I/O port D reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_ADC1RST                ((uint32_t)0x00000200)        /*!< ADC 1 interface reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_ADC2RST                ((uint32_t)0x00000400)        /*!< ADC 2 interface reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_TIM1RST                ((uint32_t)0x00000800)        /*!< TIM1 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_SPI1RST                ((uint32_t)0x00001000)        /*!< SPI 1 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_USART1RST              ((uint32_t)0x00004000)        /*!< USART1 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_TIM15RST               ((uint32_t)0x00010000)        /*!< TIM15 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_TIM16RST               ((uint32_t)0x00020000)        /*!< TIM16 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2RSTR_TIM17RST               ((uint32_t)0x00040000)        /*!< TIM17 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_IOPERST               ((uint32_t)0x00000040)        /*!< I/O port E reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_TIM8RST               ((uint32_t)0x00002000)        /*!< TIM8 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_ADC3RST               ((uint32_t)0x00008000)        /*!< ADC3 interface reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_IOPFRST               ((uint32_t)0x00000080)        /*!< I/O port F reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_IOPGRST               ((uint32_t)0x00000100)        /*!< I/O port G reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_TIM9RST               ((uint32_t)0x00080000)         /*!< TIM9 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_TIM10RST              ((uint32_t)0x00100000)         /*!< TIM10 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2RSTR_TIM11RST              ((uint32_t)0x00200000)         /*!< TIM11 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1RSTR_TIM2RST                ((uint32_t)0x00000001)        /*!< Timer 2 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1RSTR_TIM3RST                ((uint32_t)0x00000002)        /*!< Timer 3 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1RSTR_WWDGRST                ((uint32_t)0x00000800)        /*!< Window Watchdog reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1RSTR_USART2RST              ((uint32_t)0x00020000)        /*!< USART 2 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1RSTR_I2C1RST                ((uint32_t)0x00200000)        /*!< I2C 1 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1RSTR_CAN1RST                ((uint32_t)0x02000000)        /*!< CAN1 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1RSTR_BKPRST                 ((uint32_t)0x08000000)        /*!< Backup interface reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1RSTR_PWRRST                 ((uint32_t)0x10000000)        /*!< Power interface reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM4RST               ((uint32_t)0x00000004)        /*!< Timer 4 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_SPI2RST               ((uint32_t)0x00004000)        /*!< SPI 2 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_USART3RST             ((uint32_t)0x00040000)        /*!< USART 3 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_I2C2RST               ((uint32_t)0x00400000)        /*!< I2C 2 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_USBRST                ((uint32_t)0x00800000)        /*!< USB Device reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM6RST                ((uint32_t)0x00000010)        /*!< Timer 6 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM7RST                ((uint32_t)0x00000020)        /*!< Timer 7 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_DACRST                 ((uint32_t)0x20000000)        /*!< DAC interface reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_CECRST                 ((uint32_t)0x40000000)        /*!< CEC interface reset */ 
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM5RST                ((uint32_t)0x00000008)        /*!< Timer 5 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)        /*!< TIM12 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)        /*!< TIM13 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)        /*!< TIM14 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_SPI3RST                ((uint32_t)0x00008000)        /*!< SPI 3 reset */ 
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_UART4RST               ((uint32_t)0x00080000)        /*!< UART 4 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_UART5RST               ((uint32_t)0x00100000)        /*!< UART 5 reset */ 
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_CAN2RST                ((uint32_t)0x04000000)        /*!< CAN2 reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM12RST               ((uint32_t)0x00000040)         /*!< TIM12 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM13RST               ((uint32_t)0x00000080)         /*!< TIM13 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1RSTR_TIM14RST               ((uint32_t)0x00000100)         /*!< TIM14 Timer reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_AHBENR_OTGFSEN                 ((uint32_t)0x00001000)         /*!< USB OTG FS clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_AHBENR_ETHMACEN                ((uint32_t)0x00004000)         /*!< ETHERNET MAC clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_AHBENR_ETHMACTXEN              ((uint32_t)0x00008000)         /*!< ETHERNET MAC Tx clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_AHBENR_ETHMACRXEN              ((uint32_t)0x00010000)         /*!< ETHERNET MAC Rx clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_AFIOEN                  ((uint32_t)0x00000001)         /*!< Alternate Function I/O clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_IOPAEN                  ((uint32_t)0x00000004)         /*!< I/O port A clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_IOPBEN                  ((uint32_t)0x00000008)         /*!< I/O port B clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_IOPCEN                  ((uint32_t)0x00000010)         /*!< I/O port C clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_IOPDEN                  ((uint32_t)0x00000020)         /*!< I/O port D clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_ADC1EN                  ((uint32_t)0x00000200)         /*!< ADC 1 interface clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_ADC2EN                  ((uint32_t)0x00000400)         /*!< ADC 2 interface clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_TIM1EN                  ((uint32_t)0x00000800)         /*!< TIM1 Timer clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_SPI1EN                  ((uint32_t)0x00001000)         /*!< SPI 1 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_USART1EN                ((uint32_t)0x00004000)         /*!< USART1 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_TIM15EN                 ((uint32_t)0x00010000)         /*!< TIM15 Timer clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_TIM16EN                 ((uint32_t)0x00020000)         /*!< TIM16 Timer clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB2ENR_TIM17EN                 ((uint32_t)0x00040000)         /*!< TIM17 Timer clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_IOPEEN                 ((uint32_t)0x00000040)         /*!< I/O port E clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_IOPFEN                 ((uint32_t)0x00000080)         /*!< I/O port F clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_IOPGEN                 ((uint32_t)0x00000100)         /*!< I/O port G clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_TIM8EN                 ((uint32_t)0x00002000)         /*!< TIM8 Timer clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_ADC3EN                 ((uint32_t)0x00008000)         /*!< DMA1 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_IOPFEN                 ((uint32_t)0x00000080)         /*!< I/O port F clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_IOPGEN                 ((uint32_t)0x00000100)         /*!< I/O port G clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_TIM9EN                 ((uint32_t)0x00080000)         /*!< TIM9 Timer clock enable  */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_TIM10EN                ((uint32_t)0x00100000)         /*!< TIM10 Timer clock enable  */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB2ENR_TIM11EN                ((uint32_t)0x00200000)         /*!< TIM11 Timer clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1ENR_TIM2EN                  ((uint32_t)0x00000001)        /*!< Timer 2 clock enabled*/
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1ENR_TIM3EN                  ((uint32_t)0x00000002)        /*!< Timer 3 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1ENR_WWDGEN                  ((uint32_t)0x00000800)        /*!< Window Watchdog clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1ENR_USART2EN                ((uint32_t)0x00020000)        /*!< USART 2 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1ENR_I2C1EN                  ((uint32_t)0x00200000)        /*!< I2C 1 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1ENR_CAN1EN                  ((uint32_t)0x02000000)        /*!< CAN1 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1ENR_BKPEN                   ((uint32_t)0x08000000)        /*!< Backup interface clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_APB1ENR_PWREN                   ((uint32_t)0x10000000)        /*!< Power interface clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM4EN                 ((uint32_t)0x00000004)        /*!< Timer 4 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_SPI2EN                 ((uint32_t)0x00004000)        /*!< SPI 2 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_USART3EN               ((uint32_t)0x00040000)        /*!< USART 3 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_I2C2EN                 ((uint32_t)0x00400000)        /*!< I2C 2 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_USBEN                  ((uint32_t)0x00800000)        /*!< USB Device clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM5EN                 ((uint32_t)0x00000008)        /*!< Timer 5 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM6EN                 ((uint32_t)0x00000010)        /*!< Timer 6 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM7EN                 ((uint32_t)0x00000020)        /*!< Timer 7 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_SPI3EN                 ((uint32_t)0x00008000)        /*!< SPI 3 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_UART4EN                ((uint32_t)0x00080000)        /*!< UART 4 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_UART5EN                ((uint32_t)0x00100000)        /*!< UART 5 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_DACEN                  ((uint32_t)0x20000000)        /*!< DAC interface clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM6EN                 ((uint32_t)0x00000010)        /*!< Timer 6 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM7EN                 ((uint32_t)0x00000020)        /*!< Timer 7 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_DACEN                  ((uint32_t)0x20000000)        /*!< DAC interface clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_CECEN                  ((uint32_t)0x40000000)        /*!< CEC interface clock enable */ 
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM5EN                 ((uint32_t)0x00000008)        /*!< Timer 5 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM12EN                ((uint32_t)0x00000040)         /*!< TIM12 Timer clock enable  */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM13EN                ((uint32_t)0x00000080)         /*!< TIM13 Timer clock enable  */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM14EN                ((uint32_t)0x00000100)         /*!< TIM14 Timer clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_SPI3EN                 ((uint32_t)0x00008000)        /*!< SPI 3 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_UART4EN                ((uint32_t)0x00080000)        /*!< UART 4 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_UART5EN                ((uint32_t)0x00100000)        /*!< UART 5 clock enable */ 
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_CAN2EN                  ((uint32_t)0x04000000)        /*!< CAN2 clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM12EN                ((uint32_t)0x00000040)         /*!< TIM12 Timer clock enable  */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM13EN                ((uint32_t)0x00000080)         /*!< TIM13 Timer clock enable  */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_APB1ENR_TIM14EN                ((uint32_t)0x00000100)         /*!< TIM14 Timer clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_LSEON                      ((uint32_t)0x00000001)        /*!< External Low Speed oscillator enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_LSERDY                     ((uint32_t)0x00000002)        /*!< External Low Speed oscillator Ready */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_LSEBYP                     ((uint32_t)0x00000004)        /*!< External Low Speed oscillator Bypass */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_RTCSEL                     ((uint32_t)0x00000300)        /*!< RTCSEL[1:0] bits (RTC clock source selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_RTCSEL_0                   ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_RTCSEL_1                   ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_RTCSEL_NOCLOCK             ((uint32_t)0x00000000)        /*!< No clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_RTCSEL_LSE                 ((uint32_t)0x00000100)        /*!< LSE oscillator clock used as RTC clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_RTCSEL_LSI                 ((uint32_t)0x00000200)        /*!< LSI oscillator clock used as RTC clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_RTCSEL_HSE                 ((uint32_t)0x00000300)        /*!< HSE oscillator clock divided by 128 used as RTC clock */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_RTCEN                      ((uint32_t)0x00008000)        /*!< RTC clock enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_BDCR_BDRST                      ((uint32_t)0x00010000)        /*!< Backup domain software reset  */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CSR_LSION                       ((uint32_t)0x00000001)        /*!< Internal Low Speed oscillator enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CSR_LSIRDY                      ((uint32_t)0x00000002)        /*!< Internal Low Speed oscillator Ready */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CSR_RMVF                        ((uint32_t)0x01000000)        /*!< Remove reset flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CSR_PINRSTF                     ((uint32_t)0x04000000)        /*!< PIN reset flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CSR_PORRSTF                     ((uint32_t)0x08000000)        /*!< POR/PDR reset flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CSR_SFTRSTF                     ((uint32_t)0x10000000)        /*!< Software Reset flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CSR_IWDGRSTF                    ((uint32_t)0x20000000)        /*!< Independent Watchdog reset flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CSR_WWDGRSTF                    ((uint32_t)0x40000000)        /*!< Window watchdog reset flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  RCC_CSR_LPWRRSTF                    ((uint32_t)0x80000000)        /*!< Low-Power reset flag */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_AHBRSTR_OTGFSRST               ((uint32_t)0x00001000)         /*!< USB OTG FS reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_AHBRSTR_ETHMACRST              ((uint32_t)0x00004000)         /*!< ETHERNET MAC reset */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1                  ((uint32_t)0x0000000F)        /*!< PREDIV1[3:0] bits */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_0                ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_1                ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_2                ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_3                ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV1             ((uint32_t)0x00000000)        /*!< PREDIV1 input clock not divided */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV2             ((uint32_t)0x00000001)        /*!< PREDIV1 input clock divided by 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV3             ((uint32_t)0x00000002)        /*!< PREDIV1 input clock divided by 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV4             ((uint32_t)0x00000003)        /*!< PREDIV1 input clock divided by 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV5             ((uint32_t)0x00000004)        /*!< PREDIV1 input clock divided by 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV6             ((uint32_t)0x00000005)        /*!< PREDIV1 input clock divided by 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV7             ((uint32_t)0x00000006)        /*!< PREDIV1 input clock divided by 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV8             ((uint32_t)0x00000007)        /*!< PREDIV1 input clock divided by 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV9             ((uint32_t)0x00000008)        /*!< PREDIV1 input clock divided by 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV10            ((uint32_t)0x00000009)        /*!< PREDIV1 input clock divided by 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV11            ((uint32_t)0x0000000A)        /*!< PREDIV1 input clock divided by 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV12            ((uint32_t)0x0000000B)        /*!< PREDIV1 input clock divided by 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV13            ((uint32_t)0x0000000C)        /*!< PREDIV1 input clock divided by 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV14            ((uint32_t)0x0000000D)        /*!< PREDIV1 input clock divided by 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV15            ((uint32_t)0x0000000E)        /*!< PREDIV1 input clock divided by 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV16            ((uint32_t)0x0000000F)        /*!< PREDIV1 input clock divided by 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2                  ((uint32_t)0x000000F0)        /*!< PREDIV2[3:0] bits */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_0                ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_1                ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_2                ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_3                ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV1             ((uint32_t)0x00000000)        /*!< PREDIV2 input clock not divided */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV2             ((uint32_t)0x00000010)        /*!< PREDIV2 input clock divided by 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV3             ((uint32_t)0x00000020)        /*!< PREDIV2 input clock divided by 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV4             ((uint32_t)0x00000030)        /*!< PREDIV2 input clock divided by 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV5             ((uint32_t)0x00000040)        /*!< PREDIV2 input clock divided by 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV6             ((uint32_t)0x00000050)        /*!< PREDIV2 input clock divided by 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV7             ((uint32_t)0x00000060)        /*!< PREDIV2 input clock divided by 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV8             ((uint32_t)0x00000070)        /*!< PREDIV2 input clock divided by 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV9             ((uint32_t)0x00000080)        /*!< PREDIV2 input clock divided by 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV10            ((uint32_t)0x00000090)        /*!< PREDIV2 input clock divided by 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV11            ((uint32_t)0x000000A0)        /*!< PREDIV2 input clock divided by 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV12            ((uint32_t)0x000000B0)        /*!< PREDIV2 input clock divided by 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV13            ((uint32_t)0x000000C0)        /*!< PREDIV2 input clock divided by 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV14            ((uint32_t)0x000000D0)        /*!< PREDIV2 input clock divided by 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV15            ((uint32_t)0x000000E0)        /*!< PREDIV2 input clock divided by 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV2_DIV16            ((uint32_t)0x000000F0)        /*!< PREDIV2 input clock divided by 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL                  ((uint32_t)0x00000F00)        /*!< PLL2MUL[3:0] bits */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL_0                ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL_1                ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL_2                ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL_3                ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL8                 ((uint32_t)0x00000600)        /*!< PLL2 input clock * 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL9                 ((uint32_t)0x00000700)        /*!< PLL2 input clock * 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL10                ((uint32_t)0x00000800)        /*!< PLL2 input clock * 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL11                ((uint32_t)0x00000900)        /*!< PLL2 input clock * 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL12                ((uint32_t)0x00000A00)        /*!< PLL2 input clock * 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL13                ((uint32_t)0x00000B00)        /*!< PLL2 input clock * 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL14                ((uint32_t)0x00000C00)        /*!< PLL2 input clock * 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL16                ((uint32_t)0x00000E00)        /*!< PLL2 input clock * 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL2MUL20                ((uint32_t)0x00000F00)        /*!< PLL2 input clock * 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL                  ((uint32_t)0x0000F000)        /*!< PLL3MUL[3:0] bits */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL_0                ((uint32_t)0x00001000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL_1                ((uint32_t)0x00002000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL_2                ((uint32_t)0x00004000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL_3                ((uint32_t)0x00008000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL8                 ((uint32_t)0x00006000)        /*!< PLL3 input clock * 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL9                 ((uint32_t)0x00007000)        /*!< PLL3 input clock * 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL10                ((uint32_t)0x00008000)        /*!< PLL3 input clock * 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL11                ((uint32_t)0x00009000)        /*!< PLL3 input clock * 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL12                ((uint32_t)0x0000A000)        /*!< PLL3 input clock * 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL13                ((uint32_t)0x0000B000)        /*!< PLL3 input clock * 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL14                ((uint32_t)0x0000C000)        /*!< PLL3 input clock * 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL16                ((uint32_t)0x0000E000)        /*!< PLL3 input clock * 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PLL3MUL20                ((uint32_t)0x0000F000)        /*!< PLL3 input clock * 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1SRC               ((uint32_t)0x00010000)        /*!< PREDIV1 entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1SRC_PLL2          ((uint32_t)0x00010000)        /*!< PLL2 selected as PREDIV1 entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1SRC_HSE           ((uint32_t)0x00000000)        /*!< HSE selected as PREDIV1 entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_I2S2SRC                  ((uint32_t)0x00020000)        /*!< I2S2 entry clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_I2S3SRC                  ((uint32_t)0x00040000)        /*!< I2S3 clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1                  ((uint32_t)0x0000000F)        /*!< PREDIV1[3:0] bits */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_0                ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_1                ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_2                ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_3                ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV1             ((uint32_t)0x00000000)        /*!< PREDIV1 input clock not divided */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV2             ((uint32_t)0x00000001)        /*!< PREDIV1 input clock divided by 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV3             ((uint32_t)0x00000002)        /*!< PREDIV1 input clock divided by 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV4             ((uint32_t)0x00000003)        /*!< PREDIV1 input clock divided by 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV5             ((uint32_t)0x00000004)        /*!< PREDIV1 input clock divided by 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV6             ((uint32_t)0x00000005)        /*!< PREDIV1 input clock divided by 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV7             ((uint32_t)0x00000006)        /*!< PREDIV1 input clock divided by 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV8             ((uint32_t)0x00000007)        /*!< PREDIV1 input clock divided by 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV9             ((uint32_t)0x00000008)        /*!< PREDIV1 input clock divided by 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV10            ((uint32_t)0x00000009)        /*!< PREDIV1 input clock divided by 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV11            ((uint32_t)0x0000000A)        /*!< PREDIV1 input clock divided by 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV12            ((uint32_t)0x0000000B)        /*!< PREDIV1 input clock divided by 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV13            ((uint32_t)0x0000000C)        /*!< PREDIV1 input clock divided by 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV14            ((uint32_t)0x0000000D)        /*!< PREDIV1 input clock divided by 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV15            ((uint32_t)0x0000000E)        /*!< PREDIV1 input clock divided by 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define  RCC_CFGR2_PREDIV1_DIV16            ((uint32_t)0x0000000F)        /*!< PREDIV1 input clock divided by 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE                       ((uint32_t)0x33333333)        /*!< Port x mode bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE0                      ((uint32_t)0x00000003)        /*!< MODE0[1:0] bits (Port x mode bits, pin 0) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE0_0                    ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE0_1                    ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE1                      ((uint32_t)0x00000030)        /*!< MODE1[1:0] bits (Port x mode bits, pin 1) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE1_0                    ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE1_1                    ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE2                      ((uint32_t)0x00000300)        /*!< MODE2[1:0] bits (Port x mode bits, pin 2) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE2_0                    ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE2_1                    ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE3                      ((uint32_t)0x00003000)        /*!< MODE3[1:0] bits (Port x mode bits, pin 3) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE3_0                    ((uint32_t)0x00001000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE3_1                    ((uint32_t)0x00002000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE4                      ((uint32_t)0x00030000)        /*!< MODE4[1:0] bits (Port x mode bits, pin 4) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE4_0                    ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE4_1                    ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE5                      ((uint32_t)0x00300000)        /*!< MODE5[1:0] bits (Port x mode bits, pin 5) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE5_0                    ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE5_1                    ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE6                      ((uint32_t)0x03000000)        /*!< MODE6[1:0] bits (Port x mode bits, pin 6) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE6_0                    ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE6_1                    ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE7                      ((uint32_t)0x30000000)        /*!< MODE7[1:0] bits (Port x mode bits, pin 7) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE7_0                    ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_MODE7_1                    ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF                        ((uint32_t)0xCCCCCCCC)        /*!< Port x configuration bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF0                       ((uint32_t)0x0000000C)        /*!< CNF0[1:0] bits (Port x configuration bits, pin 0) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF0_0                     ((uint32_t)0x00000004)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF0_1                     ((uint32_t)0x00000008)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF1                       ((uint32_t)0x000000C0)        /*!< CNF1[1:0] bits (Port x configuration bits, pin 1) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF1_0                     ((uint32_t)0x00000040)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF1_1                     ((uint32_t)0x00000080)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF2                       ((uint32_t)0x00000C00)        /*!< CNF2[1:0] bits (Port x configuration bits, pin 2) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF2_0                     ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF2_1                     ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF3                       ((uint32_t)0x0000C000)        /*!< CNF3[1:0] bits (Port x configuration bits, pin 3) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF3_0                     ((uint32_t)0x00004000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF3_1                     ((uint32_t)0x00008000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF4                       ((uint32_t)0x000C0000)        /*!< CNF4[1:0] bits (Port x configuration bits, pin 4) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF4_0                     ((uint32_t)0x00040000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF4_1                     ((uint32_t)0x00080000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF5                       ((uint32_t)0x00C00000)        /*!< CNF5[1:0] bits (Port x configuration bits, pin 5) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF5_0                     ((uint32_t)0x00400000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF5_1                     ((uint32_t)0x00800000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF6                       ((uint32_t)0x0C000000)        /*!< CNF6[1:0] bits (Port x configuration bits, pin 6) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF6_0                     ((uint32_t)0x04000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF6_1                     ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF7                       ((uint32_t)0xC0000000)        /*!< CNF7[1:0] bits (Port x configuration bits, pin 7) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF7_0                     ((uint32_t)0x40000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRL_CNF7_1                     ((uint32_t)0x80000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE                       ((uint32_t)0x33333333)        /*!< Port x mode bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE8                      ((uint32_t)0x00000003)        /*!< MODE8[1:0] bits (Port x mode bits, pin 8) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE8_0                    ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE8_1                    ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE9                      ((uint32_t)0x00000030)        /*!< MODE9[1:0] bits (Port x mode bits, pin 9) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE9_0                    ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE9_1                    ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE10                     ((uint32_t)0x00000300)        /*!< MODE10[1:0] bits (Port x mode bits, pin 10) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE10_0                   ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE10_1                   ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE11                     ((uint32_t)0x00003000)        /*!< MODE11[1:0] bits (Port x mode bits, pin 11) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE11_0                   ((uint32_t)0x00001000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE11_1                   ((uint32_t)0x00002000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE12                     ((uint32_t)0x00030000)        /*!< MODE12[1:0] bits (Port x mode bits, pin 12) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE12_0                   ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE12_1                   ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE13                     ((uint32_t)0x00300000)        /*!< MODE13[1:0] bits (Port x mode bits, pin 13) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE13_0                   ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE13_1                   ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE14                     ((uint32_t)0x03000000)        /*!< MODE14[1:0] bits (Port x mode bits, pin 14) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE14_0                   ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE14_1                   ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE15                     ((uint32_t)0x30000000)        /*!< MODE15[1:0] bits (Port x mode bits, pin 15) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE15_0                   ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_MODE15_1                   ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF                        ((uint32_t)0xCCCCCCCC)        /*!< Port x configuration bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF8                       ((uint32_t)0x0000000C)        /*!< CNF8[1:0] bits (Port x configuration bits, pin 8) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF8_0                     ((uint32_t)0x00000004)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF8_1                     ((uint32_t)0x00000008)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF9                       ((uint32_t)0x000000C0)        /*!< CNF9[1:0] bits (Port x configuration bits, pin 9) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF9_0                     ((uint32_t)0x00000040)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF9_1                     ((uint32_t)0x00000080)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF10                      ((uint32_t)0x00000C00)        /*!< CNF10[1:0] bits (Port x configuration bits, pin 10) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF10_0                    ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF10_1                    ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF11                      ((uint32_t)0x0000C000)        /*!< CNF11[1:0] bits (Port x configuration bits, pin 11) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF11_0                    ((uint32_t)0x00004000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF11_1                    ((uint32_t)0x00008000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF12                      ((uint32_t)0x000C0000)        /*!< CNF12[1:0] bits (Port x configuration bits, pin 12) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF12_0                    ((uint32_t)0x00040000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF12_1                    ((uint32_t)0x00080000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF13                      ((uint32_t)0x00C00000)        /*!< CNF13[1:0] bits (Port x configuration bits, pin 13) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF13_0                    ((uint32_t)0x00400000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF13_1                    ((uint32_t)0x00800000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF14                      ((uint32_t)0x0C000000)        /*!< CNF14[1:0] bits (Port x configuration bits, pin 14) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF14_0                    ((uint32_t)0x04000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF14_1                    ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF15                      ((uint32_t)0xC0000000)        /*!< CNF15[1:0] bits (Port x configuration bits, pin 15) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF15_0                    ((uint32_t)0x40000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  GPIO_CRH_CNF15_1                    ((uint32_t)0x80000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS0                        ((uint32_t)0x00000001)        /*!< Port x Set bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS1                        ((uint32_t)0x00000002)        /*!< Port x Set bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS2                        ((uint32_t)0x00000004)        /*!< Port x Set bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS3                        ((uint32_t)0x00000008)        /*!< Port x Set bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS4                        ((uint32_t)0x00000010)        /*!< Port x Set bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS5                        ((uint32_t)0x00000020)        /*!< Port x Set bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS6                        ((uint32_t)0x00000040)        /*!< Port x Set bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS7                        ((uint32_t)0x00000080)        /*!< Port x Set bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS8                        ((uint32_t)0x00000100)        /*!< Port x Set bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS9                        ((uint32_t)0x00000200)        /*!< Port x Set bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS10                       ((uint32_t)0x00000400)        /*!< Port x Set bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS11                       ((uint32_t)0x00000800)        /*!< Port x Set bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS12                       ((uint32_t)0x00001000)        /*!< Port x Set bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS13                       ((uint32_t)0x00002000)        /*!< Port x Set bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS14                       ((uint32_t)0x00004000)        /*!< Port x Set bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BS15                       ((uint32_t)0x00008000)        /*!< Port x Set bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR0                        ((uint32_t)0x00010000)        /*!< Port x Reset bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR1                        ((uint32_t)0x00020000)        /*!< Port x Reset bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR2                        ((uint32_t)0x00040000)        /*!< Port x Reset bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR3                        ((uint32_t)0x00080000)        /*!< Port x Reset bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR4                        ((uint32_t)0x00100000)        /*!< Port x Reset bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR5                        ((uint32_t)0x00200000)        /*!< Port x Reset bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR6                        ((uint32_t)0x00400000)        /*!< Port x Reset bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR7                        ((uint32_t)0x00800000)        /*!< Port x Reset bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR8                        ((uint32_t)0x01000000)        /*!< Port x Reset bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR9                        ((uint32_t)0x02000000)        /*!< Port x Reset bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR10                       ((uint32_t)0x04000000)        /*!< Port x Reset bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR11                       ((uint32_t)0x08000000)        /*!< Port x Reset bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR12                       ((uint32_t)0x10000000)        /*!< Port x Reset bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR13                       ((uint32_t)0x20000000)        /*!< Port x Reset bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR14                       ((uint32_t)0x40000000)        /*!< Port x Reset bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_BSRR_BR15                       ((uint32_t)0x80000000)        /*!< Port x Reset bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK0                       ((uint32_t)0x00000001)        /*!< Port x Lock bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK1                       ((uint32_t)0x00000002)        /*!< Port x Lock bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK2                       ((uint32_t)0x00000004)        /*!< Port x Lock bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK3                       ((uint32_t)0x00000008)        /*!< Port x Lock bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK4                       ((uint32_t)0x00000010)        /*!< Port x Lock bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK5                       ((uint32_t)0x00000020)        /*!< Port x Lock bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK6                       ((uint32_t)0x00000040)        /*!< Port x Lock bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK7                       ((uint32_t)0x00000080)        /*!< Port x Lock bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK8                       ((uint32_t)0x00000100)        /*!< Port x Lock bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK9                       ((uint32_t)0x00000200)        /*!< Port x Lock bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK10                      ((uint32_t)0x00000400)        /*!< Port x Lock bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK11                      ((uint32_t)0x00000800)        /*!< Port x Lock bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK12                      ((uint32_t)0x00001000)        /*!< Port x Lock bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK13                      ((uint32_t)0x00002000)        /*!< Port x Lock bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK14                      ((uint32_t)0x00004000)        /*!< Port x Lock bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCK15                      ((uint32_t)0x00008000)        /*!< Port x Lock bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define GPIO_LCKR_LCKK                       ((uint32_t)0x00010000)        /*!< Lock key */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_SPI1_REMAP                 ((uint32_t)0x00000001)        /*!< SPI1 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_I2C1_REMAP                 ((uint32_t)0x00000002)        /*!< I2C1 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_USART1_REMAP               ((uint32_t)0x00000004)        /*!< USART1 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_USART2_REMAP               ((uint32_t)0x00000008)        /*!< USART2 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_USART3_REMAP               ((uint32_t)0x00000030)        /*!< USART3_REMAP[1:0] bits (USART3 remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_USART3_REMAP_0             ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_USART3_REMAP_1             ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_USART3_REMAP_NOREMAP       ((uint32_t)0x00000000)        /*!< No remap (TX/PB10, RX/PB11, CK/PB12, CTS/PB13, RTS/PB14) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_USART3_REMAP_PARTIALREMAP  ((uint32_t)0x00000010)        /*!< Partial remap (TX/PC10, RX/PC11, CK/PC12, CTS/PB13, RTS/PB14) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_USART3_REMAP_FULLREMAP     ((uint32_t)0x00000030)        /*!< Full remap (TX/PD8, RX/PD9, CK/PD10, CTS/PD11, RTS/PD12) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM1_REMAP                 ((uint32_t)0x000000C0)        /*!< TIM1_REMAP[1:0] bits (TIM1 remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM1_REMAP_0               ((uint32_t)0x00000040)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM1_REMAP_1               ((uint32_t)0x00000080)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM1_REMAP_NOREMAP         ((uint32_t)0x00000000)        /*!< No remap (ETR/PA12, CH1/PA8, CH2/PA9, CH3/PA10, CH4/PA11, BKIN/PB12, CH1N/PB13, CH2N/PB14, CH3N/PB15) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM1_REMAP_PARTIALREMAP    ((uint32_t)0x00000040)        /*!< Partial remap (ETR/PA12, CH1/PA8, CH2/PA9, CH3/PA10, CH4/PA11, BKIN/PA6, CH1N/PA7, CH2N/PB0, CH3N/PB1) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM1_REMAP_FULLREMAP       ((uint32_t)0x000000C0)        /*!< Full remap (ETR/PE7, CH1/PE9, CH2/PE11, CH3/PE13, CH4/PE14, BKIN/PE15, CH1N/PE8, CH2N/PE10, CH3N/PE12) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM2_REMAP                 ((uint32_t)0x00000300)        /*!< TIM2_REMAP[1:0] bits (TIM2 remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM2_REMAP_0               ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM2_REMAP_1               ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM2_REMAP_NOREMAP         ((uint32_t)0x00000000)        /*!< No remap (CH1/ETR/PA0, CH2/PA1, CH3/PA2, CH4/PA3) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1   ((uint32_t)0x00000100)        /*!< Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2, CH4/PA3) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2   ((uint32_t)0x00000200)        /*!< Partial remap (CH1/ETR/PA0, CH2/PA1, CH3/PB10, CH4/PB11) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM2_REMAP_FULLREMAP       ((uint32_t)0x00000300)        /*!< Full remap (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM3_REMAP                 ((uint32_t)0x00000C00)        /*!< TIM3_REMAP[1:0] bits (TIM3 remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM3_REMAP_0               ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM3_REMAP_1               ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM3_REMAP_NOREMAP         ((uint32_t)0x00000000)        /*!< No remap (CH1/PA6, CH2/PA7, CH3/PB0, CH4/PB1) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM3_REMAP_PARTIALREMAP    ((uint32_t)0x00000800)        /*!< Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM3_REMAP_FULLREMAP       ((uint32_t)0x00000C00)        /*!< Full remap (CH1/PC6, CH2/PC7, CH3/PC8, CH4/PC9) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM4_REMAP                 ((uint32_t)0x00001000)        /*!< TIM4_REMAP bit (TIM4 remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_CAN_REMAP                  ((uint32_t)0x00006000)        /*!< CAN_REMAP[1:0] bits (CAN Alternate function remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_CAN_REMAP_0                ((uint32_t)0x00002000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_CAN_REMAP_1                ((uint32_t)0x00004000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_CAN_REMAP_REMAP1           ((uint32_t)0x00000000)        /*!< CANRX mapped to PA11, CANTX mapped to PA12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_CAN_REMAP_REMAP2           ((uint32_t)0x00004000)        /*!< CANRX mapped to PB8, CANTX mapped to PB9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_CAN_REMAP_REMAP3           ((uint32_t)0x00006000)        /*!< CANRX mapped to PD0, CANTX mapped to PD1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_PD01_REMAP                 ((uint32_t)0x00008000)        /*!< Port D0/Port D1 mapping on OSC_IN/OSC_OUT */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_TIM5CH4_IREMAP             ((uint32_t)0x00010000)        /*!< TIM5 Channel4 Internal Remap */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_ADC1_ETRGINJ_REMAP         ((uint32_t)0x00020000)        /*!< ADC 1 External Trigger Injected Conversion remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_ADC1_ETRGREG_REMAP         ((uint32_t)0x00040000)        /*!< ADC 1 External Trigger Regular Conversion remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_ADC2_ETRGINJ_REMAP         ((uint32_t)0x00080000)        /*!< ADC 2 External Trigger Injected Conversion remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_ADC2_ETRGREG_REMAP         ((uint32_t)0x00100000)        /*!< ADC 2 External Trigger Regular Conversion remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_SWJ_CFG                    ((uint32_t)0x07000000)        /*!< SWJ_CFG[2:0] bits (Serial Wire JTAG configuration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_SWJ_CFG_0                  ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_SWJ_CFG_1                  ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_SWJ_CFG_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_SWJ_CFG_RESET              ((uint32_t)0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_SWJ_CFG_NOJNTRST           ((uint32_t)0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_SWJ_CFG_JTAGDISABLE        ((uint32_t)0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR_SWJ_CFG_DISABLE            ((uint32_t)0x04000000)        /*!< JTAG-DP Disabled and SW-DP Disabled */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define AFIO_MAPR_ETH_REMAP                  ((uint32_t)0x00200000)        /*!< SPI3_REMAP bit (Ethernet MAC I/O remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define AFIO_MAPR_CAN2_REMAP                 ((uint32_t)0x00400000)        /*!< CAN2_REMAP bit (CAN2 I/O remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define AFIO_MAPR_MII_RMII_SEL               ((uint32_t)0x00800000)        /*!< MII_RMII_SEL bit (Ethernet MII or RMII selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define AFIO_MAPR_SPI3_REMAP                 ((uint32_t)0x10000000)        /*!< SPI3_REMAP bit (SPI3 remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define AFIO_MAPR_TIM2ITR1_IREMAP            ((uint32_t)0x20000000)        /*!< TIM2ITR1_IREMAP bit (TIM2 internal trigger 1 remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib): #define AFIO_MAPR_PTP_PPS_REMAP              ((uint32_t)0x40000000)        /*!< PTP_PPS_REMAP bit (Ethernet PTP PPS remapping) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM15_REMAP               ((uint32_t)0x00000001)        /*!< TIM15 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM16_REMAP               ((uint32_t)0x00000002)        /*!< TIM16 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM17_REMAP               ((uint32_t)0x00000004)        /*!< TIM17 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_CEC_REMAP                 ((uint32_t)0x00000008)        /*!< CEC remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM1_DMA_REMAP            ((uint32_t)0x00000010)        /*!< TIM1_DMA remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM13_REMAP               ((uint32_t)0x00000100)        /*!< TIM13 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM14_REMAP               ((uint32_t)0x00000200)        /*!< TIM14 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_FSMC_NADV_REMAP           ((uint32_t)0x00000400)        /*!< FSMC NADV remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM67_DAC_DMA_REMAP       ((uint32_t)0x00000800)        /*!< TIM6/TIM7 and DAC DMA remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM12_REMAP               ((uint32_t)0x00001000)        /*!< TIM12 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_MISC_REMAP                ((uint32_t)0x00002000)        /*!< Miscellaneous remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM9_REMAP                ((uint32_t)0x00000020)        /*!< TIM9 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM10_REMAP               ((uint32_t)0x00000040)        /*!< TIM10 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM11_REMAP               ((uint32_t)0x00000080)        /*!< TIM11 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM13_REMAP               ((uint32_t)0x00000100)        /*!< TIM13 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_TIM14_REMAP               ((uint32_t)0x00000200)        /*!< TIM14 remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define AFIO_MAPR2_FSMC_NADV_REMAP           ((uint32_t)0x00000400)        /*!< FSMC NADV remapping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SysTick_CTRL_ENABLE                 ((uint32_t)0x00000001)        /*!< Counter enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SysTick_CTRL_TICKINT                ((uint32_t)0x00000002)        /*!< Counting down to 0 pends the SysTick handler */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SysTick_CTRL_CLKSOURCE              ((uint32_t)0x00000004)        /*!< Clock source */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SysTick_CTRL_COUNTFLAG              ((uint32_t)0x00010000)        /*!< Count Flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SysTick_LOAD_RELOAD                 ((uint32_t)0x00FFFFFF)        /*!< Value to load into the SysTick Current Value Register when the counter reaches 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SysTick_VAL_CURRENT                 ((uint32_t)0x00FFFFFF)        /*!< Current value at the time the register is accessed */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SysTick_CALIB_TENMS                 ((uint32_t)0x00FFFFFF)        /*!< Reload value to use for 10ms timing */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SysTick_CALIB_SKEW                  ((uint32_t)0x40000000)        /*!< Calibration value is not exactly 10 ms */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SysTick_CALIB_NOREF                 ((uint32_t)0x80000000)        /*!< The reference clock is not provided */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA                    ((uint32_t)0xFFFFFFFF)        /*!< Interrupt set enable bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_0                  ((uint32_t)0x00000001)        /*!< bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_1                  ((uint32_t)0x00000002)        /*!< bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_2                  ((uint32_t)0x00000004)        /*!< bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_3                  ((uint32_t)0x00000008)        /*!< bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_4                  ((uint32_t)0x00000010)        /*!< bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_5                  ((uint32_t)0x00000020)        /*!< bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_6                  ((uint32_t)0x00000040)        /*!< bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_7                  ((uint32_t)0x00000080)        /*!< bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_8                  ((uint32_t)0x00000100)        /*!< bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_9                  ((uint32_t)0x00000200)        /*!< bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_10                 ((uint32_t)0x00000400)        /*!< bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_11                 ((uint32_t)0x00000800)        /*!< bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_12                 ((uint32_t)0x00001000)        /*!< bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_13                 ((uint32_t)0x00002000)        /*!< bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_14                 ((uint32_t)0x00004000)        /*!< bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_15                 ((uint32_t)0x00008000)        /*!< bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_16                 ((uint32_t)0x00010000)        /*!< bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_17                 ((uint32_t)0x00020000)        /*!< bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_18                 ((uint32_t)0x00040000)        /*!< bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_19                 ((uint32_t)0x00080000)        /*!< bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_20                 ((uint32_t)0x00100000)        /*!< bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_21                 ((uint32_t)0x00200000)        /*!< bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_22                 ((uint32_t)0x00400000)        /*!< bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_23                 ((uint32_t)0x00800000)        /*!< bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_24                 ((uint32_t)0x01000000)        /*!< bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_25                 ((uint32_t)0x02000000)        /*!< bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_26                 ((uint32_t)0x04000000)        /*!< bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_27                 ((uint32_t)0x08000000)        /*!< bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_28                 ((uint32_t)0x10000000)        /*!< bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_29                 ((uint32_t)0x20000000)        /*!< bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_30                 ((uint32_t)0x40000000)        /*!< bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISER_SETENA_31                 ((uint32_t)0x80000000)        /*!< bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA                   ((uint32_t)0xFFFFFFFF)        /*!< Interrupt clear-enable bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_0                  ((uint32_t)0x00000001)        /*!< bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_1                  ((uint32_t)0x00000002)        /*!< bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_2                  ((uint32_t)0x00000004)        /*!< bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_3                  ((uint32_t)0x00000008)        /*!< bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_4                  ((uint32_t)0x00000010)        /*!< bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_5                  ((uint32_t)0x00000020)        /*!< bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_6                  ((uint32_t)0x00000040)        /*!< bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_7                  ((uint32_t)0x00000080)        /*!< bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_8                  ((uint32_t)0x00000100)        /*!< bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_9                  ((uint32_t)0x00000200)        /*!< bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_10                 ((uint32_t)0x00000400)        /*!< bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_11                 ((uint32_t)0x00000800)        /*!< bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_12                 ((uint32_t)0x00001000)        /*!< bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_13                 ((uint32_t)0x00002000)        /*!< bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_14                 ((uint32_t)0x00004000)        /*!< bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_15                 ((uint32_t)0x00008000)        /*!< bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_16                 ((uint32_t)0x00010000)        /*!< bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_17                 ((uint32_t)0x00020000)        /*!< bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_18                 ((uint32_t)0x00040000)        /*!< bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_19                 ((uint32_t)0x00080000)        /*!< bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_20                 ((uint32_t)0x00100000)        /*!< bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_21                 ((uint32_t)0x00200000)        /*!< bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_22                 ((uint32_t)0x00400000)        /*!< bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_23                 ((uint32_t)0x00800000)        /*!< bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_24                 ((uint32_t)0x01000000)        /*!< bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_25                 ((uint32_t)0x02000000)        /*!< bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_26                 ((uint32_t)0x04000000)        /*!< bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_27                 ((uint32_t)0x08000000)        /*!< bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_28                 ((uint32_t)0x10000000)        /*!< bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_29                 ((uint32_t)0x20000000)        /*!< bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_30                 ((uint32_t)0x40000000)        /*!< bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICER_CLRENA_31                 ((uint32_t)0x80000000)        /*!< bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND                   ((uint32_t)0xFFFFFFFF)        /*!< Interrupt set-pending bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_0                 ((uint32_t)0x00000001)        /*!< bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_1                 ((uint32_t)0x00000002)        /*!< bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_2                 ((uint32_t)0x00000004)        /*!< bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_3                 ((uint32_t)0x00000008)        /*!< bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_4                 ((uint32_t)0x00000010)        /*!< bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_5                 ((uint32_t)0x00000020)        /*!< bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_6                 ((uint32_t)0x00000040)        /*!< bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_7                 ((uint32_t)0x00000080)        /*!< bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_8                 ((uint32_t)0x00000100)        /*!< bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_9                 ((uint32_t)0x00000200)        /*!< bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_10                ((uint32_t)0x00000400)        /*!< bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_11                ((uint32_t)0x00000800)        /*!< bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_12                ((uint32_t)0x00001000)        /*!< bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_13                ((uint32_t)0x00002000)        /*!< bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_14                ((uint32_t)0x00004000)        /*!< bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_15                ((uint32_t)0x00008000)        /*!< bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_16                ((uint32_t)0x00010000)        /*!< bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_17                ((uint32_t)0x00020000)        /*!< bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_18                ((uint32_t)0x00040000)        /*!< bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_19                ((uint32_t)0x00080000)        /*!< bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_20                ((uint32_t)0x00100000)        /*!< bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_21                ((uint32_t)0x00200000)        /*!< bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_22                ((uint32_t)0x00400000)        /*!< bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_23                ((uint32_t)0x00800000)        /*!< bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_24                ((uint32_t)0x01000000)        /*!< bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_25                ((uint32_t)0x02000000)        /*!< bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_26                ((uint32_t)0x04000000)        /*!< bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_27                ((uint32_t)0x08000000)        /*!< bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_28                ((uint32_t)0x10000000)        /*!< bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_29                ((uint32_t)0x20000000)        /*!< bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_30                ((uint32_t)0x40000000)        /*!< bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ISPR_SETPEND_31                ((uint32_t)0x80000000)        /*!< bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND                   ((uint32_t)0xFFFFFFFF)        /*!< Interrupt clear-pending bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_0                 ((uint32_t)0x00000001)        /*!< bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_1                 ((uint32_t)0x00000002)        /*!< bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_2                 ((uint32_t)0x00000004)        /*!< bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_3                 ((uint32_t)0x00000008)        /*!< bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_4                 ((uint32_t)0x00000010)        /*!< bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_5                 ((uint32_t)0x00000020)        /*!< bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_6                 ((uint32_t)0x00000040)        /*!< bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_7                 ((uint32_t)0x00000080)        /*!< bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_8                 ((uint32_t)0x00000100)        /*!< bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_9                 ((uint32_t)0x00000200)        /*!< bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_10                ((uint32_t)0x00000400)        /*!< bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_11                ((uint32_t)0x00000800)        /*!< bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_12                ((uint32_t)0x00001000)        /*!< bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_13                ((uint32_t)0x00002000)        /*!< bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_14                ((uint32_t)0x00004000)        /*!< bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_15                ((uint32_t)0x00008000)        /*!< bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_16                ((uint32_t)0x00010000)        /*!< bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_17                ((uint32_t)0x00020000)        /*!< bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_18                ((uint32_t)0x00040000)        /*!< bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_19                ((uint32_t)0x00080000)        /*!< bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_20                ((uint32_t)0x00100000)        /*!< bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_21                ((uint32_t)0x00200000)        /*!< bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_22                ((uint32_t)0x00400000)        /*!< bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_23                ((uint32_t)0x00800000)        /*!< bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_24                ((uint32_t)0x01000000)        /*!< bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_25                ((uint32_t)0x02000000)        /*!< bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_26                ((uint32_t)0x04000000)        /*!< bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_27                ((uint32_t)0x08000000)        /*!< bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_28                ((uint32_t)0x10000000)        /*!< bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_29                ((uint32_t)0x20000000)        /*!< bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_30                ((uint32_t)0x40000000)        /*!< bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_ICPR_CLRPEND_31                ((uint32_t)0x80000000)        /*!< bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE                    ((uint32_t)0xFFFFFFFF)        /*!< Interrupt active flags */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_0                  ((uint32_t)0x00000001)        /*!< bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_1                  ((uint32_t)0x00000002)        /*!< bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_2                  ((uint32_t)0x00000004)        /*!< bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_3                  ((uint32_t)0x00000008)        /*!< bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_4                  ((uint32_t)0x00000010)        /*!< bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_5                  ((uint32_t)0x00000020)        /*!< bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_6                  ((uint32_t)0x00000040)        /*!< bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_7                  ((uint32_t)0x00000080)        /*!< bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_8                  ((uint32_t)0x00000100)        /*!< bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_9                  ((uint32_t)0x00000200)        /*!< bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_10                 ((uint32_t)0x00000400)        /*!< bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_11                 ((uint32_t)0x00000800)        /*!< bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_12                 ((uint32_t)0x00001000)        /*!< bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_13                 ((uint32_t)0x00002000)        /*!< bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_14                 ((uint32_t)0x00004000)        /*!< bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_15                 ((uint32_t)0x00008000)        /*!< bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_16                 ((uint32_t)0x00010000)        /*!< bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_17                 ((uint32_t)0x00020000)        /*!< bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_18                 ((uint32_t)0x00040000)        /*!< bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_19                 ((uint32_t)0x00080000)        /*!< bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_20                 ((uint32_t)0x00100000)        /*!< bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_21                 ((uint32_t)0x00200000)        /*!< bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_22                 ((uint32_t)0x00400000)        /*!< bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_23                 ((uint32_t)0x00800000)        /*!< bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_24                 ((uint32_t)0x01000000)        /*!< bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_25                 ((uint32_t)0x02000000)        /*!< bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_26                 ((uint32_t)0x04000000)        /*!< bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_27                 ((uint32_t)0x08000000)        /*!< bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_28                 ((uint32_t)0x10000000)        /*!< bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_29                 ((uint32_t)0x20000000)        /*!< bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_30                 ((uint32_t)0x40000000)        /*!< bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IABR_ACTIVE_31                 ((uint32_t)0x80000000)        /*!< bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR0_PRI_0                     ((uint32_t)0x000000FF)        /*!< Priority of interrupt 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR0_PRI_1                     ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR0_PRI_2                     ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR0_PRI_3                     ((uint32_t)0xFF000000)        /*!< Priority of interrupt 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR1_PRI_4                     ((uint32_t)0x000000FF)        /*!< Priority of interrupt 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR1_PRI_5                     ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR1_PRI_6                     ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR1_PRI_7                     ((uint32_t)0xFF000000)        /*!< Priority of interrupt 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR2_PRI_8                     ((uint32_t)0x000000FF)        /*!< Priority of interrupt 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR2_PRI_9                     ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR2_PRI_10                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR2_PRI_11                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR3_PRI_12                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR3_PRI_13                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR3_PRI_14                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR3_PRI_15                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR4_PRI_16                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR4_PRI_17                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR4_PRI_18                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR4_PRI_19                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR5_PRI_20                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR5_PRI_21                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR5_PRI_22                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR5_PRI_23                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR6_PRI_24                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR6_PRI_25                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR6_PRI_26                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR6_PRI_27                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR7_PRI_28                    ((uint32_t)0x000000FF)        /*!< Priority of interrupt 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR7_PRI_29                    ((uint32_t)0x0000FF00)        /*!< Priority of interrupt 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR7_PRI_30                    ((uint32_t)0x00FF0000)        /*!< Priority of interrupt 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  NVIC_IPR7_PRI_31                    ((uint32_t)0xFF000000)        /*!< Priority of interrupt 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CPUID_REVISION                  ((uint32_t)0x0000000F)        /*!< Implementation defined revision number */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CPUID_PARTNO                    ((uint32_t)0x0000FFF0)        /*!< Number of processor within family */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CPUID_Constant                  ((uint32_t)0x000F0000)        /*!< Reads as 0x0F */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CPUID_VARIANT                   ((uint32_t)0x00F00000)        /*!< Implementation defined variant number */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CPUID_IMPLEMENTER               ((uint32_t)0xFF000000)        /*!< Implementer code. ARM is 0x41 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_VECTACTIVE                 ((uint32_t)0x000001FF)        /*!< Active ISR number field */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_RETTOBASE                  ((uint32_t)0x00000800)        /*!< All active exceptions minus the IPSR_current_exception yields the empty set */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_VECTPENDING                ((uint32_t)0x003FF000)        /*!< Pending ISR number field */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_ISRPENDING                 ((uint32_t)0x00400000)        /*!< Interrupt pending flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_ISRPREEMPT                 ((uint32_t)0x00800000)        /*!< It indicates that a pending interrupt becomes active in the next running cycle */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_PENDSTCLR                  ((uint32_t)0x02000000)        /*!< Clear pending SysTick bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_PENDSTSET                  ((uint32_t)0x04000000)        /*!< Set pending SysTick bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_PENDSVCLR                  ((uint32_t)0x08000000)        /*!< Clear pending pendSV bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_PENDSVSET                  ((uint32_t)0x10000000)        /*!< Set pending pendSV bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_ICSR_NMIPENDSET                 ((uint32_t)0x80000000)        /*!< Set pending NMI bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_VTOR_TBLOFF                     ((uint32_t)0x1FFFFF80)        /*!< Vector table base offset field */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_VTOR_TBLBASE                    ((uint32_t)0x20000000)        /*!< Table base in code(0) or RAM(1) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_VECTRESET                 ((uint32_t)0x00000001)        /*!< System Reset bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_VECTCLRACTIVE             ((uint32_t)0x00000002)        /*!< Clear active vector bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_SYSRESETREQ               ((uint32_t)0x00000004)        /*!< Requests chip control logic to generate a reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP                  ((uint32_t)0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP_0                ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP_1                ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP_2                ((uint32_t)0x00000400)        /*!< Bit 2  */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP0                 ((uint32_t)0x00000000)        /*!< Priority group=0 (7 bits of pre-emption priority, 1 bit of subpriority) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP1                 ((uint32_t)0x00000100)        /*!< Priority group=1 (6 bits of pre-emption priority, 2 bits of subpriority) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP2                 ((uint32_t)0x00000200)        /*!< Priority group=2 (5 bits of pre-emption priority, 3 bits of subpriority) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP3                 ((uint32_t)0x00000300)        /*!< Priority group=3 (4 bits of pre-emption priority, 4 bits of subpriority) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP4                 ((uint32_t)0x00000400)        /*!< Priority group=4 (3 bits of pre-emption priority, 5 bits of subpriority) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP5                 ((uint32_t)0x00000500)        /*!< Priority group=5 (2 bits of pre-emption priority, 6 bits of subpriority) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP6                 ((uint32_t)0x00000600)        /*!< Priority group=6 (1 bit of pre-emption priority, 7 bits of subpriority) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_PRIGROUP7                 ((uint32_t)0x00000700)        /*!< Priority group=7 (no pre-emption priority, 8 bits of subpriority) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_ENDIANESS                 ((uint32_t)0x00008000)        /*!< Data endianness bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AIRCR_VECTKEY                   ((uint32_t)0xFFFF0000)        /*!< Register key (VECTKEY) - Reads as 0xFA05 (VECTKEYSTAT) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHPR_PRI_N                      ((uint32_t)0x000000FF)        /*!< Priority of system handler 4,8, and 12. Mem Manage, reserved and Debug Monitor */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHPR_PRI_N1                     ((uint32_t)0x0000FF00)        /*!< Priority of system handler 5,9, and 13. Bus Fault, reserved and reserved */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHPR_PRI_N2                     ((uint32_t)0x00FF0000)        /*!< Priority of system handler 6,10, and 14. Usage Fault, reserved and PendSV */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHPR_PRI_N3                     ((uint32_t)0xFF000000)        /*!< Priority of system handler 7,11, and 15. Reserved, SVCall and SysTick */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_MEMFAULTACT               ((uint32_t)0x00000001)        /*!< MemManage is active */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_BUSFAULTACT               ((uint32_t)0x00000002)        /*!< BusFault is active */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_USGFAULTACT               ((uint32_t)0x00000008)        /*!< UsageFault is active */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_SVCALLACT                 ((uint32_t)0x00000080)        /*!< SVCall is active */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_MONITORACT                ((uint32_t)0x00000100)        /*!< Monitor is active */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_PENDSVACT                 ((uint32_t)0x00000400)        /*!< PendSV is active */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_SYSTICKACT                ((uint32_t)0x00000800)        /*!< SysTick is active */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_USGFAULTPENDED            ((uint32_t)0x00001000)        /*!< Usage Fault is pended */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_MEMFAULTPENDED            ((uint32_t)0x00002000)        /*!< MemManage is pended */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_BUSFAULTPENDED            ((uint32_t)0x00004000)        /*!< Bus Fault is pended */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_SVCALLPENDED              ((uint32_t)0x00008000)        /*!< SVCall is pended */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_MEMFAULTENA               ((uint32_t)0x00010000)        /*!< MemManage enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_BUSFAULTENA               ((uint32_t)0x00020000)        /*!< Bus Fault enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_SHCSR_USGFAULTENA               ((uint32_t)0x00040000)        /*!< UsageFault enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_IACCVIOL                   ((uint32_t)0x00000001)        /*!< Instruction access violation */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_DACCVIOL                   ((uint32_t)0x00000002)        /*!< Data access violation */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_MUNSTKERR                  ((uint32_t)0x00000008)        /*!< Unstacking error */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_MSTKERR                    ((uint32_t)0x00000010)        /*!< Stacking error */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_MMARVALID                  ((uint32_t)0x00000080)        /*!< Memory Manage Address Register address valid flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_IBUSERR                    ((uint32_t)0x00000100)        /*!< Instruction bus error flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_PRECISERR                  ((uint32_t)0x00000200)        /*!< Precise data bus error */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_IMPRECISERR                ((uint32_t)0x00000400)        /*!< Imprecise data bus error */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_UNSTKERR                   ((uint32_t)0x00000800)        /*!< Unstacking error */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_STKERR                     ((uint32_t)0x00001000)        /*!< Stacking error */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_BFARVALID                  ((uint32_t)0x00008000)        /*!< Bus Fault Address Register address valid flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_UNDEFINSTR                 ((uint32_t)0x00010000)        /*!< The processor attempt to execute an undefined instruction */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_INVSTATE                   ((uint32_t)0x00020000)        /*!< Invalid combination of EPSR and instruction */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_INVPC                      ((uint32_t)0x00040000)        /*!< Attempt to load EXC_RETURN into pc illegally */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_NOCP                       ((uint32_t)0x00080000)        /*!< Attempt to use a coprocessor instruction */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_UNALIGNED                  ((uint32_t)0x01000000)        /*!< Fault occurs when there is an attempt to make an unaligned memory access */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_CFSR_DIVBYZERO                  ((uint32_t)0x02000000)        /*!< Fault occurs when SDIV or DIV instruction is used with a divisor of 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_HFSR_VECTTBL                    ((uint32_t)0x00000002)        /*!< Fault occurs because of vector table read on exception processing */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_HFSR_FORCED                     ((uint32_t)0x40000000)        /*!< Hard Fault activated when a configurable Fault was received and cannot activate */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_HFSR_DEBUGEVT                   ((uint32_t)0x80000000)        /*!< Fault related to debug */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_MMFAR_ADDRESS                   ((uint32_t)0xFFFFFFFF)        /*!< Mem Manage fault address field */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_BFAR_ADDRESS                    ((uint32_t)0xFFFFFFFF)        /*!< Bus fault address field */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SCB_AFSR_IMPDEF                     ((uint32_t)0xFFFFFFFF)        /*!< Implementation defined */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR0                        ((uint32_t)0x00000001)        /*!< Interrupt Mask on line 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR1                        ((uint32_t)0x00000002)        /*!< Interrupt Mask on line 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR2                        ((uint32_t)0x00000004)        /*!< Interrupt Mask on line 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR3                        ((uint32_t)0x00000008)        /*!< Interrupt Mask on line 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR4                        ((uint32_t)0x00000010)        /*!< Interrupt Mask on line 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR5                        ((uint32_t)0x00000020)        /*!< Interrupt Mask on line 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR6                        ((uint32_t)0x00000040)        /*!< Interrupt Mask on line 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR7                        ((uint32_t)0x00000080)        /*!< Interrupt Mask on line 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR8                        ((uint32_t)0x00000100)        /*!< Interrupt Mask on line 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR9                        ((uint32_t)0x00000200)        /*!< Interrupt Mask on line 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR10                       ((uint32_t)0x00000400)        /*!< Interrupt Mask on line 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR11                       ((uint32_t)0x00000800)        /*!< Interrupt Mask on line 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR12                       ((uint32_t)0x00001000)        /*!< Interrupt Mask on line 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR13                       ((uint32_t)0x00002000)        /*!< Interrupt Mask on line 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR14                       ((uint32_t)0x00004000)        /*!< Interrupt Mask on line 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR15                       ((uint32_t)0x00008000)        /*!< Interrupt Mask on line 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR16                       ((uint32_t)0x00010000)        /*!< Interrupt Mask on line 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR17                       ((uint32_t)0x00020000)        /*!< Interrupt Mask on line 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR18                       ((uint32_t)0x00040000)        /*!< Interrupt Mask on line 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_IMR_MR19                       ((uint32_t)0x00080000)        /*!< Interrupt Mask on line 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR0                        ((uint32_t)0x00000001)        /*!< Event Mask on line 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR1                        ((uint32_t)0x00000002)        /*!< Event Mask on line 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR2                        ((uint32_t)0x00000004)        /*!< Event Mask on line 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR3                        ((uint32_t)0x00000008)        /*!< Event Mask on line 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR4                        ((uint32_t)0x00000010)        /*!< Event Mask on line 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR5                        ((uint32_t)0x00000020)        /*!< Event Mask on line 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR6                        ((uint32_t)0x00000040)        /*!< Event Mask on line 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR7                        ((uint32_t)0x00000080)        /*!< Event Mask on line 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR8                        ((uint32_t)0x00000100)        /*!< Event Mask on line 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR9                        ((uint32_t)0x00000200)        /*!< Event Mask on line 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR10                       ((uint32_t)0x00000400)        /*!< Event Mask on line 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR11                       ((uint32_t)0x00000800)        /*!< Event Mask on line 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR12                       ((uint32_t)0x00001000)        /*!< Event Mask on line 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR13                       ((uint32_t)0x00002000)        /*!< Event Mask on line 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR14                       ((uint32_t)0x00004000)        /*!< Event Mask on line 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR15                       ((uint32_t)0x00008000)        /*!< Event Mask on line 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR16                       ((uint32_t)0x00010000)        /*!< Event Mask on line 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR17                       ((uint32_t)0x00020000)        /*!< Event Mask on line 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR18                       ((uint32_t)0x00040000)        /*!< Event Mask on line 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_EMR_MR19                       ((uint32_t)0x00080000)        /*!< Event Mask on line 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR0                       ((uint32_t)0x00000001)        /*!< Rising trigger event configuration bit of line 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR1                       ((uint32_t)0x00000002)        /*!< Rising trigger event configuration bit of line 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR2                       ((uint32_t)0x00000004)        /*!< Rising trigger event configuration bit of line 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR3                       ((uint32_t)0x00000008)        /*!< Rising trigger event configuration bit of line 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR4                       ((uint32_t)0x00000010)        /*!< Rising trigger event configuration bit of line 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR5                       ((uint32_t)0x00000020)        /*!< Rising trigger event configuration bit of line 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR6                       ((uint32_t)0x00000040)        /*!< Rising trigger event configuration bit of line 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR7                       ((uint32_t)0x00000080)        /*!< Rising trigger event configuration bit of line 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR8                       ((uint32_t)0x00000100)        /*!< Rising trigger event configuration bit of line 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR9                       ((uint32_t)0x00000200)        /*!< Rising trigger event configuration bit of line 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR10                      ((uint32_t)0x00000400)        /*!< Rising trigger event configuration bit of line 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR11                      ((uint32_t)0x00000800)        /*!< Rising trigger event configuration bit of line 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR12                      ((uint32_t)0x00001000)        /*!< Rising trigger event configuration bit of line 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR13                      ((uint32_t)0x00002000)        /*!< Rising trigger event configuration bit of line 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR14                      ((uint32_t)0x00004000)        /*!< Rising trigger event configuration bit of line 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR15                      ((uint32_t)0x00008000)        /*!< Rising trigger event configuration bit of line 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR16                      ((uint32_t)0x00010000)        /*!< Rising trigger event configuration bit of line 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR17                      ((uint32_t)0x00020000)        /*!< Rising trigger event configuration bit of line 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR18                      ((uint32_t)0x00040000)        /*!< Rising trigger event configuration bit of line 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_RTSR_TR19                      ((uint32_t)0x00080000)        /*!< Rising trigger event configuration bit of line 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR0                       ((uint32_t)0x00000001)        /*!< Falling trigger event configuration bit of line 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR1                       ((uint32_t)0x00000002)        /*!< Falling trigger event configuration bit of line 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR2                       ((uint32_t)0x00000004)        /*!< Falling trigger event configuration bit of line 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR3                       ((uint32_t)0x00000008)        /*!< Falling trigger event configuration bit of line 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR4                       ((uint32_t)0x00000010)        /*!< Falling trigger event configuration bit of line 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR5                       ((uint32_t)0x00000020)        /*!< Falling trigger event configuration bit of line 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR6                       ((uint32_t)0x00000040)        /*!< Falling trigger event configuration bit of line 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR7                       ((uint32_t)0x00000080)        /*!< Falling trigger event configuration bit of line 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR8                       ((uint32_t)0x00000100)        /*!< Falling trigger event configuration bit of line 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR9                       ((uint32_t)0x00000200)        /*!< Falling trigger event configuration bit of line 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR10                      ((uint32_t)0x00000400)        /*!< Falling trigger event configuration bit of line 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR11                      ((uint32_t)0x00000800)        /*!< Falling trigger event configuration bit of line 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR12                      ((uint32_t)0x00001000)        /*!< Falling trigger event configuration bit of line 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR13                      ((uint32_t)0x00002000)        /*!< Falling trigger event configuration bit of line 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR14                      ((uint32_t)0x00004000)        /*!< Falling trigger event configuration bit of line 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR15                      ((uint32_t)0x00008000)        /*!< Falling trigger event configuration bit of line 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR16                      ((uint32_t)0x00010000)        /*!< Falling trigger event configuration bit of line 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR17                      ((uint32_t)0x00020000)        /*!< Falling trigger event configuration bit of line 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR18                      ((uint32_t)0x00040000)        /*!< Falling trigger event configuration bit of line 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_FTSR_TR19                      ((uint32_t)0x00080000)        /*!< Falling trigger event configuration bit of line 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER0                   ((uint32_t)0x00000001)        /*!< Software Interrupt on line 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER1                   ((uint32_t)0x00000002)        /*!< Software Interrupt on line 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER2                   ((uint32_t)0x00000004)        /*!< Software Interrupt on line 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER3                   ((uint32_t)0x00000008)        /*!< Software Interrupt on line 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER4                   ((uint32_t)0x00000010)        /*!< Software Interrupt on line 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER5                   ((uint32_t)0x00000020)        /*!< Software Interrupt on line 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER6                   ((uint32_t)0x00000040)        /*!< Software Interrupt on line 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER7                   ((uint32_t)0x00000080)        /*!< Software Interrupt on line 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER8                   ((uint32_t)0x00000100)        /*!< Software Interrupt on line 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER9                   ((uint32_t)0x00000200)        /*!< Software Interrupt on line 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER10                  ((uint32_t)0x00000400)        /*!< Software Interrupt on line 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER11                  ((uint32_t)0x00000800)        /*!< Software Interrupt on line 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER12                  ((uint32_t)0x00001000)        /*!< Software Interrupt on line 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER13                  ((uint32_t)0x00002000)        /*!< Software Interrupt on line 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER14                  ((uint32_t)0x00004000)        /*!< Software Interrupt on line 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER15                  ((uint32_t)0x00008000)        /*!< Software Interrupt on line 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER16                  ((uint32_t)0x00010000)        /*!< Software Interrupt on line 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER17                  ((uint32_t)0x00020000)        /*!< Software Interrupt on line 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER18                  ((uint32_t)0x00040000)        /*!< Software Interrupt on line 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_SWIER_SWIER19                  ((uint32_t)0x00080000)        /*!< Software Interrupt on line 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR0                         ((uint32_t)0x00000001)        /*!< Pending bit for line 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR1                         ((uint32_t)0x00000002)        /*!< Pending bit for line 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR2                         ((uint32_t)0x00000004)        /*!< Pending bit for line 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR3                         ((uint32_t)0x00000008)        /*!< Pending bit for line 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR4                         ((uint32_t)0x00000010)        /*!< Pending bit for line 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR5                         ((uint32_t)0x00000020)        /*!< Pending bit for line 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR6                         ((uint32_t)0x00000040)        /*!< Pending bit for line 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR7                         ((uint32_t)0x00000080)        /*!< Pending bit for line 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR8                         ((uint32_t)0x00000100)        /*!< Pending bit for line 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR9                         ((uint32_t)0x00000200)        /*!< Pending bit for line 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR10                        ((uint32_t)0x00000400)        /*!< Pending bit for line 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR11                        ((uint32_t)0x00000800)        /*!< Pending bit for line 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR12                        ((uint32_t)0x00001000)        /*!< Pending bit for line 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR13                        ((uint32_t)0x00002000)        /*!< Pending bit for line 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR14                        ((uint32_t)0x00004000)        /*!< Pending bit for line 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR15                        ((uint32_t)0x00008000)        /*!< Pending bit for line 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR16                        ((uint32_t)0x00010000)        /*!< Pending bit for line 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR17                        ((uint32_t)0x00020000)        /*!< Pending bit for line 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR18                        ((uint32_t)0x00040000)        /*!< Pending bit for line 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  EXTI_PR_PR19                        ((uint32_t)0x00080000)        /*!< Pending bit for line 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_GIF1                        ((uint32_t)0x00000001)        /*!< Channel 1 Global interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TCIF1                       ((uint32_t)0x00000002)        /*!< Channel 1 Transfer Complete flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_HTIF1                       ((uint32_t)0x00000004)        /*!< Channel 1 Half Transfer flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TEIF1                       ((uint32_t)0x00000008)        /*!< Channel 1 Transfer Error flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_GIF2                        ((uint32_t)0x00000010)        /*!< Channel 2 Global interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TCIF2                       ((uint32_t)0x00000020)        /*!< Channel 2 Transfer Complete flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_HTIF2                       ((uint32_t)0x00000040)        /*!< Channel 2 Half Transfer flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TEIF2                       ((uint32_t)0x00000080)        /*!< Channel 2 Transfer Error flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_GIF3                        ((uint32_t)0x00000100)        /*!< Channel 3 Global interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TCIF3                       ((uint32_t)0x00000200)        /*!< Channel 3 Transfer Complete flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_HTIF3                       ((uint32_t)0x00000400)        /*!< Channel 3 Half Transfer flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TEIF3                       ((uint32_t)0x00000800)        /*!< Channel 3 Transfer Error flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_GIF4                        ((uint32_t)0x00001000)        /*!< Channel 4 Global interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TCIF4                       ((uint32_t)0x00002000)        /*!< Channel 4 Transfer Complete flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_HTIF4                       ((uint32_t)0x00004000)        /*!< Channel 4 Half Transfer flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TEIF4                       ((uint32_t)0x00008000)        /*!< Channel 4 Transfer Error flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_GIF5                        ((uint32_t)0x00010000)        /*!< Channel 5 Global interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TCIF5                       ((uint32_t)0x00020000)        /*!< Channel 5 Transfer Complete flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_HTIF5                       ((uint32_t)0x00040000)        /*!< Channel 5 Half Transfer flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TEIF5                       ((uint32_t)0x00080000)        /*!< Channel 5 Transfer Error flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_GIF6                        ((uint32_t)0x00100000)        /*!< Channel 6 Global interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TCIF6                       ((uint32_t)0x00200000)        /*!< Channel 6 Transfer Complete flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_HTIF6                       ((uint32_t)0x00400000)        /*!< Channel 6 Half Transfer flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TEIF6                       ((uint32_t)0x00800000)        /*!< Channel 6 Transfer Error flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_GIF7                        ((uint32_t)0x01000000)        /*!< Channel 7 Global interrupt flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TCIF7                       ((uint32_t)0x02000000)        /*!< Channel 7 Transfer Complete flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_HTIF7                       ((uint32_t)0x04000000)        /*!< Channel 7 Half Transfer flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_ISR_TEIF7                       ((uint32_t)0x08000000)        /*!< Channel 7 Transfer Error flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CGIF1                      ((uint32_t)0x00000001)        /*!< Channel 1 Global interrupt clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTCIF1                     ((uint32_t)0x00000002)        /*!< Channel 1 Transfer Complete clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CHTIF1                     ((uint32_t)0x00000004)        /*!< Channel 1 Half Transfer clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTEIF1                     ((uint32_t)0x00000008)        /*!< Channel 1 Transfer Error clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CGIF2                      ((uint32_t)0x00000010)        /*!< Channel 2 Global interrupt clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTCIF2                     ((uint32_t)0x00000020)        /*!< Channel 2 Transfer Complete clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CHTIF2                     ((uint32_t)0x00000040)        /*!< Channel 2 Half Transfer clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTEIF2                     ((uint32_t)0x00000080)        /*!< Channel 2 Transfer Error clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CGIF3                      ((uint32_t)0x00000100)        /*!< Channel 3 Global interrupt clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTCIF3                     ((uint32_t)0x00000200)        /*!< Channel 3 Transfer Complete clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CHTIF3                     ((uint32_t)0x00000400)        /*!< Channel 3 Half Transfer clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTEIF3                     ((uint32_t)0x00000800)        /*!< Channel 3 Transfer Error clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CGIF4                      ((uint32_t)0x00001000)        /*!< Channel 4 Global interrupt clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTCIF4                     ((uint32_t)0x00002000)        /*!< Channel 4 Transfer Complete clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CHTIF4                     ((uint32_t)0x00004000)        /*!< Channel 4 Half Transfer clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTEIF4                     ((uint32_t)0x00008000)        /*!< Channel 4 Transfer Error clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CGIF5                      ((uint32_t)0x00010000)        /*!< Channel 5 Global interrupt clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTCIF5                     ((uint32_t)0x00020000)        /*!< Channel 5 Transfer Complete clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CHTIF5                     ((uint32_t)0x00040000)        /*!< Channel 5 Half Transfer clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTEIF5                     ((uint32_t)0x00080000)        /*!< Channel 5 Transfer Error clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CGIF6                      ((uint32_t)0x00100000)        /*!< Channel 6 Global interrupt clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTCIF6                     ((uint32_t)0x00200000)        /*!< Channel 6 Transfer Complete clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CHTIF6                     ((uint32_t)0x00400000)        /*!< Channel 6 Half Transfer clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTEIF6                     ((uint32_t)0x00800000)        /*!< Channel 6 Transfer Error clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CGIF7                      ((uint32_t)0x01000000)        /*!< Channel 7 Global interrupt clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTCIF7                     ((uint32_t)0x02000000)        /*!< Channel 7 Transfer Complete clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CHTIF7                     ((uint32_t)0x04000000)        /*!< Channel 7 Half Transfer clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_IFCR_CTEIF7                     ((uint32_t)0x08000000)        /*!< Channel 7 Transfer Error clear */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CPAR1_PA                        ((uint32_t)0xFFFFFFFF)        /*!< Peripheral Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CPAR2_PA                        ((uint32_t)0xFFFFFFFF)        /*!< Peripheral Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CPAR3_PA                        ((uint32_t)0xFFFFFFFF)        /*!< Peripheral Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CPAR4_PA                        ((uint32_t)0xFFFFFFFF)        /*!< Peripheral Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CPAR5_PA                        ((uint32_t)0xFFFFFFFF)        /*!< Peripheral Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CPAR6_PA                        ((uint32_t)0xFFFFFFFF)        /*!< Peripheral Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CPAR7_PA                        ((uint32_t)0xFFFFFFFF)        /*!< Peripheral Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CMAR1_MA                        ((uint32_t)0xFFFFFFFF)        /*!< Memory Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CMAR2_MA                        ((uint32_t)0xFFFFFFFF)        /*!< Memory Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CMAR3_MA                        ((uint32_t)0xFFFFFFFF)        /*!< Memory Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CMAR4_MA                        ((uint32_t)0xFFFFFFFF)        /*!< Memory Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CMAR5_MA                        ((uint32_t)0xFFFFFFFF)        /*!< Memory Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CMAR6_MA                        ((uint32_t)0xFFFFFFFF)        /*!< Memory Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DMA_CMAR7_MA                        ((uint32_t)0xFFFFFFFF)        /*!< Memory Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_AWDCH                       ((uint32_t)0x0000001F)        /*!< AWDCH[4:0] bits (Analog watchdog channel select bits) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_AWDCH_0                     ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_AWDCH_1                     ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_AWDCH_2                     ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_AWDCH_3                     ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_AWDCH_4                     ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_EOCIE                       ((uint32_t)0x00000020)        /*!< Interrupt enable for EOC */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_AWDIE                       ((uint32_t)0x00000040)        /*!< Analog Watchdog interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_JEOCIE                      ((uint32_t)0x00000080)        /*!< Interrupt enable for injected channels */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_SCAN                        ((uint32_t)0x00000100)        /*!< Scan mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_AWDSGL                      ((uint32_t)0x00000200)        /*!< Enable the watchdog on a single channel in scan mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_JAUTO                       ((uint32_t)0x00000400)        /*!< Automatic injected group conversion */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DISCEN                      ((uint32_t)0x00000800)        /*!< Discontinuous mode on regular channels */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_JDISCEN                     ((uint32_t)0x00001000)        /*!< Discontinuous mode on injected channels */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DISCNUM                     ((uint32_t)0x0000E000)        /*!< DISCNUM[2:0] bits (Discontinuous mode channel count) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DISCNUM_0                   ((uint32_t)0x00002000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DISCNUM_1                   ((uint32_t)0x00004000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DISCNUM_2                   ((uint32_t)0x00008000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DUALMOD                     ((uint32_t)0x000F0000)        /*!< DUALMOD[3:0] bits (Dual mode selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DUALMOD_0                   ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DUALMOD_1                   ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DUALMOD_2                   ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_DUALMOD_3                   ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_JAWDEN                      ((uint32_t)0x00400000)        /*!< Analog watchdog enable on injected channels */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR1_AWDEN                       ((uint32_t)0x00800000)        /*!< Analog watchdog enable on regular channels */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_ADON                        ((uint32_t)0x00000001)        /*!< A/D Converter ON / OFF */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_CONT                        ((uint32_t)0x00000002)        /*!< Continuous Conversion */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_CAL                         ((uint32_t)0x00000004)        /*!< A/D Calibration */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_RSTCAL                      ((uint32_t)0x00000008)        /*!< Reset Calibration */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_DMA                         ((uint32_t)0x00000100)        /*!< Direct Memory access mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_ALIGN                       ((uint32_t)0x00000800)        /*!< Data Alignment */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_JEXTSEL                     ((uint32_t)0x00007000)        /*!< JEXTSEL[2:0] bits (External event select for injected group) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_JEXTSEL_0                   ((uint32_t)0x00001000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_JEXTSEL_1                   ((uint32_t)0x00002000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_JEXTSEL_2                   ((uint32_t)0x00004000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_JEXTTRIG                    ((uint32_t)0x00008000)        /*!< External Trigger Conversion mode for injected channels */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_EXTSEL                      ((uint32_t)0x000E0000)        /*!< EXTSEL[2:0] bits (External Event Select for regular group) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_EXTSEL_0                    ((uint32_t)0x00020000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_EXTSEL_1                    ((uint32_t)0x00040000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_EXTSEL_2                    ((uint32_t)0x00080000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_EXTTRIG                     ((uint32_t)0x00100000)        /*!< External Trigger Conversion mode for regular channels */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_JSWSTART                    ((uint32_t)0x00200000)        /*!< Start Conversion of injected channels */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_SWSTART                     ((uint32_t)0x00400000)        /*!< Start Conversion of regular channels */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_CR2_TSVREFE                     ((uint32_t)0x00800000)        /*!< Temperature Sensor and VREFINT Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP10                     ((uint32_t)0x00000007)        /*!< SMP10[2:0] bits (Channel 10 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP10_0                   ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP10_1                   ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP10_2                   ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP11                     ((uint32_t)0x00000038)        /*!< SMP11[2:0] bits (Channel 11 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP11_0                   ((uint32_t)0x00000008)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP11_1                   ((uint32_t)0x00000010)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP11_2                   ((uint32_t)0x00000020)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP12                     ((uint32_t)0x000001C0)        /*!< SMP12[2:0] bits (Channel 12 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP12_0                   ((uint32_t)0x00000040)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP12_1                   ((uint32_t)0x00000080)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP12_2                   ((uint32_t)0x00000100)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP13                     ((uint32_t)0x00000E00)        /*!< SMP13[2:0] bits (Channel 13 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP13_0                   ((uint32_t)0x00000200)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP13_1                   ((uint32_t)0x00000400)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP13_2                   ((uint32_t)0x00000800)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP14                     ((uint32_t)0x00007000)        /*!< SMP14[2:0] bits (Channel 14 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP14_0                   ((uint32_t)0x00001000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP14_1                   ((uint32_t)0x00002000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP14_2                   ((uint32_t)0x00004000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP15                     ((uint32_t)0x00038000)        /*!< SMP15[2:0] bits (Channel 15 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP15_0                   ((uint32_t)0x00008000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP15_1                   ((uint32_t)0x00010000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP15_2                   ((uint32_t)0x00020000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP16                     ((uint32_t)0x001C0000)        /*!< SMP16[2:0] bits (Channel 16 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP16_0                   ((uint32_t)0x00040000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP16_1                   ((uint32_t)0x00080000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP16_2                   ((uint32_t)0x00100000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP17                     ((uint32_t)0x00E00000)        /*!< SMP17[2:0] bits (Channel 17 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP17_0                   ((uint32_t)0x00200000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP17_1                   ((uint32_t)0x00400000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR1_SMP17_2                   ((uint32_t)0x00800000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP0                      ((uint32_t)0x00000007)        /*!< SMP0[2:0] bits (Channel 0 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP0_0                    ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP0_1                    ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP0_2                    ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP1                      ((uint32_t)0x00000038)        /*!< SMP1[2:0] bits (Channel 1 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP1_0                    ((uint32_t)0x00000008)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP1_1                    ((uint32_t)0x00000010)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP1_2                    ((uint32_t)0x00000020)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP2                      ((uint32_t)0x000001C0)        /*!< SMP2[2:0] bits (Channel 2 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP2_0                    ((uint32_t)0x00000040)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP2_1                    ((uint32_t)0x00000080)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP2_2                    ((uint32_t)0x00000100)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP3                      ((uint32_t)0x00000E00)        /*!< SMP3[2:0] bits (Channel 3 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP3_0                    ((uint32_t)0x00000200)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP3_1                    ((uint32_t)0x00000400)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP3_2                    ((uint32_t)0x00000800)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP4                      ((uint32_t)0x00007000)        /*!< SMP4[2:0] bits (Channel 4 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP4_0                    ((uint32_t)0x00001000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP4_1                    ((uint32_t)0x00002000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP4_2                    ((uint32_t)0x00004000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP5                      ((uint32_t)0x00038000)        /*!< SMP5[2:0] bits (Channel 5 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP5_0                    ((uint32_t)0x00008000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP5_1                    ((uint32_t)0x00010000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP5_2                    ((uint32_t)0x00020000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP6                      ((uint32_t)0x001C0000)        /*!< SMP6[2:0] bits (Channel 6 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP6_0                    ((uint32_t)0x00040000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP6_1                    ((uint32_t)0x00080000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP6_2                    ((uint32_t)0x00100000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP7                      ((uint32_t)0x00E00000)        /*!< SMP7[2:0] bits (Channel 7 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP7_0                    ((uint32_t)0x00200000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP7_1                    ((uint32_t)0x00400000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP7_2                    ((uint32_t)0x00800000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP8                      ((uint32_t)0x07000000)        /*!< SMP8[2:0] bits (Channel 8 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP8_0                    ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP8_1                    ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP8_2                    ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP9                      ((uint32_t)0x38000000)        /*!< SMP9[2:0] bits (Channel 9 Sample time selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP9_0                    ((uint32_t)0x08000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP9_1                    ((uint32_t)0x10000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SMPR2_SMP9_2                    ((uint32_t)0x20000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ13                       ((uint32_t)0x0000001F)        /*!< SQ13[4:0] bits (13th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ13_0                     ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ13_1                     ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ13_2                     ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ13_3                     ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ13_4                     ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ14                       ((uint32_t)0x000003E0)        /*!< SQ14[4:0] bits (14th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ14_0                     ((uint32_t)0x00000020)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ14_1                     ((uint32_t)0x00000040)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ14_2                     ((uint32_t)0x00000080)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ14_3                     ((uint32_t)0x00000100)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ14_4                     ((uint32_t)0x00000200)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ15                       ((uint32_t)0x00007C00)        /*!< SQ15[4:0] bits (15th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ15_0                     ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ15_1                     ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ15_2                     ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ15_3                     ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ15_4                     ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ16                       ((uint32_t)0x000F8000)        /*!< SQ16[4:0] bits (16th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ16_0                     ((uint32_t)0x00008000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ16_1                     ((uint32_t)0x00010000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ16_2                     ((uint32_t)0x00020000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ16_3                     ((uint32_t)0x00040000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_SQ16_4                     ((uint32_t)0x00080000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_L                          ((uint32_t)0x00F00000)        /*!< L[3:0] bits (Regular channel sequence length) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_L_0                        ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_L_1                        ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_L_2                        ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR1_L_3                        ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ7                        ((uint32_t)0x0000001F)        /*!< SQ7[4:0] bits (7th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ7_0                      ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ7_1                      ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ7_2                      ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ7_3                      ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ7_4                      ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ8                        ((uint32_t)0x000003E0)        /*!< SQ8[4:0] bits (8th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ8_0                      ((uint32_t)0x00000020)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ8_1                      ((uint32_t)0x00000040)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ8_2                      ((uint32_t)0x00000080)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ8_3                      ((uint32_t)0x00000100)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ8_4                      ((uint32_t)0x00000200)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ9                        ((uint32_t)0x00007C00)        /*!< SQ9[4:0] bits (9th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ9_0                      ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ9_1                      ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ9_2                      ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ9_3                      ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ9_4                      ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ10                       ((uint32_t)0x000F8000)        /*!< SQ10[4:0] bits (10th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ10_0                     ((uint32_t)0x00008000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ10_1                     ((uint32_t)0x00010000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ10_2                     ((uint32_t)0x00020000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ10_3                     ((uint32_t)0x00040000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ10_4                     ((uint32_t)0x00080000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ11                       ((uint32_t)0x01F00000)        /*!< SQ11[4:0] bits (11th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ11_0                     ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ11_1                     ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ11_2                     ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ11_3                     ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ11_4                     ((uint32_t)0x01000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ12                       ((uint32_t)0x3E000000)        /*!< SQ12[4:0] bits (12th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ12_0                     ((uint32_t)0x02000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ12_1                     ((uint32_t)0x04000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ12_2                     ((uint32_t)0x08000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ12_3                     ((uint32_t)0x10000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR2_SQ12_4                     ((uint32_t)0x20000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ1                        ((uint32_t)0x0000001F)        /*!< SQ1[4:0] bits (1st conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ1_0                      ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ1_1                      ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ1_2                      ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ1_3                      ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ1_4                      ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ2                        ((uint32_t)0x000003E0)        /*!< SQ2[4:0] bits (2nd conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ2_0                      ((uint32_t)0x00000020)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ2_1                      ((uint32_t)0x00000040)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ2_2                      ((uint32_t)0x00000080)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ2_3                      ((uint32_t)0x00000100)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ2_4                      ((uint32_t)0x00000200)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ3                        ((uint32_t)0x00007C00)        /*!< SQ3[4:0] bits (3rd conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ3_0                      ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ3_1                      ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ3_2                      ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ3_3                      ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ3_4                      ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ4                        ((uint32_t)0x000F8000)        /*!< SQ4[4:0] bits (4th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ4_0                      ((uint32_t)0x00008000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ4_1                      ((uint32_t)0x00010000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ4_2                      ((uint32_t)0x00020000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ4_3                      ((uint32_t)0x00040000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ4_4                      ((uint32_t)0x00080000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ5                        ((uint32_t)0x01F00000)        /*!< SQ5[4:0] bits (5th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ5_0                      ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ5_1                      ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ5_2                      ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ5_3                      ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ5_4                      ((uint32_t)0x01000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ6                        ((uint32_t)0x3E000000)        /*!< SQ6[4:0] bits (6th conversion in regular sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ6_0                      ((uint32_t)0x02000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ6_1                      ((uint32_t)0x04000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ6_2                      ((uint32_t)0x08000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ6_3                      ((uint32_t)0x10000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_SQR3_SQ6_4                      ((uint32_t)0x20000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ1                       ((uint32_t)0x0000001F)        /*!< JSQ1[4:0] bits (1st conversion in injected sequence) */  
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ1_0                     ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ1_1                     ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ1_2                     ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ1_3                     ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ1_4                     ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ2                       ((uint32_t)0x000003E0)        /*!< JSQ2[4:0] bits (2nd conversion in injected sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ2_0                     ((uint32_t)0x00000020)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ2_1                     ((uint32_t)0x00000040)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ2_2                     ((uint32_t)0x00000080)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ2_3                     ((uint32_t)0x00000100)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ2_4                     ((uint32_t)0x00000200)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ3                       ((uint32_t)0x00007C00)        /*!< JSQ3[4:0] bits (3rd conversion in injected sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ3_0                     ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ3_1                     ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ3_2                     ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ3_3                     ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ3_4                     ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ4                       ((uint32_t)0x000F8000)        /*!< JSQ4[4:0] bits (4th conversion in injected sequence) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ4_0                     ((uint32_t)0x00008000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ4_1                     ((uint32_t)0x00010000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ4_2                     ((uint32_t)0x00020000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ4_3                     ((uint32_t)0x00040000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JSQ4_4                     ((uint32_t)0x00080000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JL                         ((uint32_t)0x00300000)        /*!< JL[1:0] bits (Injected Sequence length) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JL_0                       ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_JSQR_JL_1                       ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_DR_DATA                         ((uint32_t)0x0000FFFF)        /*!< Regular data */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  ADC_DR_ADC2DATA                     ((uint32_t)0xFFFF0000)        /*!< ADC2 data */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_EN1                          ((uint32_t)0x00000001)        /*!< DAC channel1 enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_BOFF1                        ((uint32_t)0x00000002)        /*!< DAC channel1 output buffer disable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TEN1                         ((uint32_t)0x00000004)        /*!< DAC channel1 Trigger enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TSEL1                        ((uint32_t)0x00000038)        /*!< TSEL1[2:0] (DAC channel1 Trigger selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TSEL1_0                      ((uint32_t)0x00000008)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TSEL1_1                      ((uint32_t)0x00000010)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TSEL1_2                      ((uint32_t)0x00000020)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_WAVE1                        ((uint32_t)0x000000C0)        /*!< WAVE1[1:0] (DAC channel1 noise/triangle wave generation enable) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_WAVE1_0                      ((uint32_t)0x00000040)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_WAVE1_1                      ((uint32_t)0x00000080)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP1                        ((uint32_t)0x00000F00)        /*!< MAMP1[3:0] (DAC channel1 Mask/Amplitude selector) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP1_0                      ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP1_1                      ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP1_2                      ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP1_3                      ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_DMAEN1                       ((uint32_t)0x00001000)        /*!< DAC channel1 DMA enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_EN2                          ((uint32_t)0x00010000)        /*!< DAC channel2 enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_BOFF2                        ((uint32_t)0x00020000)        /*!< DAC channel2 output buffer disable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TEN2                         ((uint32_t)0x00040000)        /*!< DAC channel2 Trigger enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TSEL2                        ((uint32_t)0x00380000)        /*!< TSEL2[2:0] (DAC channel2 Trigger selection) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TSEL2_0                      ((uint32_t)0x00080000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TSEL2_1                      ((uint32_t)0x00100000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_TSEL2_2                      ((uint32_t)0x00200000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_WAVE2                        ((uint32_t)0x00C00000)        /*!< WAVE2[1:0] (DAC channel2 noise/triangle wave generation enable) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_WAVE2_0                      ((uint32_t)0x00400000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_WAVE2_1                      ((uint32_t)0x00800000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP2                        ((uint32_t)0x0F000000)        /*!< MAMP2[3:0] (DAC channel2 Mask/Amplitude selector) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP2_0                      ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP2_1                      ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP2_2                      ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_MAMP2_3                      ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_CR_DMAEN2                       ((uint32_t)0x10000000)        /*!< DAC channel2 DMA enabled */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_DHR12RD_DACC1DHR                ((uint32_t)0x00000FFF)        /*!< DAC channel1 12-bit Right aligned data */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_DHR12RD_DACC2DHR                ((uint32_t)0x0FFF0000)        /*!< DAC channel2 12-bit Right aligned data */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_DHR12LD_DACC1DHR                ((uint32_t)0x0000FFF0)        /*!< DAC channel1 12-bit Left aligned data */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_DHR12LD_DACC2DHR                ((uint32_t)0xFFF00000)        /*!< DAC channel2 12-bit Left aligned data */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_SR_DMAUDR1                      ((uint32_t)0x00002000)        /*!< DAC channel1 DMA underrun flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DAC_SR_DMAUDR2                      ((uint32_t)0x20000000)        /*!< DAC channel2 DMA underrun flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_MBKEN                     ((uint32_t)0x00000001)        /*!< Memory bank enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_MUXEN                     ((uint32_t)0x00000002)        /*!< Address/data multiplexing enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_MTYP                      ((uint32_t)0x0000000C)        /*!< MTYP[1:0] bits (Memory type) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_MTYP_0                    ((uint32_t)0x00000004)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_MTYP_1                    ((uint32_t)0x00000008)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_MWID                      ((uint32_t)0x00000030)        /*!< MWID[1:0] bits (Memory data bus width) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_MWID_0                    ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_MWID_1                    ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_FACCEN                    ((uint32_t)0x00000040)        /*!< Flash access enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_BURSTEN                   ((uint32_t)0x00000100)        /*!< Burst enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_WAITPOL                   ((uint32_t)0x00000200)        /*!< Wait signal polarity bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_WRAPMOD                   ((uint32_t)0x00000400)        /*!< Wrapped burst mode support */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_WAITCFG                   ((uint32_t)0x00000800)        /*!< Wait timing configuration */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_WREN                      ((uint32_t)0x00001000)        /*!< Write enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_WAITEN                    ((uint32_t)0x00002000)        /*!< Wait enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_EXTMOD                    ((uint32_t)0x00004000)        /*!< Extended mode enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_ASYNCWAIT                 ((uint32_t)0x00008000)       /*!< Asynchronous wait */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR1_CBURSTRW                  ((uint32_t)0x00080000)        /*!< Write burst enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_MBKEN                     ((uint32_t)0x00000001)        /*!< Memory bank enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_MUXEN                     ((uint32_t)0x00000002)        /*!< Address/data multiplexing enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_MTYP                      ((uint32_t)0x0000000C)        /*!< MTYP[1:0] bits (Memory type) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_MTYP_0                    ((uint32_t)0x00000004)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_MTYP_1                    ((uint32_t)0x00000008)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_MWID                      ((uint32_t)0x00000030)        /*!< MWID[1:0] bits (Memory data bus width) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_MWID_0                    ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_MWID_1                    ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_FACCEN                    ((uint32_t)0x00000040)        /*!< Flash access enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_BURSTEN                   ((uint32_t)0x00000100)        /*!< Burst enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_WAITPOL                   ((uint32_t)0x00000200)        /*!< Wait signal polarity bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_WRAPMOD                   ((uint32_t)0x00000400)        /*!< Wrapped burst mode support */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_WAITCFG                   ((uint32_t)0x00000800)        /*!< Wait timing configuration */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_WREN                      ((uint32_t)0x00001000)        /*!< Write enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_WAITEN                    ((uint32_t)0x00002000)        /*!< Wait enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_EXTMOD                    ((uint32_t)0x00004000)        /*!< Extended mode enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_ASYNCWAIT                 ((uint32_t)0x00008000)       /*!< Asynchronous wait */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR2_CBURSTRW                  ((uint32_t)0x00080000)        /*!< Write burst enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_MBKEN                     ((uint32_t)0x00000001)        /*!< Memory bank enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_MUXEN                     ((uint32_t)0x00000002)        /*!< Address/data multiplexing enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_MTYP                      ((uint32_t)0x0000000C)        /*!< MTYP[1:0] bits (Memory type) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_MTYP_0                    ((uint32_t)0x00000004)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_MTYP_1                    ((uint32_t)0x00000008)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_MWID                      ((uint32_t)0x00000030)        /*!< MWID[1:0] bits (Memory data bus width) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_MWID_0                    ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_MWID_1                    ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_FACCEN                    ((uint32_t)0x00000040)        /*!< Flash access enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_BURSTEN                   ((uint32_t)0x00000100)        /*!< Burst enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_WAITPOL                   ((uint32_t)0x00000200)        /*!< Wait signal polarity bit. */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_WRAPMOD                   ((uint32_t)0x00000400)        /*!< Wrapped burst mode support */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_WAITCFG                   ((uint32_t)0x00000800)        /*!< Wait timing configuration */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_WREN                      ((uint32_t)0x00001000)        /*!< Write enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_WAITEN                    ((uint32_t)0x00002000)        /*!< Wait enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_EXTMOD                    ((uint32_t)0x00004000)        /*!< Extended mode enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_ASYNCWAIT                 ((uint32_t)0x00008000)       /*!< Asynchronous wait */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR3_CBURSTRW                  ((uint32_t)0x00080000)        /*!< Write burst enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_MBKEN                     ((uint32_t)0x00000001)        /*!< Memory bank enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_MUXEN                     ((uint32_t)0x00000002)        /*!< Address/data multiplexing enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_MTYP                      ((uint32_t)0x0000000C)        /*!< MTYP[1:0] bits (Memory type) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_MTYP_0                    ((uint32_t)0x00000004)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_MTYP_1                    ((uint32_t)0x00000008)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_MWID                      ((uint32_t)0x00000030)        /*!< MWID[1:0] bits (Memory data bus width) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_MWID_0                    ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_MWID_1                    ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_FACCEN                    ((uint32_t)0x00000040)        /*!< Flash access enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_BURSTEN                   ((uint32_t)0x00000100)        /*!< Burst enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_WAITPOL                   ((uint32_t)0x00000200)        /*!< Wait signal polarity bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_WRAPMOD                   ((uint32_t)0x00000400)        /*!< Wrapped burst mode support */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_WAITCFG                   ((uint32_t)0x00000800)        /*!< Wait timing configuration */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_WREN                      ((uint32_t)0x00001000)        /*!< Write enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_WAITEN                    ((uint32_t)0x00002000)        /*!< Wait enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_EXTMOD                    ((uint32_t)0x00004000)        /*!< Extended mode enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_ASYNCWAIT                 ((uint32_t)0x00008000)       /*!< Asynchronous wait */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BCR4_CBURSTRW                  ((uint32_t)0x00080000)        /*!< Write burst enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDSET                    ((uint32_t)0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDSET_0                  ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDSET_1                  ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDSET_2                  ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDSET_3                  ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDHLD                    ((uint32_t)0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDHLD_0                  ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDHLD_1                  ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDHLD_2                  ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ADDHLD_3                  ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATAST                    ((uint32_t)0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATAST_0                  ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATAST_1                  ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATAST_2                  ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATAST_3                  ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_BUSTURN                   ((uint32_t)0x000F0000)        /*!< BUSTURN[3:0] bits (Bus turnaround phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_BUSTURN_0                 ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_BUSTURN_1                 ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_BUSTURN_2                 ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_BUSTURN_3                 ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_CLKDIV                    ((uint32_t)0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_CLKDIV_0                  ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_CLKDIV_1                  ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_CLKDIV_2                  ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_CLKDIV_3                  ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATLAT                    ((uint32_t)0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATLAT_0                  ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATLAT_1                  ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATLAT_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_DATLAT_3                  ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ACCMOD                    ((uint32_t)0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ACCMOD_0                  ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR1_ACCMOD_1                  ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDSET                    ((uint32_t)0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDSET_0                  ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDSET_1                  ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDSET_2                  ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDSET_3                  ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDHLD                    ((uint32_t)0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDHLD_0                  ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDHLD_1                  ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDHLD_2                  ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ADDHLD_3                  ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATAST                    ((uint32_t)0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATAST_0                  ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATAST_1                  ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATAST_2                  ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATAST_3                  ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_BUSTURN                   ((uint32_t)0x000F0000)        /*!< BUSTURN[3:0] bits (Bus turnaround phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_BUSTURN_0                 ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_BUSTURN_1                 ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_BUSTURN_2                 ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_BUSTURN_3                 ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_CLKDIV                    ((uint32_t)0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_CLKDIV_0                  ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_CLKDIV_1                  ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_CLKDIV_2                  ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_CLKDIV_3                  ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATLAT                    ((uint32_t)0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATLAT_0                  ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATLAT_1                  ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATLAT_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_DATLAT_3                  ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ACCMOD                    ((uint32_t)0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ACCMOD_0                  ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR2_ACCMOD_1                  ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDSET                    ((uint32_t)0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDSET_0                  ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDSET_1                  ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDSET_2                  ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDSET_3                  ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDHLD                    ((uint32_t)0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDHLD_0                  ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDHLD_1                  ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDHLD_2                  ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ADDHLD_3                  ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATAST                    ((uint32_t)0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATAST_0                  ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATAST_1                  ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATAST_2                  ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATAST_3                  ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_BUSTURN                   ((uint32_t)0x000F0000)        /*!< BUSTURN[3:0] bits (Bus turnaround phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_BUSTURN_0                 ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_BUSTURN_1                 ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_BUSTURN_2                 ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_BUSTURN_3                 ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_CLKDIV                    ((uint32_t)0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_CLKDIV_0                  ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_CLKDIV_1                  ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_CLKDIV_2                  ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_CLKDIV_3                  ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATLAT                    ((uint32_t)0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATLAT_0                  ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATLAT_1                  ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATLAT_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_DATLAT_3                  ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ACCMOD                    ((uint32_t)0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ACCMOD_0                  ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR3_ACCMOD_1                  ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDSET                    ((uint32_t)0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDSET_0                  ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDSET_1                  ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDSET_2                  ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDSET_3                  ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDHLD                    ((uint32_t)0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDHLD_0                  ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDHLD_1                  ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDHLD_2                  ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ADDHLD_3                  ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATAST                    ((uint32_t)0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATAST_0                  ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATAST_1                  ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATAST_2                  ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATAST_3                  ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_BUSTURN                   ((uint32_t)0x000F0000)        /*!< BUSTURN[3:0] bits (Bus turnaround phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_BUSTURN_0                 ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_BUSTURN_1                 ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_BUSTURN_2                 ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_BUSTURN_3                 ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_CLKDIV                    ((uint32_t)0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_CLKDIV_0                  ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_CLKDIV_1                  ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_CLKDIV_2                  ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_CLKDIV_3                  ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATLAT                    ((uint32_t)0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATLAT_0                  ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATLAT_1                  ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATLAT_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_DATLAT_3                  ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ACCMOD                    ((uint32_t)0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ACCMOD_0                  ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BTR4_ACCMOD_1                  ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDSET                   ((uint32_t)0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDSET_0                 ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDSET_1                 ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDSET_2                 ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDSET_3                 ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDHLD                   ((uint32_t)0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDHLD_0                 ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDHLD_1                 ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDHLD_2                 ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ADDHLD_3                 ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATAST                   ((uint32_t)0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATAST_0                 ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATAST_1                 ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATAST_2                 ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATAST_3                 ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_CLKDIV                   ((uint32_t)0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_CLKDIV_0                 ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_CLKDIV_1                 ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_CLKDIV_2                 ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_CLKDIV_3                 ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATLAT                   ((uint32_t)0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATLAT_0                 ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATLAT_1                 ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATLAT_2                 ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_DATLAT_3                 ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ACCMOD                   ((uint32_t)0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ACCMOD_0                 ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR1_ACCMOD_1                 ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDSET                   ((uint32_t)0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDSET_0                 ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDSET_1                 ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDSET_2                 ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDSET_3                 ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDHLD                   ((uint32_t)0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDHLD_0                 ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDHLD_1                 ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDHLD_2                 ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ADDHLD_3                 ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATAST                   ((uint32_t)0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATAST_0                 ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATAST_1                 ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATAST_2                 ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATAST_3                 ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_CLKDIV                   ((uint32_t)0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_CLKDIV_0                 ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_CLKDIV_1                 ((uint32_t)0x00200000)        /*!< Bit 1*/
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_CLKDIV_2                 ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_CLKDIV_3                 ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATLAT                   ((uint32_t)0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATLAT_0                 ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATLAT_1                 ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATLAT_2                 ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_DATLAT_3                 ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ACCMOD                   ((uint32_t)0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ACCMOD_0                 ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR2_ACCMOD_1                 ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDSET                   ((uint32_t)0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDSET_0                 ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDSET_1                 ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDSET_2                 ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDSET_3                 ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDHLD                   ((uint32_t)0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDHLD_0                 ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDHLD_1                 ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDHLD_2                 ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ADDHLD_3                 ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATAST                   ((uint32_t)0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATAST_0                 ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATAST_1                 ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATAST_2                 ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATAST_3                 ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_CLKDIV                   ((uint32_t)0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_CLKDIV_0                 ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_CLKDIV_1                 ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_CLKDIV_2                 ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_CLKDIV_3                 ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATLAT                   ((uint32_t)0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATLAT_0                 ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATLAT_1                 ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATLAT_2                 ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_DATLAT_3                 ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ACCMOD                   ((uint32_t)0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ACCMOD_0                 ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR3_ACCMOD_1                 ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDSET                   ((uint32_t)0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDSET_0                 ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDSET_1                 ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDSET_2                 ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDSET_3                 ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDHLD                   ((uint32_t)0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDHLD_0                 ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDHLD_1                 ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDHLD_2                 ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ADDHLD_3                 ((uint32_t)0x00000080)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATAST                   ((uint32_t)0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATAST_0                 ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATAST_1                 ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATAST_2                 ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATAST_3                 ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_CLKDIV                   ((uint32_t)0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_CLKDIV_0                 ((uint32_t)0x00100000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_CLKDIV_1                 ((uint32_t)0x00200000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_CLKDIV_2                 ((uint32_t)0x00400000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_CLKDIV_3                 ((uint32_t)0x00800000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATLAT                   ((uint32_t)0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATLAT_0                 ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATLAT_1                 ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATLAT_2                 ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_DATLAT_3                 ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ACCMOD                   ((uint32_t)0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ACCMOD_0                 ((uint32_t)0x10000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_BWTR4_ACCMOD_1                 ((uint32_t)0x20000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_PWAITEN                   ((uint32_t)0x00000002)        /*!< Wait feature enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_PBKEN                     ((uint32_t)0x00000004)        /*!< PC Card/NAND Flash memory bank enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_PTYP                      ((uint32_t)0x00000008)        /*!< Memory type */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_PWID                      ((uint32_t)0x00000030)        /*!< PWID[1:0] bits (NAND Flash databus width) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_PWID_0                    ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_PWID_1                    ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_ECCEN                     ((uint32_t)0x00000040)        /*!< ECC computation logic enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TCLR                      ((uint32_t)0x00001E00)        /*!< TCLR[3:0] bits (CLE to RE delay) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TCLR_0                    ((uint32_t)0x00000200)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TCLR_1                    ((uint32_t)0x00000400)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TCLR_2                    ((uint32_t)0x00000800)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TCLR_3                    ((uint32_t)0x00001000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TAR                       ((uint32_t)0x0001E000)        /*!< TAR[3:0] bits (ALE to RE delay) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TAR_0                     ((uint32_t)0x00002000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TAR_1                     ((uint32_t)0x00004000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TAR_2                     ((uint32_t)0x00008000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_TAR_3                     ((uint32_t)0x00010000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_ECCPS                     ((uint32_t)0x000E0000)        /*!< ECCPS[1:0] bits (ECC page size) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_ECCPS_0                   ((uint32_t)0x00020000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_ECCPS_1                   ((uint32_t)0x00040000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR2_ECCPS_2                   ((uint32_t)0x00080000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_PWAITEN                   ((uint32_t)0x00000002)        /*!< Wait feature enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_PBKEN                     ((uint32_t)0x00000004)        /*!< PC Card/NAND Flash memory bank enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_PTYP                      ((uint32_t)0x00000008)        /*!< Memory type */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_PWID                      ((uint32_t)0x00000030)        /*!< PWID[1:0] bits (NAND Flash databus width) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_PWID_0                    ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_PWID_1                    ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_ECCEN                     ((uint32_t)0x00000040)        /*!< ECC computation logic enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TCLR                      ((uint32_t)0x00001E00)        /*!< TCLR[3:0] bits (CLE to RE delay) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TCLR_0                    ((uint32_t)0x00000200)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TCLR_1                    ((uint32_t)0x00000400)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TCLR_2                    ((uint32_t)0x00000800)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TCLR_3                    ((uint32_t)0x00001000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TAR                       ((uint32_t)0x0001E000)        /*!< TAR[3:0] bits (ALE to RE delay) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TAR_0                     ((uint32_t)0x00002000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TAR_1                     ((uint32_t)0x00004000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TAR_2                     ((uint32_t)0x00008000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_TAR_3                     ((uint32_t)0x00010000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_ECCPS                     ((uint32_t)0x000E0000)        /*!< ECCPS[2:0] bits (ECC page size) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_ECCPS_0                   ((uint32_t)0x00020000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_ECCPS_1                   ((uint32_t)0x00040000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR3_ECCPS_2                   ((uint32_t)0x00080000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_PWAITEN                   ((uint32_t)0x00000002)        /*!< Wait feature enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_PBKEN                     ((uint32_t)0x00000004)        /*!< PC Card/NAND Flash memory bank enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_PTYP                      ((uint32_t)0x00000008)        /*!< Memory type */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_PWID                      ((uint32_t)0x00000030)        /*!< PWID[1:0] bits (NAND Flash databus width) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_PWID_0                    ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_PWID_1                    ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_ECCEN                     ((uint32_t)0x00000040)        /*!< ECC computation logic enable bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TCLR                      ((uint32_t)0x00001E00)        /*!< TCLR[3:0] bits (CLE to RE delay) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TCLR_0                    ((uint32_t)0x00000200)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TCLR_1                    ((uint32_t)0x00000400)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TCLR_2                    ((uint32_t)0x00000800)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TCLR_3                    ((uint32_t)0x00001000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TAR                       ((uint32_t)0x0001E000)        /*!< TAR[3:0] bits (ALE to RE delay) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TAR_0                     ((uint32_t)0x00002000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TAR_1                     ((uint32_t)0x00004000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TAR_2                     ((uint32_t)0x00008000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_TAR_3                     ((uint32_t)0x00010000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_ECCPS                     ((uint32_t)0x000E0000)        /*!< ECCPS[2:0] bits (ECC page size) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_ECCPS_0                   ((uint32_t)0x00020000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_ECCPS_1                   ((uint32_t)0x00040000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PCR4_ECCPS_2                   ((uint32_t)0x00080000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMSET2                  ((uint32_t)0x000000FF)        /*!< MEMSET2[7:0] bits (Common memory 2 setup time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMSET2_0                ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMSET2_1                ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMSET2_2                ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMSET2_3                ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMSET2_4                ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMSET2_5                ((uint32_t)0x00000020)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMSET2_6                ((uint32_t)0x00000040)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMSET2_7                ((uint32_t)0x00000080)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMWAIT2                 ((uint32_t)0x0000FF00)        /*!< MEMWAIT2[7:0] bits (Common memory 2 wait time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMWAIT2_0               ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMWAIT2_1               ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMWAIT2_2               ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMWAIT2_3               ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMWAIT2_4               ((uint32_t)0x00001000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMWAIT2_5               ((uint32_t)0x00002000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMWAIT2_6               ((uint32_t)0x00004000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMWAIT2_7               ((uint32_t)0x00008000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHOLD2                 ((uint32_t)0x00FF0000)        /*!< MEMHOLD2[7:0] bits (Common memory 2 hold time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHOLD2_0               ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHOLD2_1               ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHOLD2_2               ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHOLD2_3               ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHOLD2_4               ((uint32_t)0x00100000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHOLD2_5               ((uint32_t)0x00200000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHOLD2_6               ((uint32_t)0x00400000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHOLD2_7               ((uint32_t)0x00800000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHIZ2                  ((uint32_t)0xFF000000)        /*!< MEMHIZ2[7:0] bits (Common memory 2 databus HiZ time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHIZ2_0                ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHIZ2_1                ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHIZ2_2                ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHIZ2_3                ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHIZ2_4                ((uint32_t)0x10000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHIZ2_5                ((uint32_t)0x20000000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHIZ2_6                ((uint32_t)0x40000000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM2_MEMHIZ2_7                ((uint32_t)0x80000000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMSET3                  ((uint32_t)0x000000FF)        /*!< MEMSET3[7:0] bits (Common memory 3 setup time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMSET3_0                ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMSET3_1                ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMSET3_2                ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMSET3_3                ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMSET3_4                ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMSET3_5                ((uint32_t)0x00000020)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMSET3_6                ((uint32_t)0x00000040)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMSET3_7                ((uint32_t)0x00000080)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMWAIT3                 ((uint32_t)0x0000FF00)        /*!< MEMWAIT3[7:0] bits (Common memory 3 wait time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMWAIT3_0               ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMWAIT3_1               ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMWAIT3_2               ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMWAIT3_3               ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMWAIT3_4               ((uint32_t)0x00001000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMWAIT3_5               ((uint32_t)0x00002000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMWAIT3_6               ((uint32_t)0x00004000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMWAIT3_7               ((uint32_t)0x00008000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHOLD3                 ((uint32_t)0x00FF0000)        /*!< MEMHOLD3[7:0] bits (Common memory 3 hold time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHOLD3_0               ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHOLD3_1               ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHOLD3_2               ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHOLD3_3               ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHOLD3_4               ((uint32_t)0x00100000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHOLD3_5               ((uint32_t)0x00200000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHOLD3_6               ((uint32_t)0x00400000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHOLD3_7               ((uint32_t)0x00800000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHIZ3                  ((uint32_t)0xFF000000)        /*!< MEMHIZ3[7:0] bits (Common memory 3 databus HiZ time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHIZ3_0                ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHIZ3_1                ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHIZ3_2                ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHIZ3_3                ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHIZ3_4                ((uint32_t)0x10000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHIZ3_5                ((uint32_t)0x20000000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHIZ3_6                ((uint32_t)0x40000000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM3_MEMHIZ3_7                ((uint32_t)0x80000000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMSET4                  ((uint32_t)0x000000FF)        /*!< MEMSET4[7:0] bits (Common memory 4 setup time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMSET4_0                ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMSET4_1                ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMSET4_2                ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMSET4_3                ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMSET4_4                ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMSET4_5                ((uint32_t)0x00000020)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMSET4_6                ((uint32_t)0x00000040)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMSET4_7                ((uint32_t)0x00000080)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMWAIT4                 ((uint32_t)0x0000FF00)        /*!< MEMWAIT4[7:0] bits (Common memory 4 wait time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMWAIT4_0               ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMWAIT4_1               ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMWAIT4_2               ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMWAIT4_3               ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMWAIT4_4               ((uint32_t)0x00001000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMWAIT4_5               ((uint32_t)0x00002000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMWAIT4_6               ((uint32_t)0x00004000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMWAIT4_7               ((uint32_t)0x00008000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHOLD4                 ((uint32_t)0x00FF0000)        /*!< MEMHOLD4[7:0] bits (Common memory 4 hold time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHOLD4_0               ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHOLD4_1               ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHOLD4_2               ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHOLD4_3               ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHOLD4_4               ((uint32_t)0x00100000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHOLD4_5               ((uint32_t)0x00200000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHOLD4_6               ((uint32_t)0x00400000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHOLD4_7               ((uint32_t)0x00800000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHIZ4                  ((uint32_t)0xFF000000)        /*!< MEMHIZ4[7:0] bits (Common memory 4 databus HiZ time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHIZ4_0                ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHIZ4_1                ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHIZ4_2                ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHIZ4_3                ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHIZ4_4                ((uint32_t)0x10000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHIZ4_5                ((uint32_t)0x20000000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHIZ4_6                ((uint32_t)0x40000000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PMEM4_MEMHIZ4_7                ((uint32_t)0x80000000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTSET2                  ((uint32_t)0x000000FF)        /*!< ATTSET2[7:0] bits (Attribute memory 2 setup time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTSET2_0                ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTSET2_1                ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTSET2_2                ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTSET2_3                ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTSET2_4                ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTSET2_5                ((uint32_t)0x00000020)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTSET2_6                ((uint32_t)0x00000040)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTSET2_7                ((uint32_t)0x00000080)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTWAIT2                 ((uint32_t)0x0000FF00)        /*!< ATTWAIT2[7:0] bits (Attribute memory 2 wait time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTWAIT2_0               ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTWAIT2_1               ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTWAIT2_2               ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTWAIT2_3               ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTWAIT2_4               ((uint32_t)0x00001000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTWAIT2_5               ((uint32_t)0x00002000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTWAIT2_6               ((uint32_t)0x00004000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTWAIT2_7               ((uint32_t)0x00008000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHOLD2                 ((uint32_t)0x00FF0000)        /*!< ATTHOLD2[7:0] bits (Attribute memory 2 hold time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHOLD2_0               ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHOLD2_1               ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHOLD2_2               ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHOLD2_3               ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHOLD2_4               ((uint32_t)0x00100000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHOLD2_5               ((uint32_t)0x00200000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHOLD2_6               ((uint32_t)0x00400000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHOLD2_7               ((uint32_t)0x00800000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHIZ2                  ((uint32_t)0xFF000000)        /*!< ATTHIZ2[7:0] bits (Attribute memory 2 databus HiZ time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHIZ2_0                ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHIZ2_1                ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHIZ2_2                ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHIZ2_3                ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHIZ2_4                ((uint32_t)0x10000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHIZ2_5                ((uint32_t)0x20000000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHIZ2_6                ((uint32_t)0x40000000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT2_ATTHIZ2_7                ((uint32_t)0x80000000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTSET3                  ((uint32_t)0x000000FF)        /*!< ATTSET3[7:0] bits (Attribute memory 3 setup time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTSET3_0                ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTSET3_1                ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTSET3_2                ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTSET3_3                ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTSET3_4                ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTSET3_5                ((uint32_t)0x00000020)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTSET3_6                ((uint32_t)0x00000040)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTSET3_7                ((uint32_t)0x00000080)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTWAIT3                 ((uint32_t)0x0000FF00)        /*!< ATTWAIT3[7:0] bits (Attribute memory 3 wait time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTWAIT3_0               ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTWAIT3_1               ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTWAIT3_2               ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTWAIT3_3               ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTWAIT3_4               ((uint32_t)0x00001000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTWAIT3_5               ((uint32_t)0x00002000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTWAIT3_6               ((uint32_t)0x00004000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTWAIT3_7               ((uint32_t)0x00008000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHOLD3                 ((uint32_t)0x00FF0000)        /*!< ATTHOLD3[7:0] bits (Attribute memory 3 hold time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHOLD3_0               ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHOLD3_1               ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHOLD3_2               ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHOLD3_3               ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHOLD3_4               ((uint32_t)0x00100000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHOLD3_5               ((uint32_t)0x00200000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHOLD3_6               ((uint32_t)0x00400000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHOLD3_7               ((uint32_t)0x00800000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHIZ3                  ((uint32_t)0xFF000000)        /*!< ATTHIZ3[7:0] bits (Attribute memory 3 databus HiZ time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHIZ3_0                ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHIZ3_1                ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHIZ3_2                ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHIZ3_3                ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHIZ3_4                ((uint32_t)0x10000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHIZ3_5                ((uint32_t)0x20000000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHIZ3_6                ((uint32_t)0x40000000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT3_ATTHIZ3_7                ((uint32_t)0x80000000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTSET4                  ((uint32_t)0x000000FF)        /*!< ATTSET4[7:0] bits (Attribute memory 4 setup time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTSET4_0                ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTSET4_1                ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTSET4_2                ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTSET4_3                ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTSET4_4                ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTSET4_5                ((uint32_t)0x00000020)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTSET4_6                ((uint32_t)0x00000040)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTSET4_7                ((uint32_t)0x00000080)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTWAIT4                 ((uint32_t)0x0000FF00)        /*!< ATTWAIT4[7:0] bits (Attribute memory 4 wait time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTWAIT4_0               ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTWAIT4_1               ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTWAIT4_2               ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTWAIT4_3               ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTWAIT4_4               ((uint32_t)0x00001000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTWAIT4_5               ((uint32_t)0x00002000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTWAIT4_6               ((uint32_t)0x00004000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTWAIT4_7               ((uint32_t)0x00008000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHOLD4                 ((uint32_t)0x00FF0000)        /*!< ATTHOLD4[7:0] bits (Attribute memory 4 hold time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHOLD4_0               ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHOLD4_1               ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHOLD4_2               ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHOLD4_3               ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHOLD4_4               ((uint32_t)0x00100000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHOLD4_5               ((uint32_t)0x00200000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHOLD4_6               ((uint32_t)0x00400000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHOLD4_7               ((uint32_t)0x00800000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHIZ4                  ((uint32_t)0xFF000000)        /*!< ATTHIZ4[7:0] bits (Attribute memory 4 databus HiZ time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHIZ4_0                ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHIZ4_1                ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHIZ4_2                ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHIZ4_3                ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHIZ4_4                ((uint32_t)0x10000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHIZ4_5                ((uint32_t)0x20000000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHIZ4_6                ((uint32_t)0x40000000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PATT4_ATTHIZ4_7                ((uint32_t)0x80000000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOSET4                    ((uint32_t)0x000000FF)        /*!< IOSET4[7:0] bits (I/O 4 setup time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOSET4_0                  ((uint32_t)0x00000001)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOSET4_1                  ((uint32_t)0x00000002)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOSET4_2                  ((uint32_t)0x00000004)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOSET4_3                  ((uint32_t)0x00000008)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOSET4_4                  ((uint32_t)0x00000010)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOSET4_5                  ((uint32_t)0x00000020)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOSET4_6                  ((uint32_t)0x00000040)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOSET4_7                  ((uint32_t)0x00000080)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOWAIT4                   ((uint32_t)0x0000FF00)        /*!< IOWAIT4[7:0] bits (I/O 4 wait time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOWAIT4_0                 ((uint32_t)0x00000100)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOWAIT4_1                 ((uint32_t)0x00000200)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOWAIT4_2                 ((uint32_t)0x00000400)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOWAIT4_3                 ((uint32_t)0x00000800)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOWAIT4_4                 ((uint32_t)0x00001000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOWAIT4_5                 ((uint32_t)0x00002000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOWAIT4_6                 ((uint32_t)0x00004000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOWAIT4_7                 ((uint32_t)0x00008000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHOLD4                   ((uint32_t)0x00FF0000)        /*!< IOHOLD4[7:0] bits (I/O 4 hold time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHOLD4_0                 ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHOLD4_1                 ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHOLD4_2                 ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHOLD4_3                 ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHOLD4_4                 ((uint32_t)0x00100000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHOLD4_5                 ((uint32_t)0x00200000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHOLD4_6                 ((uint32_t)0x00400000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHOLD4_7                 ((uint32_t)0x00800000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHIZ4                    ((uint32_t)0xFF000000)        /*!< IOHIZ4[7:0] bits (I/O 4 databus HiZ time) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHIZ4_0                  ((uint32_t)0x01000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHIZ4_1                  ((uint32_t)0x02000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHIZ4_2                  ((uint32_t)0x04000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHIZ4_3                  ((uint32_t)0x08000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHIZ4_4                  ((uint32_t)0x10000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHIZ4_5                  ((uint32_t)0x20000000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHIZ4_6                  ((uint32_t)0x40000000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_PIO4_IOHIZ4_7                  ((uint32_t)0x80000000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_ECCR2_ECC2                     ((uint32_t)0xFFFFFFFF)        /*!< ECC result */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FSMC_ECCR3_ECC3                     ((uint32_t)0xFFFFFFFF)        /*!< ECC result */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ARG_CMDARG                     ((uint32_t)0xFFFFFFFF)            /*!< Command argument */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_RESP0_CARDSTATUS0              ((uint32_t)0xFFFFFFFF)        /*!< Card Status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_RESP1_CARDSTATUS1              ((uint32_t)0xFFFFFFFF)        /*!< Card Status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_RESP2_CARDSTATUS2              ((uint32_t)0xFFFFFFFF)        /*!< Card Status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_RESP3_CARDSTATUS3              ((uint32_t)0xFFFFFFFF)        /*!< Card Status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_RESP4_CARDSTATUS4              ((uint32_t)0xFFFFFFFF)        /*!< Card Status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_DTIMER_DATATIME                ((uint32_t)0xFFFFFFFF)        /*!< Data timeout period. */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_DLEN_DATALENGTH                ((uint32_t)0x01FFFFFF)        /*!< Data length value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_DCOUNT_DATACOUNT               ((uint32_t)0x01FFFFFF)        /*!< Data count value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_CCRCFAIL                   ((uint32_t)0x00000001)        /*!< Command response received (CRC check failed) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_DCRCFAIL                   ((uint32_t)0x00000002)        /*!< Data block sent/received (CRC check failed) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_CTIMEOUT                   ((uint32_t)0x00000004)        /*!< Command response timeout */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_DTIMEOUT                   ((uint32_t)0x00000008)        /*!< Data timeout */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_TXUNDERR                   ((uint32_t)0x00000010)        /*!< Transmit FIFO underrun error */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_RXOVERR                    ((uint32_t)0x00000020)        /*!< Received FIFO overrun error */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_CMDREND                    ((uint32_t)0x00000040)        /*!< Command response received (CRC check passed) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_CMDSENT                    ((uint32_t)0x00000080)        /*!< Command sent (no response required) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_DATAEND                    ((uint32_t)0x00000100)        /*!< Data end (data counter, SDIDCOUNT, is zero) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_STBITERR                   ((uint32_t)0x00000200)        /*!< Start bit not detected on all data signals in wide bus mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_DBCKEND                    ((uint32_t)0x00000400)        /*!< Data block sent/received (CRC check passed) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_CMDACT                     ((uint32_t)0x00000800)        /*!< Command transfer in progress */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_TXACT                      ((uint32_t)0x00001000)        /*!< Data transmit in progress */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_RXACT                      ((uint32_t)0x00002000)        /*!< Data receive in progress */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_TXFIFOHE                   ((uint32_t)0x00004000)        /*!< Transmit FIFO Half Empty: at least 8 words can be written into the FIFO */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_RXFIFOHF                   ((uint32_t)0x00008000)        /*!< Receive FIFO Half Full: there are at least 8 words in the FIFO */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_TXFIFOF                    ((uint32_t)0x00010000)        /*!< Transmit FIFO full */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_RXFIFOF                    ((uint32_t)0x00020000)        /*!< Receive FIFO full */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_TXFIFOE                    ((uint32_t)0x00040000)        /*!< Transmit FIFO empty */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_RXFIFOE                    ((uint32_t)0x00080000)        /*!< Receive FIFO empty */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_TXDAVL                     ((uint32_t)0x00100000)        /*!< Data available in transmit FIFO */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_RXDAVL                     ((uint32_t)0x00200000)        /*!< Data available in receive FIFO */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_SDIOIT                     ((uint32_t)0x00400000)        /*!< SDIO interrupt received */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_STA_CEATAEND                   ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received for CMD61 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_CCRCFAILC                  ((uint32_t)0x00000001)        /*!< CCRCFAIL flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_DCRCFAILC                  ((uint32_t)0x00000002)        /*!< DCRCFAIL flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_CTIMEOUTC                  ((uint32_t)0x00000004)        /*!< CTIMEOUT flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_DTIMEOUTC                  ((uint32_t)0x00000008)        /*!< DTIMEOUT flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_TXUNDERRC                  ((uint32_t)0x00000010)        /*!< TXUNDERR flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_RXOVERRC                   ((uint32_t)0x00000020)        /*!< RXOVERR flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_CMDRENDC                   ((uint32_t)0x00000040)        /*!< CMDREND flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_CMDSENTC                   ((uint32_t)0x00000080)        /*!< CMDSENT flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_DATAENDC                   ((uint32_t)0x00000100)        /*!< DATAEND flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_STBITERRC                  ((uint32_t)0x00000200)        /*!< STBITERR flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_DBCKENDC                   ((uint32_t)0x00000400)        /*!< DBCKEND flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_SDIOITC                    ((uint32_t)0x00400000)        /*!< SDIOIT flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_ICR_CEATAENDC                  ((uint32_t)0x00800000)        /*!< CEATAEND flag clear bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_CCRCFAILIE                ((uint32_t)0x00000001)        /*!< Command CRC Fail Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_DCRCFAILIE                ((uint32_t)0x00000002)        /*!< Data CRC Fail Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_CTIMEOUTIE                ((uint32_t)0x00000004)        /*!< Command TimeOut Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_DTIMEOUTIE                ((uint32_t)0x00000008)        /*!< Data TimeOut Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_CMDRENDIE                 ((uint32_t)0x00000040)        /*!< Command Response Received Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_CMDSENTIE                 ((uint32_t)0x00000080)        /*!< Command Sent Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_DATAENDIE                 ((uint32_t)0x00000100)        /*!< Data End Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_DBCKENDIE                 ((uint32_t)0x00000400)        /*!< Data Block End Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_CMDACTIE                  ((uint32_t)0x00000800)        /*!< Command Acting Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_TXACTIE                   ((uint32_t)0x00001000)        /*!< Data Transmit Acting Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_RXACTIE                   ((uint32_t)0x00002000)        /*!< Data receive acting interrupt enabled */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_TXFIFOHEIE                ((uint32_t)0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_RXFIFOHFIE                ((uint32_t)0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_TXFIFOFIE                 ((uint32_t)0x00010000)        /*!< Tx FIFO Full interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_RXFIFOFIE                 ((uint32_t)0x00020000)        /*!< Rx FIFO Full interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_TXFIFOEIE                 ((uint32_t)0x00040000)        /*!< Tx FIFO Empty interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_RXFIFOEIE                 ((uint32_t)0x00080000)        /*!< Rx FIFO Empty interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_TXDAVLIE                  ((uint32_t)0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_RXDAVLIE                  ((uint32_t)0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_SDIOITIE                  ((uint32_t)0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_MASK_CEATAENDIE                ((uint32_t)0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_FIFOCNT_FIFOCOUNT              ((uint32_t)0x00FFFFFF)        /*!< Remaining number of words to be written to or read from the FIFO */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  SDIO_FIFO_FIFODATA                  ((uint32_t)0xFFFFFFFF)        /*!< Receive and transmit FIFO data */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_TX_0_COUNT0_TX_0         ((uint32_t)0x000003FF)        /*!< Transmission Byte Count 0 (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_TX_1_COUNT0_TX_1         ((uint32_t)0x03FF0000)        /*!< Transmission Byte Count 0 (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_TX_0_COUNT1_TX_0          ((uint32_t)0x000003FF)        /*!< Transmission Byte Count 1 (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_TX_1_COUNT1_TX_1          ((uint32_t)0x03FF0000)        /*!< Transmission Byte Count 1 (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_TX_0_COUNT2_TX_0         ((uint32_t)0x000003FF)        /*!< Transmission Byte Count 2 (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_TX_1_COUNT2_TX_1         ((uint32_t)0x03FF0000)        /*!< Transmission Byte Count 2 (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_TX_0_COUNT4_TX_0         ((uint32_t)0x000003FF)        /*!< Transmission Byte Count 4 (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_TX_1_COUNT4_TX_1         ((uint32_t)0x03FF0000)        /*!< Transmission Byte Count 4 (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_TX_0_COUNT5_TX_0         ((uint32_t)0x000003FF)        /*!< Transmission Byte Count 5 (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_TX_1_COUNT5_TX_1         ((uint32_t)0x03FF0000)        /*!< Transmission Byte Count 5 (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_TX_0_COUNT6_TX_0         ((uint32_t)0x000003FF)        /*!< Transmission Byte Count 6 (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_TX_1_COUNT6_TX_1         ((uint32_t)0x03FF0000)        /*!< Transmission Byte Count 6 (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_TX_0_COUNT7_TX_0         ((uint32_t)0x000003FF)        /*!< Transmission Byte Count 7 (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_TX_1_COUNT7_TX_1         ((uint32_t)0x03FF0000)        /*!< Transmission Byte Count 7 (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_0_COUNT0_RX_0         ((uint32_t)0x000003FF)        /*!< Reception Byte Count (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_0_NUM_BLOCK_0         ((uint32_t)0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_0_NUM_BLOCK_0_0       ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_0_NUM_BLOCK_0_1       ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_0_NUM_BLOCK_0_2       ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_0_NUM_BLOCK_0_3       ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_0_NUM_BLOCK_0_4       ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_0_BLSIZE_0            ((uint32_t)0x00008000)        /*!< BLock SIZE (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_1_COUNT0_RX_1         ((uint32_t)0x03FF0000)        /*!< Reception Byte Count (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_1_NUM_BLOCK_1         ((uint32_t)0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_1_NUM_BLOCK_1_0       ((uint32_t)0x04000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_1_NUM_BLOCK_1_1       ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_1_NUM_BLOCK_1_2       ((uint32_t)0x10000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_1_NUM_BLOCK_1_3       ((uint32_t)0x20000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_1_NUM_BLOCK_1_4       ((uint32_t)0x40000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT0_RX_1_BLSIZE_1            ((uint32_t)0x80000000)        /*!< BLock SIZE (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_0_COUNT1_RX_0         ((uint32_t)0x000003FF)        /*!< Reception Byte Count (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_0_NUM_BLOCK_0         ((uint32_t)0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_0_NUM_BLOCK_0_0       ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_0_NUM_BLOCK_0_1       ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_0_NUM_BLOCK_0_2       ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_0_NUM_BLOCK_0_3       ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_0_NUM_BLOCK_0_4       ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_0_BLSIZE_0            ((uint32_t)0x00008000)        /*!< BLock SIZE (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_1_COUNT1_RX_1         ((uint32_t)0x03FF0000)        /*!< Reception Byte Count (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_1_NUM_BLOCK_1         ((uint32_t)0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_1_NUM_BLOCK_1_0       ((uint32_t)0x04000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_1_NUM_BLOCK_1_1       ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_1_NUM_BLOCK_1_2       ((uint32_t)0x10000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_1_NUM_BLOCK_1_3       ((uint32_t)0x20000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_1_NUM_BLOCK_1_4       ((uint32_t)0x40000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT1_RX_1_BLSIZE_1            ((uint32_t)0x80000000)        /*!< BLock SIZE (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_0_COUNT2_RX_0         ((uint32_t)0x000003FF)        /*!< Reception Byte Count (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_0_NUM_BLOCK_0         ((uint32_t)0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_0_NUM_BLOCK_0_0       ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_0_NUM_BLOCK_0_1       ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_0_NUM_BLOCK_0_2       ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_0_NUM_BLOCK_0_3       ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_0_NUM_BLOCK_0_4       ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_0_BLSIZE_0            ((uint32_t)0x00008000)        /*!< BLock SIZE (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_1_COUNT2_RX_1         ((uint32_t)0x03FF0000)        /*!< Reception Byte Count (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_1_NUM_BLOCK_1         ((uint32_t)0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_1_NUM_BLOCK_1_0       ((uint32_t)0x04000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_1_NUM_BLOCK_1_1       ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_1_NUM_BLOCK_1_2       ((uint32_t)0x10000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_1_NUM_BLOCK_1_3       ((uint32_t)0x20000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_1_NUM_BLOCK_1_4       ((uint32_t)0x40000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT2_RX_1_BLSIZE_1            ((uint32_t)0x80000000)        /*!< BLock SIZE (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_0_COUNT3_RX_0         ((uint32_t)0x000003FF)        /*!< Reception Byte Count (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_0_NUM_BLOCK_0         ((uint32_t)0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_0_NUM_BLOCK_0_0       ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_0_NUM_BLOCK_0_1       ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_0_NUM_BLOCK_0_2       ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_0_NUM_BLOCK_0_3       ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_0_NUM_BLOCK_0_4       ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_0_BLSIZE_0            ((uint32_t)0x00008000)        /*!< BLock SIZE (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_1_COUNT3_RX_1         ((uint32_t)0x03FF0000)        /*!< Reception Byte Count (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_1_NUM_BLOCK_1         ((uint32_t)0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_1_NUM_BLOCK_1_0       ((uint32_t)0x04000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_1_NUM_BLOCK_1_1       ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_1_NUM_BLOCK_1_2       ((uint32_t)0x10000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_1_NUM_BLOCK_1_3       ((uint32_t)0x20000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_1_NUM_BLOCK_1_4       ((uint32_t)0x40000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT3_RX_1_BLSIZE_1            ((uint32_t)0x80000000)        /*!< BLock SIZE (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_0_COUNT4_RX_0         ((uint32_t)0x000003FF)        /*!< Reception Byte Count (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_0_NUM_BLOCK_0         ((uint32_t)0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_0_NUM_BLOCK_0_0      ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_0_NUM_BLOCK_0_1      ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_0_NUM_BLOCK_0_2      ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_0_NUM_BLOCK_0_3      ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_0_NUM_BLOCK_0_4      ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_0_BLSIZE_0            ((uint32_t)0x00008000)        /*!< BLock SIZE (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_1_COUNT4_RX_1         ((uint32_t)0x03FF0000)        /*!< Reception Byte Count (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_1_NUM_BLOCK_1         ((uint32_t)0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_1_NUM_BLOCK_1_0       ((uint32_t)0x04000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_1_NUM_BLOCK_1_1       ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_1_NUM_BLOCK_1_2       ((uint32_t)0x10000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_1_NUM_BLOCK_1_3       ((uint32_t)0x20000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_1_NUM_BLOCK_1_4       ((uint32_t)0x40000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT4_RX_1_BLSIZE_1            ((uint32_t)0x80000000)        /*!< BLock SIZE (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_0_COUNT5_RX_0         ((uint32_t)0x000003FF)        /*!< Reception Byte Count (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_0_NUM_BLOCK_0         ((uint32_t)0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_0_NUM_BLOCK_0_0       ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_0_NUM_BLOCK_0_1       ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_0_NUM_BLOCK_0_2       ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_0_NUM_BLOCK_0_3       ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_0_NUM_BLOCK_0_4       ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_0_BLSIZE_0            ((uint32_t)0x00008000)        /*!< BLock SIZE (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_1_COUNT5_RX_1         ((uint32_t)0x03FF0000)        /*!< Reception Byte Count (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_1_NUM_BLOCK_1         ((uint32_t)0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_1_NUM_BLOCK_1_0       ((uint32_t)0x04000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_1_NUM_BLOCK_1_1       ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_1_NUM_BLOCK_1_2       ((uint32_t)0x10000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_1_NUM_BLOCK_1_3       ((uint32_t)0x20000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_1_NUM_BLOCK_1_4       ((uint32_t)0x40000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT5_RX_1_BLSIZE_1            ((uint32_t)0x80000000)        /*!< BLock SIZE (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_0_COUNT6_RX_0         ((uint32_t)0x000003FF)        /*!< Reception Byte Count (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_0_NUM_BLOCK_0         ((uint32_t)0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_0_NUM_BLOCK_0_0       ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_0_NUM_BLOCK_0_1       ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_0_NUM_BLOCK_0_2       ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_0_NUM_BLOCK_0_3       ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_0_NUM_BLOCK_0_4       ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_0_BLSIZE_0            ((uint32_t)0x00008000)        /*!< BLock SIZE (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_1_COUNT6_RX_1         ((uint32_t)0x03FF0000)        /*!< Reception Byte Count (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_1_NUM_BLOCK_1         ((uint32_t)0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_1_NUM_BLOCK_1_0       ((uint32_t)0x04000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_1_NUM_BLOCK_1_1       ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_1_NUM_BLOCK_1_2       ((uint32_t)0x10000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_1_NUM_BLOCK_1_3       ((uint32_t)0x20000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_1_NUM_BLOCK_1_4       ((uint32_t)0x40000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT6_RX_1_BLSIZE_1            ((uint32_t)0x80000000)        /*!< BLock SIZE (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_0_COUNT7_RX_0         ((uint32_t)0x000003FF)        /*!< Reception Byte Count (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_0_NUM_BLOCK_0         ((uint32_t)0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_0_NUM_BLOCK_0_0       ((uint32_t)0x00000400)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_0_NUM_BLOCK_0_1       ((uint32_t)0x00000800)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_0_NUM_BLOCK_0_2       ((uint32_t)0x00001000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_0_NUM_BLOCK_0_3       ((uint32_t)0x00002000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_0_NUM_BLOCK_0_4       ((uint32_t)0x00004000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_0_BLSIZE_0            ((uint32_t)0x00008000)        /*!< BLock SIZE (low) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_1_COUNT7_RX_1         ((uint32_t)0x03FF0000)        /*!< Reception Byte Count (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_1_NUM_BLOCK_1         ((uint32_t)0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_1_NUM_BLOCK_1_0       ((uint32_t)0x04000000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_1_NUM_BLOCK_1_1       ((uint32_t)0x08000000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_1_NUM_BLOCK_1_2       ((uint32_t)0x10000000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_1_NUM_BLOCK_1_3       ((uint32_t)0x20000000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_1_NUM_BLOCK_1_4       ((uint32_t)0x40000000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  USB_COUNT7_RX_1_BLSIZE_1            ((uint32_t)0x80000000)        /*!< BLock SIZE (high) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_RQCP0                       ((uint32_t)0x00000001)        /*!< Request Completed Mailbox0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TXOK0                       ((uint32_t)0x00000002)        /*!< Transmission OK of Mailbox0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_ALST0                       ((uint32_t)0x00000004)        /*!< Arbitration Lost for Mailbox0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TERR0                       ((uint32_t)0x00000008)        /*!< Transmission Error of Mailbox0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_ABRQ0                       ((uint32_t)0x00000080)        /*!< Abort Request for Mailbox0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_RQCP1                       ((uint32_t)0x00000100)        /*!< Request Completed Mailbox1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TXOK1                       ((uint32_t)0x00000200)        /*!< Transmission OK of Mailbox1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_ALST1                       ((uint32_t)0x00000400)        /*!< Arbitration Lost for Mailbox1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TERR1                       ((uint32_t)0x00000800)        /*!< Transmission Error of Mailbox1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_ABRQ1                       ((uint32_t)0x00008000)        /*!< Abort Request for Mailbox 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_RQCP2                       ((uint32_t)0x00010000)        /*!< Request Completed Mailbox2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TXOK2                       ((uint32_t)0x00020000)        /*!< Transmission OK of Mailbox 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_ALST2                       ((uint32_t)0x00040000)        /*!< Arbitration Lost for mailbox 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TERR2                       ((uint32_t)0x00080000)        /*!< Transmission Error of Mailbox 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_ABRQ2                       ((uint32_t)0x00800000)        /*!< Abort Request for Mailbox 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_CODE                        ((uint32_t)0x03000000)        /*!< Mailbox Code */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TME                         ((uint32_t)0x1C000000)        /*!< TME[2:0] bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TME0                        ((uint32_t)0x04000000)        /*!< Transmit Mailbox 0 Empty */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TME1                        ((uint32_t)0x08000000)        /*!< Transmit Mailbox 1 Empty */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_TME2                        ((uint32_t)0x10000000)        /*!< Transmit Mailbox 2 Empty */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_LOW                         ((uint32_t)0xE0000000)        /*!< LOW[2:0] bits */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_LOW0                        ((uint32_t)0x20000000)        /*!< Lowest Priority Flag for Mailbox 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_LOW1                        ((uint32_t)0x40000000)        /*!< Lowest Priority Flag for Mailbox 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TSR_LOW2                        ((uint32_t)0x80000000)        /*!< Lowest Priority Flag for Mailbox 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_TMEIE                       ((uint32_t)0x00000001)        /*!< Transmit Mailbox Empty Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_FMPIE0                      ((uint32_t)0x00000002)        /*!< FIFO Message Pending Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_FFIE0                       ((uint32_t)0x00000004)        /*!< FIFO Full Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_FOVIE0                      ((uint32_t)0x00000008)        /*!< FIFO Overrun Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_FMPIE1                      ((uint32_t)0x00000010)        /*!< FIFO Message Pending Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_FFIE1                       ((uint32_t)0x00000020)        /*!< FIFO Full Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_FOVIE1                      ((uint32_t)0x00000040)        /*!< FIFO Overrun Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_EWGIE                       ((uint32_t)0x00000100)        /*!< Error Warning Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_EPVIE                       ((uint32_t)0x00000200)        /*!< Error Passive Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_BOFIE                       ((uint32_t)0x00000400)        /*!< Bus-Off Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_LECIE                       ((uint32_t)0x00000800)        /*!< Last Error Code Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_ERRIE                       ((uint32_t)0x00008000)        /*!< Error Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_WKUIE                       ((uint32_t)0x00010000)        /*!< Wakeup Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_IER_SLKIE                       ((uint32_t)0x00020000)        /*!< Sleep Interrupt Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_ESR_EWGF                        ((uint32_t)0x00000001)        /*!< Error Warning Flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_ESR_EPVF                        ((uint32_t)0x00000002)        /*!< Error Passive Flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_ESR_BOFF                        ((uint32_t)0x00000004)        /*!< Bus-Off Flag */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_ESR_LEC                         ((uint32_t)0x00000070)        /*!< LEC[2:0] bits (Last Error Code) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_ESR_LEC_0                       ((uint32_t)0x00000010)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_ESR_LEC_1                       ((uint32_t)0x00000020)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_ESR_LEC_2                       ((uint32_t)0x00000040)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_ESR_TEC                         ((uint32_t)0x00FF0000)        /*!< Least significant byte of the 9-bit Transmit Error Counter */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_ESR_REC                         ((uint32_t)0xFF000000)        /*!< Receive Error Counter */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_BTR_BRP                         ((uint32_t)0x000003FF)        /*!< Baud Rate Prescaler */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_BTR_TS1                         ((uint32_t)0x000F0000)        /*!< Time Segment 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_BTR_TS2                         ((uint32_t)0x00700000)        /*!< Time Segment 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_BTR_SJW                         ((uint32_t)0x03000000)        /*!< Resynchronization Jump Width */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_BTR_LBKM                        ((uint32_t)0x40000000)        /*!< Loop Back Mode (Debug) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_BTR_SILM                        ((uint32_t)0x80000000)        /*!< Silent Mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI0R_TXRQ                       ((uint32_t)0x00000001)        /*!< Transmit Mailbox Request */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI0R_RTR                        ((uint32_t)0x00000002)        /*!< Remote Transmission Request */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI0R_IDE                        ((uint32_t)0x00000004)        /*!< Identifier Extension */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI0R_EXID                       ((uint32_t)0x001FFFF8)        /*!< Extended Identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI0R_STID                       ((uint32_t)0xFFE00000)        /*!< Standard Identifier or Extended Identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDT0R_DLC                       ((uint32_t)0x0000000F)        /*!< Data Length Code */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDT0R_TGT                       ((uint32_t)0x00000100)        /*!< Transmit Global Time */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDT0R_TIME                      ((uint32_t)0xFFFF0000)        /*!< Message Time Stamp */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL0R_DATA0                     ((uint32_t)0x000000FF)        /*!< Data byte 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL0R_DATA1                     ((uint32_t)0x0000FF00)        /*!< Data byte 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL0R_DATA2                     ((uint32_t)0x00FF0000)        /*!< Data byte 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL0R_DATA3                     ((uint32_t)0xFF000000)        /*!< Data byte 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH0R_DATA4                     ((uint32_t)0x000000FF)        /*!< Data byte 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH0R_DATA5                     ((uint32_t)0x0000FF00)        /*!< Data byte 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH0R_DATA6                     ((uint32_t)0x00FF0000)        /*!< Data byte 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH0R_DATA7                     ((uint32_t)0xFF000000)        /*!< Data byte 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI1R_TXRQ                       ((uint32_t)0x00000001)        /*!< Transmit Mailbox Request */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI1R_RTR                        ((uint32_t)0x00000002)        /*!< Remote Transmission Request */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI1R_IDE                        ((uint32_t)0x00000004)        /*!< Identifier Extension */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI1R_EXID                       ((uint32_t)0x001FFFF8)        /*!< Extended Identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI1R_STID                       ((uint32_t)0xFFE00000)        /*!< Standard Identifier or Extended Identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDT1R_DLC                       ((uint32_t)0x0000000F)        /*!< Data Length Code */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDT1R_TGT                       ((uint32_t)0x00000100)        /*!< Transmit Global Time */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDT1R_TIME                      ((uint32_t)0xFFFF0000)        /*!< Message Time Stamp */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL1R_DATA0                     ((uint32_t)0x000000FF)        /*!< Data byte 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL1R_DATA1                     ((uint32_t)0x0000FF00)        /*!< Data byte 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL1R_DATA2                     ((uint32_t)0x00FF0000)        /*!< Data byte 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL1R_DATA3                     ((uint32_t)0xFF000000)        /*!< Data byte 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH1R_DATA4                     ((uint32_t)0x000000FF)        /*!< Data byte 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH1R_DATA5                     ((uint32_t)0x0000FF00)        /*!< Data byte 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH1R_DATA6                     ((uint32_t)0x00FF0000)        /*!< Data byte 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH1R_DATA7                     ((uint32_t)0xFF000000)        /*!< Data byte 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI2R_TXRQ                       ((uint32_t)0x00000001)        /*!< Transmit Mailbox Request */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI2R_RTR                        ((uint32_t)0x00000002)        /*!< Remote Transmission Request */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI2R_IDE                        ((uint32_t)0x00000004)        /*!< Identifier Extension */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI2R_EXID                       ((uint32_t)0x001FFFF8)        /*!< Extended identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TI2R_STID                       ((uint32_t)0xFFE00000)        /*!< Standard Identifier or Extended Identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDT2R_DLC                       ((uint32_t)0x0000000F)        /*!< Data Length Code */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDT2R_TGT                       ((uint32_t)0x00000100)        /*!< Transmit Global Time */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDT2R_TIME                      ((uint32_t)0xFFFF0000)        /*!< Message Time Stamp */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL2R_DATA0                     ((uint32_t)0x000000FF)        /*!< Data byte 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL2R_DATA1                     ((uint32_t)0x0000FF00)        /*!< Data byte 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL2R_DATA2                     ((uint32_t)0x00FF0000)        /*!< Data byte 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDL2R_DATA3                     ((uint32_t)0xFF000000)        /*!< Data byte 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH2R_DATA4                     ((uint32_t)0x000000FF)        /*!< Data byte 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH2R_DATA5                     ((uint32_t)0x0000FF00)        /*!< Data byte 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH2R_DATA6                     ((uint32_t)0x00FF0000)        /*!< Data byte 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_TDH2R_DATA7                     ((uint32_t)0xFF000000)        /*!< Data byte 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RI0R_RTR                        ((uint32_t)0x00000002)        /*!< Remote Transmission Request */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RI0R_IDE                        ((uint32_t)0x00000004)        /*!< Identifier Extension */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RI0R_EXID                       ((uint32_t)0x001FFFF8)        /*!< Extended Identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RI0R_STID                       ((uint32_t)0xFFE00000)        /*!< Standard Identifier or Extended Identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDT0R_DLC                       ((uint32_t)0x0000000F)        /*!< Data Length Code */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDT0R_FMI                       ((uint32_t)0x0000FF00)        /*!< Filter Match Index */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDT0R_TIME                      ((uint32_t)0xFFFF0000)        /*!< Message Time Stamp */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDL0R_DATA0                     ((uint32_t)0x000000FF)        /*!< Data byte 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDL0R_DATA1                     ((uint32_t)0x0000FF00)        /*!< Data byte 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDL0R_DATA2                     ((uint32_t)0x00FF0000)        /*!< Data byte 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDL0R_DATA3                     ((uint32_t)0xFF000000)        /*!< Data byte 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDH0R_DATA4                     ((uint32_t)0x000000FF)        /*!< Data byte 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDH0R_DATA5                     ((uint32_t)0x0000FF00)        /*!< Data byte 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDH0R_DATA6                     ((uint32_t)0x00FF0000)        /*!< Data byte 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDH0R_DATA7                     ((uint32_t)0xFF000000)        /*!< Data byte 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RI1R_RTR                        ((uint32_t)0x00000002)        /*!< Remote Transmission Request */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RI1R_IDE                        ((uint32_t)0x00000004)        /*!< Identifier Extension */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RI1R_EXID                       ((uint32_t)0x001FFFF8)        /*!< Extended identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RI1R_STID                       ((uint32_t)0xFFE00000)        /*!< Standard Identifier or Extended Identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDT1R_DLC                       ((uint32_t)0x0000000F)        /*!< Data Length Code */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDT1R_FMI                       ((uint32_t)0x0000FF00)        /*!< Filter Match Index */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDT1R_TIME                      ((uint32_t)0xFFFF0000)        /*!< Message Time Stamp */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDL1R_DATA0                     ((uint32_t)0x000000FF)        /*!< Data byte 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDL1R_DATA1                     ((uint32_t)0x0000FF00)        /*!< Data byte 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDL1R_DATA2                     ((uint32_t)0x00FF0000)        /*!< Data byte 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDL1R_DATA3                     ((uint32_t)0xFF000000)        /*!< Data byte 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDH1R_DATA4                     ((uint32_t)0x000000FF)        /*!< Data byte 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDH1R_DATA5                     ((uint32_t)0x0000FF00)        /*!< Data byte 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDH1R_DATA6                     ((uint32_t)0x00FF0000)        /*!< Data byte 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_RDH1R_DATA7                     ((uint32_t)0xFF000000)        /*!< Data byte 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R1_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB0                       ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB1                       ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB2                       ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB3                       ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB4                       ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB5                       ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB6                       ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB7                       ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB8                       ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB9                       ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB10                      ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB11                      ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB12                      ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB13                      ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB14                      ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB15                      ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB16                      ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB17                      ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB18                      ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB19                      ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB20                      ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB21                      ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB22                      ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB23                      ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB24                      ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB25                      ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB26                      ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB27                      ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB28                      ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB29                      ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB30                      ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R1_FB31                      ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB0                       ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB1                       ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB2                       ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB3                       ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB4                       ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB5                       ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB6                       ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB7                       ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB8                       ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB9                       ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB10                      ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB11                      ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB12                      ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB13                      ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB14                      ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB15                      ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB16                      ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB17                      ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB18                      ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB19                      ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB20                      ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB21                      ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB22                      ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB23                      ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB24                      ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB25                      ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB26                      ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB27                      ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB28                      ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB29                      ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB30                      ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R1_FB31                      ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB0                       ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB1                       ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB2                       ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB3                       ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB4                       ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB5                       ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB6                       ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB7                       ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB8                       ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB9                       ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB10                      ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB11                      ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB12                      ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB13                      ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB14                      ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB15                      ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB16                      ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB17                      ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB18                      ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB19                      ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB20                      ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB21                      ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB22                      ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB23                      ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB24                      ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB25                      ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB26                      ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB27                      ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB28                      ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB29                      ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB30                      ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R1_FB31                      ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB0                       ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB1                       ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB2                       ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB3                       ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB4                       ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB5                       ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB6                       ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB7                       ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB8                       ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB9                       ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB10                      ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB11                      ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB12                      ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB13                      ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB14                      ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB15                      ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB16                      ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB17                      ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB18                      ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB19                      ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB20                      ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB21                      ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB22                      ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB23                      ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB24                      ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB25                      ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB26                      ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB27                      ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB28                      ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB29                      ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB30                      ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R1_FB31                      ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F0R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F1R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F2R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F3R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F4R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F5R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F6R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F7R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F8R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB0                        ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB1                        ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB2                        ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB3                        ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB4                        ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB5                        ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB6                        ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB7                        ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB8                        ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB9                        ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB10                       ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB11                       ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB12                       ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB13                       ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB14                       ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB15                       ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB16                       ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB17                       ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB18                       ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB19                       ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB20                       ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB21                       ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB22                       ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB23                       ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB24                       ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB25                       ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB26                       ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB27                       ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB28                       ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB29                       ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB30                       ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F9R2_FB31                       ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB0                       ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB1                       ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB2                       ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB3                       ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB4                       ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB5                       ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB6                       ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB7                       ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB8                       ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB9                       ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB10                      ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB11                      ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB12                      ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB13                      ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB14                      ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB15                      ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB16                      ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB17                      ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB18                      ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB19                      ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB20                      ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB21                      ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB22                      ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB23                      ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB24                      ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB25                      ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB26                      ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB27                      ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB28                      ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB29                      ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB30                      ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F10R2_FB31                      ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB0                       ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB1                       ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB2                       ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB3                       ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB4                       ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB5                       ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB6                       ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB7                       ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB8                       ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB9                       ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB10                      ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB11                      ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB12                      ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB13                      ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB14                      ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB15                      ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB16                      ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB17                      ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB18                      ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB19                      ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB20                      ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB21                      ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB22                      ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB23                      ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB24                      ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB25                      ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB26                      ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB27                      ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB28                      ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB29                      ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB30                      ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F11R2_FB31                      ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB0                       ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB1                       ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB2                       ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB3                       ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB4                       ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB5                       ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB6                       ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB7                       ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB8                       ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB9                       ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB10                      ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB11                      ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB12                      ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB13                      ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB14                      ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB15                      ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB16                      ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB17                      ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB18                      ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB19                      ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB20                      ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB21                      ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB22                      ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB23                      ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB24                      ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB25                      ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB26                      ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB27                      ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB28                      ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB29                      ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB30                      ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F12R2_FB31                      ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB0                       ((uint32_t)0x00000001)        /*!< Filter bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB1                       ((uint32_t)0x00000002)        /*!< Filter bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB2                       ((uint32_t)0x00000004)        /*!< Filter bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB3                       ((uint32_t)0x00000008)        /*!< Filter bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB4                       ((uint32_t)0x00000010)        /*!< Filter bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB5                       ((uint32_t)0x00000020)        /*!< Filter bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB6                       ((uint32_t)0x00000040)        /*!< Filter bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB7                       ((uint32_t)0x00000080)        /*!< Filter bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB8                       ((uint32_t)0x00000100)        /*!< Filter bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB9                       ((uint32_t)0x00000200)        /*!< Filter bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB10                      ((uint32_t)0x00000400)        /*!< Filter bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB11                      ((uint32_t)0x00000800)        /*!< Filter bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB12                      ((uint32_t)0x00001000)        /*!< Filter bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB13                      ((uint32_t)0x00002000)        /*!< Filter bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB14                      ((uint32_t)0x00004000)        /*!< Filter bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB15                      ((uint32_t)0x00008000)        /*!< Filter bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB16                      ((uint32_t)0x00010000)        /*!< Filter bit 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB17                      ((uint32_t)0x00020000)        /*!< Filter bit 17 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB18                      ((uint32_t)0x00040000)        /*!< Filter bit 18 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB19                      ((uint32_t)0x00080000)        /*!< Filter bit 19 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB20                      ((uint32_t)0x00100000)        /*!< Filter bit 20 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB21                      ((uint32_t)0x00200000)        /*!< Filter bit 21 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB22                      ((uint32_t)0x00400000)        /*!< Filter bit 22 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB23                      ((uint32_t)0x00800000)        /*!< Filter bit 23 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB24                      ((uint32_t)0x01000000)        /*!< Filter bit 24 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB25                      ((uint32_t)0x02000000)        /*!< Filter bit 25 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB26                      ((uint32_t)0x04000000)        /*!< Filter bit 26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB27                      ((uint32_t)0x08000000)        /*!< Filter bit 27 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB28                      ((uint32_t)0x10000000)        /*!< Filter bit 28 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB29                      ((uint32_t)0x20000000)        /*!< Filter bit 29 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB30                      ((uint32_t)0x40000000)        /*!< Filter bit 30 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  CAN_F13R2_FB31                      ((uint32_t)0x80000000)        /*!< Filter bit 31 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_DEV_ID                ((uint32_t)0x00000FFF)        /*!< Device Identifier */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID                ((uint32_t)0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_0              ((uint32_t)0x00010000)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_1              ((uint32_t)0x00020000)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_2              ((uint32_t)0x00040000)        /*!< Bit 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_3              ((uint32_t)0x00080000)        /*!< Bit 3 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_4              ((uint32_t)0x00100000)        /*!< Bit 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_5              ((uint32_t)0x00200000)        /*!< Bit 5 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_6              ((uint32_t)0x00400000)        /*!< Bit 6 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_7              ((uint32_t)0x00800000)        /*!< Bit 7 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_8              ((uint32_t)0x01000000)        /*!< Bit 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_9              ((uint32_t)0x02000000)        /*!< Bit 9 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_10             ((uint32_t)0x04000000)        /*!< Bit 10 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_11             ((uint32_t)0x08000000)        /*!< Bit 11 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_12             ((uint32_t)0x10000000)        /*!< Bit 12 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_13             ((uint32_t)0x20000000)        /*!< Bit 13 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_14             ((uint32_t)0x40000000)        /*!< Bit 14 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_IDCODE_REV_ID_15             ((uint32_t)0x80000000)        /*!< Bit 15 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_SLEEP                 ((uint32_t)0x00000001)        /*!< Debug Sleep Mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_STOP                  ((uint32_t)0x00000002)        /*!< Debug Stop Mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_STANDBY               ((uint32_t)0x00000004)        /*!< Debug Standby mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_TRACE_IOEN                ((uint32_t)0x00000020)        /*!< Trace Pin Assignment Control */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_TRACE_MODE                ((uint32_t)0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_TRACE_MODE_0              ((uint32_t)0x00000040)        /*!< Bit 0 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_TRACE_MODE_1              ((uint32_t)0x00000080)        /*!< Bit 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_IWDG_STOP             ((uint32_t)0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_WWDG_STOP             ((uint32_t)0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM1_STOP             ((uint32_t)0x00000400)        /*!< TIM1 counter stopped when core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM2_STOP             ((uint32_t)0x00000800)        /*!< TIM2 counter stopped when core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM3_STOP             ((uint32_t)0x00001000)        /*!< TIM3 counter stopped when core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM4_STOP             ((uint32_t)0x00002000)        /*!< TIM4 counter stopped when core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_CAN1_STOP             ((uint32_t)0x00004000)        /*!< Debug CAN1 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM8_STOP             ((uint32_t)0x00020000)        /*!< TIM8 counter stopped when core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM5_STOP             ((uint32_t)0x00040000)        /*!< TIM5 counter stopped when core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM6_STOP             ((uint32_t)0x00080000)        /*!< TIM6 counter stopped when core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM7_STOP             ((uint32_t)0x00100000)        /*!< TIM7 counter stopped when core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_CAN2_STOP             ((uint32_t)0x00200000)        /*!< Debug CAN2 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM15_STOP            ((uint32_t)0x00400000)        /*!< Debug TIM15 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM16_STOP            ((uint32_t)0x00800000)        /*!< Debug TIM16 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM17_STOP            ((uint32_t)0x01000000)        /*!< Debug TIM17 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM12_STOP            ((uint32_t)0x02000000)        /*!< Debug TIM12 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM13_STOP            ((uint32_t)0x04000000)        /*!< Debug TIM13 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM14_STOP            ((uint32_t)0x08000000)        /*!< Debug TIM14 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM9_STOP             ((uint32_t)0x10000000)        /*!< Debug TIM9 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM10_STOP            ((uint32_t)0x20000000)        /*!< Debug TIM10 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  DBGMCU_CR_DBG_TIM11_STOP            ((uint32_t)0x40000000)        /*!< Debug TIM11 stopped when Core is halted */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_KEYR_FKEYR                    ((uint32_t)0xFFFFFFFF)        /*!< FPEC Key */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_OPTKEYR_OPTKEYR               ((uint32_t)0xFFFFFFFF)        /*!< Option Byte Key */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_AR_FAR                        ((uint32_t)0xFFFFFFFF)        /*!< Flash Address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_WRPR_WRP                        ((uint32_t)0xFFFFFFFF)        /*!< Write Protect */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_RDP_RDP                       ((uint32_t)0x000000FF)        /*!< Read protection option byte */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_RDP_nRDP                      ((uint32_t)0x0000FF00)        /*!< Read protection complemented option byte */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_USER_USER                     ((uint32_t)0x00FF0000)        /*!< User option byte */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_USER_nUSER                    ((uint32_t)0xFF000000)        /*!< User complemented option byte */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_Data0_Data0                   ((uint32_t)0x000000FF)        /*!< User data storage option byte */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_Data0_nData0                  ((uint32_t)0x0000FF00)        /*!< User data storage complemented option byte */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_Data1_Data1                   ((uint32_t)0x00FF0000)        /*!< User data storage option byte */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_Data1_nData1                  ((uint32_t)0xFF000000)        /*!< User data storage complemented option byte */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_WRP0_WRP0                     ((uint32_t)0x000000FF)        /*!< Flash memory write protection option bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_WRP0_nWRP0                    ((uint32_t)0x0000FF00)        /*!< Flash memory write protection complemented option bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_WRP1_WRP1                     ((uint32_t)0x00FF0000)        /*!< Flash memory write protection option bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_WRP1_nWRP1                    ((uint32_t)0xFF000000)        /*!< Flash memory write protection complemented option bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_WRP2_WRP2                     ((uint32_t)0x000000FF)        /*!< Flash memory write protection option bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_WRP2_nWRP2                    ((uint32_t)0x0000FF00)        /*!< Flash memory write protection complemented option bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_WRP3_WRP3                     ((uint32_t)0x00FF0000)        /*!< Flash memory write protection option bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define  FLASH_WRP3_nWRP3                    ((uint32_t)0xFF000000)        /*!< Flash memory write protection complemented option bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_WD      ((uint32_t)0x00800000)  /* Watchdog disable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_JD      ((uint32_t)0x00400000)  /* Jabber disable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_IFG     ((uint32_t)0x000E0000)  /* Inter-frame gap */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_IFG_96Bit     ((uint32_t)0x00000000)  /* Minimum IFG between frames during transmission is 96Bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_IFG_88Bit     ((uint32_t)0x00020000)  /* Minimum IFG between frames during transmission is 88Bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_IFG_80Bit     ((uint32_t)0x00040000)  /* Minimum IFG between frames during transmission is 80Bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_IFG_72Bit     ((uint32_t)0x00060000)  /* Minimum IFG between frames during transmission is 72Bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_IFG_64Bit     ((uint32_t)0x00080000)  /* Minimum IFG between frames during transmission is 64Bit */        
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_IFG_56Bit     ((uint32_t)0x000A0000)  /* Minimum IFG between frames during transmission is 56Bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_IFG_48Bit     ((uint32_t)0x000C0000)  /* Minimum IFG between frames during transmission is 48Bit */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_IFG_40Bit     ((uint32_t)0x000E0000)  /* Minimum IFG between frames during transmission is 40Bit */              
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_CSD     ((uint32_t)0x00010000)  /* Carrier sense disable (during transmission) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_FES     ((uint32_t)0x00004000)  /* Fast ethernet speed */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_ROD     ((uint32_t)0x00002000)  /* Receive own disable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_LM      ((uint32_t)0x00001000)  /* loopback mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_DM      ((uint32_t)0x00000800)  /* Duplex mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_IPCO    ((uint32_t)0x00000400)  /* IP Checksum offload */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_RD      ((uint32_t)0x00000200)  /* Retry disable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_APCS    ((uint32_t)0x00000080)  /* Automatic Pad/CRC stripping */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_BL      ((uint32_t)0x00000060)  /* Back-off limit: random integer number (r) of slot time delays before rescheduling
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_BL_10    ((uint32_t)0x00000000)  /* k = min (n, 10) */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_BL_8     ((uint32_t)0x00000020)  /* k = min (n, 8) */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_BL_4     ((uint32_t)0x00000040)  /* k = min (n, 4) */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACCR_BL_1     ((uint32_t)0x00000060)  /* k = min (n, 1) */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_DC      ((uint32_t)0x00000010)  /* Defferal check */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_TE      ((uint32_t)0x00000008)  /* Transmitter enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACCR_RE      ((uint32_t)0x00000004)  /* Receiver enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_RA     ((uint32_t)0x80000000)  /* Receive all */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_HPF    ((uint32_t)0x00000400)  /* Hash or perfect filter */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_SAF    ((uint32_t)0x00000200)  /* Source address filter enable */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_SAIF   ((uint32_t)0x00000100)  /* SA inverse filtering */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_PCF    ((uint32_t)0x000000C0)  /* Pass control frames: 3 cases */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACFFR_PCF_BlockAll                ((uint32_t)0x00000040)  /* MAC filters all control frames from reaching the application */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACFFR_PCF_ForwardAll              ((uint32_t)0x00000080)  /* MAC forwards all control frames to application even if they fail the Address Filter */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACFFR_PCF_ForwardPassedAddrFilter ((uint32_t)0x000000C0)  /* MAC forwards control frames that pass the Address Filter. */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_BFD    ((uint32_t)0x00000020)  /* Broadcast frame disable */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_PAM 	  ((uint32_t)0x00000010)  /* Pass all mutlicast */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_DAIF   ((uint32_t)0x00000008)  /* DA Inverse filtering */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_HM     ((uint32_t)0x00000004)  /* Hash multicast */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_HU     ((uint32_t)0x00000002)  /* Hash unicast */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFFR_PM     ((uint32_t)0x00000001)  /* Promiscuous mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACHTHR_HTH   ((uint32_t)0xFFFFFFFF)  /* Hash table high */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACHTLR_HTL   ((uint32_t)0xFFFFFFFF)  /* Hash table low */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACMIIAR_PA   ((uint32_t)0x0000F800)  /* Physical layer address */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACMIIAR_MR   ((uint32_t)0x000007C0)  /* MII register in the selected PHY */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACMIIAR_CR   ((uint32_t)0x0000001C)  /* CR clock range: 6 cases */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACMIIAR_CR_Div42   ((uint32_t)0x00000000)  /* HCLK:60-72 MHz; MDC clock= HCLK/42 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACMIIAR_CR_Div16   ((uint32_t)0x00000008)  /* HCLK:20-35 MHz; MDC clock= HCLK/16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACMIIAR_CR_Div26   ((uint32_t)0x0000000C)  /* HCLK:35-60 MHz; MDC clock= HCLK/26 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACMIIAR_MW   ((uint32_t)0x00000002)  /* MII write */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACMIIAR_MB   ((uint32_t)0x00000001)  /* MII busy */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACMIIDR_MD   ((uint32_t)0x0000FFFF)  /* MII data: read/write data from/to PHY */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFCR_PT     ((uint32_t)0xFFFF0000)  /* Pause time */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFCR_ZQPD   ((uint32_t)0x00000080)  /* Zero-quanta pause disable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFCR_PLT    ((uint32_t)0x00000030)  /* Pause low threshold: 4 cases */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACFCR_PLT_Minus4   ((uint32_t)0x00000000)  /* Pause time minus 4 slot times */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACFCR_PLT_Minus28  ((uint32_t)0x00000010)  /* Pause time minus 28 slot times */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACFCR_PLT_Minus144 ((uint32_t)0x00000020)  /* Pause time minus 144 slot times */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACFCR_PLT_Minus256 ((uint32_t)0x00000030)  /* Pause time minus 256 slot times */      
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFCR_UPFD   ((uint32_t)0x00000008)  /* Unicast pause frame detect */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFCR_RFCE   ((uint32_t)0x00000004)  /* Receive flow control enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFCR_TFCE   ((uint32_t)0x00000002)  /* Transmit flow control enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACFCR_FCBBPA ((uint32_t)0x00000001)  /* Flow control busy/backpressure activate */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACVLANTR_VLANTC ((uint32_t)0x00010000)  /* 12-bit VLAN tag comparison */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACVLANTR_VLANTI ((uint32_t)0x0000FFFF)  /* VLAN tag identifier (for receive frames) */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACRWUFFR_D   ((uint32_t)0xFFFFFFFF)  /* Wake-up frame filter register data */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACPMTCSR_WFFRPR ((uint32_t)0x80000000)  /* Wake-Up Frame Filter Register Pointer Reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACPMTCSR_GU     ((uint32_t)0x00000200)  /* Global Unicast */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACPMTCSR_WFR    ((uint32_t)0x00000040)  /* Wake-Up Frame Received */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACPMTCSR_MPR    ((uint32_t)0x00000020)  /* Magic Packet Received */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACPMTCSR_WFE    ((uint32_t)0x00000004)  /* Wake-Up Frame Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACPMTCSR_MPE    ((uint32_t)0x00000002)  /* Magic Packet Enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACPMTCSR_PD     ((uint32_t)0x00000001)  /* Power Down */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACSR_TSTS      ((uint32_t)0x00000200)  /* Time stamp trigger status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACSR_MMCTS     ((uint32_t)0x00000040)  /* MMC transmit status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACSR_MMMCRS    ((uint32_t)0x00000020)  /* MMC receive status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACSR_MMCS      ((uint32_t)0x00000010)  /* MMC status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACSR_PMTS      ((uint32_t)0x00000008)  /* PMT status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACIMR_TSTIM     ((uint32_t)0x00000200)  /* Time stamp trigger interrupt mask */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACIMR_PMTIM     ((uint32_t)0x00000008)  /* PMT interrupt mask */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA0HR_MACA0H   ((uint32_t)0x0000FFFF)  /* MAC address0 high */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA0LR_MACA0L   ((uint32_t)0xFFFFFFFF)  /* MAC address0 low */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA1HR_AE       ((uint32_t)0x80000000)  /* Address enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA1HR_SA       ((uint32_t)0x40000000)  /* Source address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA1HR_MBC      ((uint32_t)0x3F000000)  /* Mask byte control: bits to mask for comparison of the MAC Address bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA1HR_MBC_HBits15_8    ((uint32_t)0x20000000)  /* Mask MAC Address high reg bits [15:8] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA1HR_MBC_HBits7_0     ((uint32_t)0x10000000)  /* Mask MAC Address high reg bits [7:0] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA1HR_MBC_LBits31_24   ((uint32_t)0x08000000)  /* Mask MAC Address low reg bits [31:24] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA1HR_MBC_LBits23_16   ((uint32_t)0x04000000)  /* Mask MAC Address low reg bits [23:16] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA1HR_MBC_LBits15_8    ((uint32_t)0x02000000)  /* Mask MAC Address low reg bits [15:8] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA1HR_MBC_LBits7_0     ((uint32_t)0x01000000)  /* Mask MAC Address low reg bits [7:0] */ 
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA1HR_MACA1H   ((uint32_t)0x0000FFFF)  /* MAC address1 high */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA1LR_MACA1L   ((uint32_t)0xFFFFFFFF)  /* MAC address1 low */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA2HR_AE       ((uint32_t)0x80000000)  /* Address enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA2HR_SA       ((uint32_t)0x40000000)  /* Source address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA2HR_MBC      ((uint32_t)0x3F000000)  /* Mask byte control */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA2HR_MBC_HBits15_8    ((uint32_t)0x20000000)  /* Mask MAC Address high reg bits [15:8] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA2HR_MBC_HBits7_0     ((uint32_t)0x10000000)  /* Mask MAC Address high reg bits [7:0] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA2HR_MBC_LBits31_24   ((uint32_t)0x08000000)  /* Mask MAC Address low reg bits [31:24] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA2HR_MBC_LBits23_16   ((uint32_t)0x04000000)  /* Mask MAC Address low reg bits [23:16] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA2HR_MBC_LBits15_8    ((uint32_t)0x02000000)  /* Mask MAC Address low reg bits [15:8] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA2HR_MBC_LBits7_0     ((uint32_t)0x01000000)  /* Mask MAC Address low reg bits [70] */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA2HR_MACA2H   ((uint32_t)0x0000FFFF)  /* MAC address1 high */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA2LR_MACA2L   ((uint32_t)0xFFFFFFFF)  /* MAC address2 low */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA3HR_AE       ((uint32_t)0x80000000)  /* Address enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA3HR_SA       ((uint32_t)0x40000000)  /* Source address */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA3HR_MBC      ((uint32_t)0x3F000000)  /* Mask byte control */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA3HR_MBC_HBits15_8    ((uint32_t)0x20000000)  /* Mask MAC Address high reg bits [15:8] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA3HR_MBC_HBits7_0     ((uint32_t)0x10000000)  /* Mask MAC Address high reg bits [7:0] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA3HR_MBC_LBits31_24   ((uint32_t)0x08000000)  /* Mask MAC Address low reg bits [31:24] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA3HR_MBC_LBits23_16   ((uint32_t)0x04000000)  /* Mask MAC Address low reg bits [23:16] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA3HR_MBC_LBits15_8    ((uint32_t)0x02000000)  /* Mask MAC Address low reg bits [15:8] */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_MACA3HR_MBC_LBits7_0     ((uint32_t)0x01000000)  /* Mask MAC Address low reg bits [70] */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA3HR_MACA3H   ((uint32_t)0x0000FFFF)  /* MAC address3 high */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MACA3LR_MACA3L   ((uint32_t)0xFFFFFFFF)  /* MAC address3 low */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCCR_MCF        ((uint32_t)0x00000008)  /* MMC Counter Freeze */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCCR_ROR        ((uint32_t)0x00000004)  /* Reset on Read */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCCR_CSR        ((uint32_t)0x00000002)  /* Counter Stop Rollover */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCCR_CR         ((uint32_t)0x00000001)  /* Counters Reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCRIR_RGUFS     ((uint32_t)0x00020000)  /* Set when Rx good unicast frames counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCRIR_RFAES     ((uint32_t)0x00000040)  /* Set when Rx alignment error counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCRIR_RFCES     ((uint32_t)0x00000020)  /* Set when Rx crc error counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCTIR_TGFS      ((uint32_t)0x00200000)  /* Set when Tx good frame count counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCTIR_TGFMSCS   ((uint32_t)0x00008000)  /* Set when Tx good multi col counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCTIR_TGFSCS    ((uint32_t)0x00004000)  /* Set when Tx good single col counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCRIMR_RGUFM    ((uint32_t)0x00020000)  /* Mask the interrupt when Rx good unicast frames counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCRIMR_RFAEM    ((uint32_t)0x00000040)  /* Mask the interrupt when when Rx alignment error counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCRIMR_RFCEM    ((uint32_t)0x00000020)  /* Mask the interrupt when Rx crc error counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCTIMR_TGFM     ((uint32_t)0x00200000)  /* Mask the interrupt when Tx good frame count counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCTIMR_TGFMSCM  ((uint32_t)0x00008000)  /* Mask the interrupt when Tx good multi col counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCTIMR_TGFSCM   ((uint32_t)0x00004000)  /* Mask the interrupt when Tx good single col counter reaches half the maximum value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCTGFSCCR_TGFSCC     ((uint32_t)0xFFFFFFFF)  /* Number of successfully transmitted frames after a single collision in Half-duplex mode. */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCTGFMSCCR_TGFMSCC   ((uint32_t)0xFFFFFFFF)  /* Number of successfully transmitted frames after more than a single collision in Half-duplex mode. */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCTGFCR_TGFC    ((uint32_t)0xFFFFFFFF)  /* Number of good frames transmitted. */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCRFCECR_RFCEC  ((uint32_t)0xFFFFFFFF)  /* Number of frames received with CRC error. */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCRFAECR_RFAEC  ((uint32_t)0xFFFFFFFF)  /* Number of frames received with alignment (dribble) error */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_MMCRGUFCR_RGUFC  ((uint32_t)0xFFFFFFFF)  /* Number of good unicast frames received. */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSCR_TSARU    ((uint32_t)0x00000020)  /* Addend register update */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSCR_TSITE    ((uint32_t)0x00000010)  /* Time stamp interrupt trigger enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSCR_TSSTU    ((uint32_t)0x00000008)  /* Time stamp update */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSCR_TSSTI    ((uint32_t)0x00000004)  /* Time stamp initialize */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSCR_TSFCU    ((uint32_t)0x00000002)  /* Time stamp fine or coarse update */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSCR_TSE      ((uint32_t)0x00000001)  /* Time stamp enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPSSIR_STSSI    ((uint32_t)0x000000FF)  /* System time Sub-second increment value */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSHR_STS      ((uint32_t)0xFFFFFFFF)  /* System Time second */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSLR_STPNS    ((uint32_t)0x80000000)  /* System Time Positive or negative time */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSLR_STSS     ((uint32_t)0x7FFFFFFF)  /* System Time sub-seconds */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSHUR_TSUS    ((uint32_t)0xFFFFFFFF)  /* Time stamp update seconds */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSLUR_TSUPNS  ((uint32_t)0x80000000)  /* Time stamp update Positive or negative time */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSLUR_TSUSS   ((uint32_t)0x7FFFFFFF)  /* Time stamp update sub-seconds */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTSAR_TSA      ((uint32_t)0xFFFFFFFF)  /* Time stamp addend */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTTHR_TTSH     ((uint32_t)0xFFFFFFFF)  /* Target time stamp high */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_PTPTTLR_TTSL     ((uint32_t)0xFFFFFFFF)  /* Target time stamp low */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_AAB       ((uint32_t)0x02000000)  /* Address-Aligned beats */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_FPM        ((uint32_t)0x01000000)  /* 4xPBL mode */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_USP       ((uint32_t)0x00800000)  /* Use separate PBL */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_RDP       ((uint32_t)0x007E0000)  /* RxDMA PBL */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_1Beat    ((uint32_t)0x00020000)  /* maximum number of beats to be transferred in one RxDMA transaction is 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_2Beat    ((uint32_t)0x00040000)  /* maximum number of beats to be transferred in one RxDMA transaction is 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_4Beat    ((uint32_t)0x00080000)  /* maximum number of beats to be transferred in one RxDMA transaction is 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_8Beat    ((uint32_t)0x00100000)  /* maximum number of beats to be transferred in one RxDMA transaction is 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_16Beat   ((uint32_t)0x00200000)  /* maximum number of beats to be transferred in one RxDMA transaction is 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_32Beat   ((uint32_t)0x00400000)  /* maximum number of beats to be transferred in one RxDMA transaction is 32 */                
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_4xPBL_4Beat   ((uint32_t)0x01020000)  /* maximum number of beats to be transferred in one RxDMA transaction is 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_4xPBL_8Beat   ((uint32_t)0x01040000)  /* maximum number of beats to be transferred in one RxDMA transaction is 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_4xPBL_16Beat  ((uint32_t)0x01080000)  /* maximum number of beats to be transferred in one RxDMA transaction is 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_4xPBL_32Beat  ((uint32_t)0x01100000)  /* maximum number of beats to be transferred in one RxDMA transaction is 32 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_4xPBL_64Beat  ((uint32_t)0x01200000)  /* maximum number of beats to be transferred in one RxDMA transaction is 64 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RDP_4xPBL_128Beat ((uint32_t)0x01400000)  /* maximum number of beats to be transferred in one RxDMA transaction is 128 */  
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_FB        ((uint32_t)0x00010000)  /* Fixed Burst */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_RTPR      ((uint32_t)0x0000C000)  /* Rx Tx priority ratio */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RTPR_1_1     ((uint32_t)0x00000000)  /* Rx Tx priority ratio */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RTPR_2_1     ((uint32_t)0x00004000)  /* Rx Tx priority ratio */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RTPR_3_1     ((uint32_t)0x00008000)  /* Rx Tx priority ratio */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_RTPR_4_1     ((uint32_t)0x0000C000)  /* Rx Tx priority ratio */  
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_PBL    ((uint32_t)0x00003F00)  /* Programmable burst length */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_1Beat    ((uint32_t)0x00000100)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 1 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_2Beat    ((uint32_t)0x00000200)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 2 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_4Beat    ((uint32_t)0x00000400)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_8Beat    ((uint32_t)0x00000800)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_16Beat   ((uint32_t)0x00001000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_32Beat   ((uint32_t)0x00002000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 32 */                
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_4xPBL_4Beat   ((uint32_t)0x01000100)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 4 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_4xPBL_8Beat   ((uint32_t)0x01000200)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 8 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_4xPBL_16Beat  ((uint32_t)0x01000400)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 16 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_4xPBL_32Beat  ((uint32_t)0x01000800)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 32 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_4xPBL_64Beat  ((uint32_t)0x01001000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 64 */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMABMR_PBL_4xPBL_128Beat ((uint32_t)0x01002000)  /* maximum number of beats to be transferred in one TxDMA (or both) transaction is 128 */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_DSL       ((uint32_t)0x0000007C)  /* Descriptor Skip Length */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_DA        ((uint32_t)0x00000002)  /* DMA arbitration scheme */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMABMR_SR        ((uint32_t)0x00000001)  /* Software reset */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMATPDR_TPD      ((uint32_t)0xFFFFFFFF)  /* Transmit poll demand */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMARPDR_RPD      ((uint32_t)0xFFFFFFFF)  /* Receive poll demand  */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMARDLAR_SRL     ((uint32_t)0xFFFFFFFF)  /* Start of receive list */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMATDLAR_STL     ((uint32_t)0xFFFFFFFF)  /* Start of transmit list */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_TSTS       ((uint32_t)0x20000000)  /* Time-stamp trigger status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_PMTS       ((uint32_t)0x10000000)  /* PMT status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_MMCS       ((uint32_t)0x08000000)  /* MMC status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_EBS        ((uint32_t)0x03800000)  /* Error bits status */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_EBS_DescAccess      ((uint32_t)0x02000000)  /* Error bits 0-data buffer, 1-desc. access */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_EBS_ReadTransf      ((uint32_t)0x01000000)  /* Error bits 0-write trnsf, 1-read transfr */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_EBS_DataTransfTx    ((uint32_t)0x00800000)  /* Error bits 0-Rx DMA, 1-Tx DMA */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_TPS         ((uint32_t)0x00700000)  /* Transmit process state */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_TPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Tx Command issued  */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_TPS_Fetching        ((uint32_t)0x00100000)  /* Running - fetching the Tx descriptor */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_TPS_Waiting         ((uint32_t)0x00200000)  /* Running - waiting for status */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_TPS_Reading         ((uint32_t)0x00300000)  /* Running - reading the data from host memory */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_TPS_Suspended       ((uint32_t)0x00600000)  /* Suspended - Tx Descriptor unavailabe */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_TPS_Closing         ((uint32_t)0x00700000)  /* Running - closing Rx descriptor */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_RPS         ((uint32_t)0x000E0000)  /* Receive process state */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_RPS_Stopped         ((uint32_t)0x00000000)  /* Stopped - Reset or Stop Rx Command issued */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_RPS_Fetching        ((uint32_t)0x00020000)  /* Running - fetching the Rx descriptor */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_RPS_Waiting         ((uint32_t)0x00060000)  /* Running - waiting for packet */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_RPS_Suspended       ((uint32_t)0x00080000)  /* Suspended - Rx Descriptor unavailable */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_RPS_Closing         ((uint32_t)0x000A0000)  /* Running - closing descriptor */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMASR_RPS_Queuing         ((uint32_t)0x000E0000)  /* Running - queuing the recieve frame into host memory */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_NIS        ((uint32_t)0x00010000)  /* Normal interrupt summary */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_AIS        ((uint32_t)0x00008000)  /* Abnormal interrupt summary */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_ERS        ((uint32_t)0x00004000)  /* Early receive status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_FBES       ((uint32_t)0x00002000)  /* Fatal bus error status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_ETS        ((uint32_t)0x00000400)  /* Early transmit status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_RWTS       ((uint32_t)0x00000200)  /* Receive watchdog timeout status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_RPSS       ((uint32_t)0x00000100)  /* Receive process stopped status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_RBUS       ((uint32_t)0x00000080)  /* Receive buffer unavailable status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_RS         ((uint32_t)0x00000040)  /* Receive status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_TUS        ((uint32_t)0x00000020)  /* Transmit underflow status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_ROS        ((uint32_t)0x00000010)  /* Receive overflow status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_TJTS       ((uint32_t)0x00000008)  /* Transmit jabber timeout status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_TBUS       ((uint32_t)0x00000004)  /* Transmit buffer unavailable status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_TPSS       ((uint32_t)0x00000002)  /* Transmit process stopped status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMASR_TS         ((uint32_t)0x00000001)  /* Transmit status */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_DTCEFD    ((uint32_t)0x04000000)  /* Disable Dropping of TCP/IP checksum error frames */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_RSF       ((uint32_t)0x02000000)  /* Receive store and forward */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_DFRF      ((uint32_t)0x01000000)  /* Disable flushing of received frames */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_TSF       ((uint32_t)0x00200000)  /* Transmit store and forward */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_FTF       ((uint32_t)0x00100000)  /* Flush transmit FIFO */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_TTC       ((uint32_t)0x0001C000)  /* Transmit threshold control */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_TTC_64Bytes       ((uint32_t)0x00000000)  /* threshold level of the MTL Transmit FIFO is 64 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_TTC_128Bytes      ((uint32_t)0x00004000)  /* threshold level of the MTL Transmit FIFO is 128 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_TTC_192Bytes      ((uint32_t)0x00008000)  /* threshold level of the MTL Transmit FIFO is 192 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_TTC_256Bytes      ((uint32_t)0x0000C000)  /* threshold level of the MTL Transmit FIFO is 256 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_TTC_40Bytes       ((uint32_t)0x00010000)  /* threshold level of the MTL Transmit FIFO is 40 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_TTC_32Bytes       ((uint32_t)0x00014000)  /* threshold level of the MTL Transmit FIFO is 32 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_TTC_24Bytes       ((uint32_t)0x00018000)  /* threshold level of the MTL Transmit FIFO is 24 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_TTC_16Bytes       ((uint32_t)0x0001C000)  /* threshold level of the MTL Transmit FIFO is 16 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_ST        ((uint32_t)0x00002000)  /* Start/stop transmission command */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_FEF       ((uint32_t)0x00000080)  /* Forward error frames */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_FUGF      ((uint32_t)0x00000040)  /* Forward undersized good frames */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_RTC       ((uint32_t)0x00000018)  /* receive threshold control */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_RTC_64Bytes       ((uint32_t)0x00000000)  /* threshold level of the MTL Receive FIFO is 64 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_RTC_32Bytes       ((uint32_t)0x00000008)  /* threshold level of the MTL Receive FIFO is 32 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_RTC_96Bytes       ((uint32_t)0x00000010)  /* threshold level of the MTL Receive FIFO is 96 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):  #define ETH_DMAOMR_RTC_128Bytes      ((uint32_t)0x00000018)  /* threshold level of the MTL Receive FIFO is 128 Bytes */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_OSF       ((uint32_t)0x00000004)  /* operate on second frame */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAOMR_SR        ((uint32_t)0x00000002)  /* Start/stop receive */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_NISE      ((uint32_t)0x00010000)  /* Normal interrupt summary enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_AISE      ((uint32_t)0x00008000)  /* Abnormal interrupt summary enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_ERIE      ((uint32_t)0x00004000)  /* Early receive interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_FBEIE     ((uint32_t)0x00002000)  /* Fatal bus error interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_ETIE      ((uint32_t)0x00000400)  /* Early transmit interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_RWTIE     ((uint32_t)0x00000200)  /* Receive watchdog timeout interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_RPSIE     ((uint32_t)0x00000100)  /* Receive process stopped interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_RBUIE     ((uint32_t)0x00000080)  /* Receive buffer unavailable interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_RIE       ((uint32_t)0x00000040)  /* Receive interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_TUIE      ((uint32_t)0x00000020)  /* Transmit Underflow interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_ROIE      ((uint32_t)0x00000010)  /* Receive Overflow interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_TJTIE     ((uint32_t)0x00000008)  /* Transmit jabber timeout interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_TBUIE     ((uint32_t)0x00000004)  /* Transmit buffer unavailable interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_TPSIE     ((uint32_t)0x00000002)  /* Transmit process stopped interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAIER_TIE       ((uint32_t)0x00000001)  /* Transmit interrupt enable */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAMFBOCR_OFOC   ((uint32_t)0x10000000)  /* Overflow bit for FIFO overflow counter */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAMFBOCR_MFA    ((uint32_t)0x0FFE0000)  /* Number of frames missed by the application */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAMFBOCR_OMFC   ((uint32_t)0x00010000)  /* Overflow bit for missed frame counter */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMAMFBOCR_MFC    ((uint32_t)0x0000FFFF)  /* Number of frames missed by the controller */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMACHTDR_HTDAP   ((uint32_t)0xFFFFFFFF)  /* Host transmit descriptor address pointer */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMACHRDR_HRDAP   ((uint32_t)0xFFFFFFFF)  /* Host receive descriptor address pointer */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMACHTBAR_HTBAP  ((uint32_t)0xFFFFFFFF)  /* Host transmit buffer address pointer */
Stm32f10x.h (d:\soft\soft_src\car\lib):#define ETH_DMACHRBAR_HRBAP  ((uint32_t)0xFFFFFFFF)  /* Host receive buffer address pointer */
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_DISCNUM_Reset           ((uint32_t)0xFFFF1FFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_DISCEN_Set              ((uint32_t)0x00000800)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_DISCEN_Reset            ((uint32_t)0xFFFFF7FF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_JAUTO_Set               ((uint32_t)0x00000400)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_JAUTO_Reset             ((uint32_t)0xFFFFFBFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_JDISCEN_Set             ((uint32_t)0x00001000)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_JDISCEN_Reset           ((uint32_t)0xFFFFEFFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_AWDCH_Reset             ((uint32_t)0xFFFFFFE0)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_AWDMode_Reset           ((uint32_t)0xFF3FFDFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR1_CLEAR_Mask              ((uint32_t)0xFFF0FEFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_ADON_Set                ((uint32_t)0x00000001)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_ADON_Reset              ((uint32_t)0xFFFFFFFE)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_DMA_Set                 ((uint32_t)0x00000100)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_DMA_Reset               ((uint32_t)0xFFFFFEFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_RSTCAL_Set              ((uint32_t)0x00000008)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_CAL_Set                 ((uint32_t)0x00000004)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_SWSTART_Set             ((uint32_t)0x00400000)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_EXTTRIG_Set             ((uint32_t)0x00100000)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_EXTTRIG_Reset           ((uint32_t)0xFFEFFFFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_EXTTRIG_SWSTART_Set     ((uint32_t)0x00500000)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_EXTTRIG_SWSTART_Reset   ((uint32_t)0xFFAFFFFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_JEXTSEL_Reset           ((uint32_t)0xFFFF8FFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_JEXTTRIG_Set            ((uint32_t)0x00008000)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_JEXTTRIG_Reset          ((uint32_t)0xFFFF7FFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_JSWSTART_Set            ((uint32_t)0x00200000)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_JEXTTRIG_JSWSTART_Set   ((uint32_t)0x00208000)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_JEXTTRIG_JSWSTART_Reset ((uint32_t)0xFFDF7FFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_TSVREFE_Set             ((uint32_t)0x00800000)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_TSVREFE_Reset           ((uint32_t)0xFF7FFFFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define CR2_CLEAR_Mask              ((uint32_t)0xFFF1F7FD)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define SQR3_SQ_Set                 ((uint32_t)0x0000001F)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define SQR2_SQ_Set                 ((uint32_t)0x0000001F)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define SQR1_SQ_Set                 ((uint32_t)0x0000001F)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define SQR1_CLEAR_Mask             ((uint32_t)0xFF0FFFFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define JSQR_JSQ_Set                ((uint32_t)0x0000001F)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define JSQR_JL_Set                 ((uint32_t)0x00300000)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define JSQR_JL_Reset               ((uint32_t)0xFFCFFFFF)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define SMPR1_SMP_Set               ((uint32_t)0x00000007)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define SMPR2_SMP_Set               ((uint32_t)0x00000007)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):#define DR_ADDRESS                  ((uint32_t)0x4001244C)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg1 = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  tmpreg1 |= (uint32_t)tmpreg2 << 20;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):    ADCx->CR1 &= (~(uint32_t)itmask);
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg1 = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg2 = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg1 = 0, tmpreg2 = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):uint32_t ADC_GetDualModeConversionValue(void)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  return (*(__IO uint32_t *) DR_ADDRESS);
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg1 = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg2 = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t)ADCx;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) tmp = (uint32_t)Offset;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t)ADCx;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  return (uint16_t) (*(__IO uint32_t*)  tmp);   
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  ADCx->SR = ~(uint32_t)ADC_FLAG;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  uint32_t itmask = 0, enablestatus = 0;
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
Stm32f10x_adc.c (d:\soft\soft_src\car\lib):  ADCx->SR = ~(uint32_t)itmask;
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):  uint32_t ADC_Mode;                      /*!< Configures the ADC to operate in independent or
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):  uint32_t ADC_ExternalTrigConv;          /*!< Defines the external trigger used to start the analog
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):  uint32_t ADC_DataAlign;                 /*!< Specifies whether the ADC data alignment is left or right.
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_Independent                       ((uint32_t)0x00000000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_RegInjecSimult                    ((uint32_t)0x00010000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_RegSimult_AlterTrig               ((uint32_t)0x00020000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_InjecSimult_FastInterl            ((uint32_t)0x00030000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_InjecSimult_SlowInterl            ((uint32_t)0x00040000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_InjecSimult                       ((uint32_t)0x00050000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_RegSimult                         ((uint32_t)0x00060000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_FastInterl                        ((uint32_t)0x00070000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_SlowInterl                        ((uint32_t)0x00080000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_Mode_AlterTrig                         ((uint32_t)0x00090000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T1_CC1                ((uint32_t)0x00000000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T1_CC2                ((uint32_t)0x00020000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T2_CC2                ((uint32_t)0x00060000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T3_TRGO               ((uint32_t)0x00080000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T4_CC4                ((uint32_t)0x000A0000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_Ext_IT11_TIM8_TRGO    ((uint32_t)0x000C0000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T1_CC3                ((uint32_t)0x00040000) /*!< For ADC1, ADC2 and ADC3 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_None                  ((uint32_t)0x000E0000) /*!< For ADC1, ADC2 and ADC3 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T3_CC1                ((uint32_t)0x00000000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T2_CC3                ((uint32_t)0x00020000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T8_CC1                ((uint32_t)0x00060000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T8_TRGO               ((uint32_t)0x00080000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T5_CC1                ((uint32_t)0x000A0000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigConv_T5_CC3                ((uint32_t)0x000C0000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_DataAlign_Right                        ((uint32_t)0x00000000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_DataAlign_Left                         ((uint32_t)0x00000800)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T2_TRGO           ((uint32_t)0x00002000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T2_CC1            ((uint32_t)0x00003000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T3_CC4            ((uint32_t)0x00004000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T4_TRGO           ((uint32_t)0x00005000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4 ((uint32_t)0x00006000) /*!< For ADC1 and ADC2 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T1_TRGO           ((uint32_t)0x00000000) /*!< For ADC1, ADC2 and ADC3 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T1_CC4            ((uint32_t)0x00001000) /*!< For ADC1, ADC2 and ADC3 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_None              ((uint32_t)0x00007000) /*!< For ADC1, ADC2 and ADC3 */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T4_CC3            ((uint32_t)0x00002000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T8_CC2            ((uint32_t)0x00003000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T8_CC4            ((uint32_t)0x00004000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T5_TRGO           ((uint32_t)0x00005000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_ExternalTrigInjecConv_T5_CC4            ((uint32_t)0x00006000) /*!< For ADC3 only */
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_AnalogWatchdog_SingleRegEnable         ((uint32_t)0x00800200)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_AnalogWatchdog_SingleInjecEnable       ((uint32_t)0x00400200)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_AnalogWatchdog_SingleRegOrInjecEnable  ((uint32_t)0x00C00200)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_AnalogWatchdog_AllRegEnable            ((uint32_t)0x00800000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_AnalogWatchdog_AllInjecEnable          ((uint32_t)0x00400000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_AnalogWatchdog_AllRegAllInjecEnable    ((uint32_t)0x00C00000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):#define ADC_AnalogWatchdog_None                    ((uint32_t)0x00000000)
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):uint32_t ADC_GetDualModeConversionValue(void);
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv);
Stm32f10x_adc.h (d:\soft\soft_src\car\lib):void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog);
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t)BKP_BASE; 
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) tmp = Data;
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t)BKP_BASE; 
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
Stm32f10x_bkp.c (d:\soft\soft_src\car\lib):  return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define MCR_DBF      ((uint32_t)0x00010000) /* software master reset */
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define TMIDxR_TXRQ  ((uint32_t)0x00000001) /* Transmit mailbox request */
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define FMR_FINIT    ((uint32_t)0x00000001) /* Filter init mode */
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define INAK_TIMEOUT        ((uint32_t)0x0000FFFF)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define SLAK_TIMEOUT        ((uint32_t)0x0000FFFF)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define CAN_FLAGS_TSR              ((uint32_t)0x08000000) 
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define CAN_FLAGS_RF1R             ((uint32_t)0x04000000) 
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define CAN_FLAGS_RF0R             ((uint32_t)0x02000000) 
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define CAN_FLAGS_MSR              ((uint32_t)0x01000000) 
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define CAN_FLAGS_ESR              ((uint32_t)0x00F00000) 
Stm32f10x_can.c (d:\soft\soft_src\car\lib):#define CAN_MODE_MASK              ((uint32_t) 0x00000003)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  uint32_t wait_ack = 0x00000000;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
Stm32f10x_can.c (d:\soft\soft_src\car\lib):                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
Stm32f10x_can.c (d:\soft\soft_src\car\lib):                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
Stm32f10x_can.c (d:\soft\soft_src\car\lib):                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
Stm32f10x_can.c (d:\soft\soft_src\car\lib):               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  uint32_t filter_number_bit_pos = 0;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
Stm32f10x_can.c (d:\soft\soft_src\car\lib):        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
Stm32f10x_can.c (d:\soft\soft_src\car\lib):        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
Stm32f10x_can.c (d:\soft\soft_src\car\lib):        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
Stm32f10x_can.c (d:\soft\soft_src\car\lib):        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
Stm32f10x_can.c (d:\soft\soft_src\car\lib):                                             ((uint32_t)TxMessage->Data[2] << 16) |
Stm32f10x_can.c (d:\soft\soft_src\car\lib):                                             ((uint32_t)TxMessage->Data[1] << 8) | 
Stm32f10x_can.c (d:\soft\soft_src\car\lib):                                             ((uint32_t)TxMessage->Data[0]));
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
Stm32f10x_can.c (d:\soft\soft_src\car\lib):                                             ((uint32_t)TxMessage->Data[6] << 16) |
Stm32f10x_can.c (d:\soft\soft_src\car\lib):                                             ((uint32_t)TxMessage->Data[5] << 8) |
Stm32f10x_can.c (d:\soft\soft_src\car\lib):                                             ((uint32_t)TxMessage->Data[4]));
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  uint32_t state = 0;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  uint32_t timeout = INAK_TIMEOUT; 
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  uint32_t wait_slak = SLAK_TIMEOUT;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  uint32_t flagtmp=0;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    CANx->ESR = (uint32_t)RESET;
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->RF0R = (uint32_t)(flagtmp);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->RF1R = (uint32_t)(flagtmp);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->TSR = (uint32_t)(flagtmp);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
Stm32f10x_can.c (d:\soft\soft_src\car\lib):      CANx->MSR = (uint32_t)(flagtmp);
Stm32f10x_can.c (d:\soft\soft_src\car\lib):ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
Stm32f10x_can.c (d:\soft\soft_src\car\lib):  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
Stm32f10x_can.h (d:\soft\soft_src\car\lib):  uint32_t StdId;  /*!< Specifies the standard identifier.
Stm32f10x_can.h (d:\soft\soft_src\car\lib):  uint32_t ExtId;  /*!< Specifies the extended identifier.
Stm32f10x_can.h (d:\soft\soft_src\car\lib):  uint32_t StdId;  /*!< Specifies the standard identifier.
Stm32f10x_can.h (d:\soft\soft_src\car\lib):  uint32_t ExtId;  /*!< Specifies the extended identifier.
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define IS_CAN_STDID(STDID)   ((STDID) <= ((uint32_t)0x7FF))
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define IS_CAN_EXTID(EXTID)   ((EXTID) <= ((uint32_t)0x1FFFFFFF))
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_Id_Standard             ((uint32_t)0x00000000)  /*!< Standard Id */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_Id_Extended             ((uint32_t)0x00000004)  /*!< Extended Id */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_RTR_Data                ((uint32_t)0x00000000)  /*!< Data frame */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_RTR_Remote              ((uint32_t)0x00000002)  /*!< Remote frame */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_RQCP0             ((uint32_t)0x38000001) /*!< Request MailBox0 Flag */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_RQCP1             ((uint32_t)0x38000100) /*!< Request MailBox1 Flag */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_RQCP2             ((uint32_t)0x38010000) /*!< Request MailBox2 Flag */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_FMP0              ((uint32_t)0x12000003) /*!< FIFO 0 Message Pending Flag */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_FF0               ((uint32_t)0x32000008) /*!< FIFO 0 Full Flag            */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_FOV0              ((uint32_t)0x32000010) /*!< FIFO 0 Overrun Flag         */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_FMP1              ((uint32_t)0x14000003) /*!< FIFO 1 Message Pending Flag */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_FF1               ((uint32_t)0x34000008) /*!< FIFO 1 Full Flag            */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_FOV1              ((uint32_t)0x34000010) /*!< FIFO 1 Overrun Flag         */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_WKU               ((uint32_t)0x31000008) /*!< Wake up Flag */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_SLAK              ((uint32_t)0x31000012) /*!< Sleep acknowledge Flag */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_EWG               ((uint32_t)0x10F00001) /*!< Error Warning Flag   */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_EPV               ((uint32_t)0x10F00002) /*!< Error Passive Flag   */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_BOF               ((uint32_t)0x10F00004) /*!< Bus-Off Flag         */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_FLAG_LEC               ((uint32_t)0x30F00070) /*!< Last error code Flag */
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_TME                  ((uint32_t)0x00000001) /*!< Transmit mailbox empty Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_FMP0                 ((uint32_t)0x00000002) /*!< FIFO 0 message pending Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_FF0                  ((uint32_t)0x00000004) /*!< FIFO 0 full Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_FOV0                 ((uint32_t)0x00000008) /*!< FIFO 0 overrun Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_FMP1                 ((uint32_t)0x00000010) /*!< FIFO 1 message pending Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_FF1                  ((uint32_t)0x00000020) /*!< FIFO 1 full Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_FOV1                 ((uint32_t)0x00000040) /*!< FIFO 1 overrun Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_WKU                  ((uint32_t)0x00010000) /*!< Wake-up Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_SLK                  ((uint32_t)0x00020000) /*!< Sleep acknowledge Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_EWG                  ((uint32_t)0x00000100) /*!< Error warning Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_EPV                  ((uint32_t)0x00000200) /*!< Error passive Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_BOF                  ((uint32_t)0x00000400) /*!< Bus-off Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_LEC                  ((uint32_t)0x00000800) /*!< Last error code Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):#define CAN_IT_ERR                  ((uint32_t)0x00008000) /*!< Error Interrupt*/
Stm32f10x_can.h (d:\soft\soft_src\car\lib):void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState);
Stm32f10x_can.h (d:\soft\soft_src\car\lib):FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG);
Stm32f10x_can.h (d:\soft\soft_src\car\lib):void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG);
Stm32f10x_can.h (d:\soft\soft_src\car\lib):ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT);
Stm32f10x_can.h (d:\soft\soft_src\car\lib):void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT);
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):#define FLAG_Mask                  ((uint32_t)0x00FFFFFF) /* CEC FLAG mask */
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CFGR_PE_BB = (uint32_t)NewState;
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):    while((CEC->CFGR & CEC_CFGR_PE) != (uint32_t)RESET)
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CFGR_IE_BB = (uint32_t)NewState;
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CSR_TSOM_BB = (uint32_t)0x1;
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CSR_TEOM_BB = (uint32_t)NewState;
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):FlagStatus CEC_GetFlagStatus(uint32_t CEC_FLAG) 
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  uint32_t cecreg = 0, cecbase = 0;
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  cecbase = (uint32_t)(CEC_BASE);
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):    CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  if(((*(__IO uint32_t *)cecbase) & CEC_FLAG) != (uint32_t)RESET)
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):void CEC_ClearFlag(uint32_t CEC_FLAG)
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0x0;
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  uint32_t enablestatus = 0;
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  if (((CEC->CSR & CEC_IT) != (uint32_t)RESET) && enablestatus)
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0x0;
Stm32f10x_cec.c (d:\soft\soft_src\car\lib):  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_BTE                            ((uint32_t)0x10010000)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_BPE                            ((uint32_t)0x10020000)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_RBTFE                          ((uint32_t)0x10040000)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_SBE                            ((uint32_t)0x10080000)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_ACKE                           ((uint32_t)0x10100000)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_LINE                           ((uint32_t)0x10200000)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_TBTFE                          ((uint32_t)0x10400000)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_TEOM                           ((uint32_t)0x00000002)  
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_TERR                           ((uint32_t)0x00000004)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_TBTRF                          ((uint32_t)0x00000008)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_RSOM                           ((uint32_t)0x00000010)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_REOM                           ((uint32_t)0x00000020)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_RERR                           ((uint32_t)0x00000040)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define CEC_FLAG_RBTF                           ((uint32_t)0x00000080)
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):#define IS_CEC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFFFFFF03) == 0x00) && ((FLAG) != 0x00))
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):FlagStatus CEC_GetFlagStatus(uint32_t CEC_FLAG);
Stm32f10x_cec.h (d:\soft\soft_src\car\lib):void CEC_ClearFlag(uint32_t CEC_FLAG);
Stm32f10x_conf.h (d:\soft\soft_src\car\inc):  void assert_failed(uint8_t* file, uint32_t line);
Stm32f10x_crc.c (d:\soft\soft_src\car\lib):uint32_t CRC_CalcCRC(uint32_t Data)
Stm32f10x_crc.c (d:\soft\soft_src\car\lib):uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
Stm32f10x_crc.c (d:\soft\soft_src\car\lib):  uint32_t index = 0;
Stm32f10x_crc.c (d:\soft\soft_src\car\lib):uint32_t CRC_GetCRC(void)
Stm32f10x_crc.h (d:\soft\soft_src\car\lib):uint32_t CRC_CalcCRC(uint32_t Data);
Stm32f10x_crc.h (d:\soft\soft_src\car\lib):uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength);
Stm32f10x_crc.h (d:\soft\soft_src\car\lib):uint32_t CRC_GetCRC(void);
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):#define CR_CLEAR_MASK              ((uint32_t)0x00000FFE)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):#define DUAL_SWTRIG_SET            ((uint32_t)0x00000003)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):#define DUAL_SWTRIG_RESET          ((uint32_t)0xFFFFFFFC)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):#define DHR12R1_OFFSET             ((uint32_t)0x00000008)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):#define DHR12R2_OFFSET             ((uint32_t)0x00000014)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):#define DHR12RD_OFFSET             ((uint32_t)0x00000020)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):#define DOR_OFFSET                 ((uint32_t)0x0000002C)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg1 = 0, tmpreg2 = 0;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t)DAC_BASE; 
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) tmp = Data;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t)DAC_BASE;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *)tmp = Data;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  uint32_t data = 0, tmp = 0;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):    data = ((uint32_t)Data2 << 8) | Data1; 
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):    data = ((uint32_t)Data2 << 16) | Data1;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t)DAC_BASE;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *)tmp = data;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t) DAC_BASE ;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  return (uint16_t) (*(__IO uint32_t*) tmp);
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  uint32_t enablestatus = 0;
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
Stm32f10x_dac.c (d:\soft\soft_src\car\lib):void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):  uint32_t DAC_Trigger;                      /*!< Specifies the external trigger for the selected DAC channel.
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):  uint32_t DAC_WaveGeneration;               /*!< Specifies whether DAC channel noise waves or triangle waves
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):  uint32_t DAC_LFSRUnmask_TriangleAmplitude; /*!< Specifies the LFSR mask for noise wave generation or
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):  uint32_t DAC_OutputBuffer;                 /*!< Specifies whether the DAC channel output buffer is enabled or disabled.
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_None                   ((uint32_t)0x00000000) /*!< Conversion is automatic once the DAC1_DHRxxxx register 
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_T6_TRGO                ((uint32_t)0x00000004) /*!< TIM6 TRGO selected as external conversion trigger for DAC channel */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_T8_TRGO                ((uint32_t)0x0000000C) /*!< TIM8 TRGO selected as external conversion trigger for DAC channel
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_T3_TRGO                ((uint32_t)0x0000000C) /*!< TIM8 TRGO selected as external conversion trigger for DAC channel
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_T7_TRGO                ((uint32_t)0x00000014) /*!< TIM7 TRGO selected as external conversion trigger for DAC channel */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_T5_TRGO                ((uint32_t)0x0000001C) /*!< TIM5 TRGO selected as external conversion trigger for DAC channel */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_T15_TRGO               ((uint32_t)0x0000001C) /*!< TIM15 TRGO selected as external conversion trigger for DAC channel 
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_T2_TRGO                ((uint32_t)0x00000024) /*!< TIM2 TRGO selected as external conversion trigger for DAC channel */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_T4_TRGO                ((uint32_t)0x0000002C) /*!< TIM4 TRGO selected as external conversion trigger for DAC channel */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_Ext_IT9                ((uint32_t)0x00000034) /*!< EXTI Line9 event selected as external conversion trigger for DAC channel */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Trigger_Software               ((uint32_t)0x0000003C) /*!< Conversion started by software trigger for DAC channel */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_WaveGeneration_None            ((uint32_t)0x00000000)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_WaveGeneration_Noise           ((uint32_t)0x00000040)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_WaveGeneration_Triangle        ((uint32_t)0x00000080)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bit0                ((uint32_t)0x00000000) /*!< Unmask DAC channel LFSR bit0 for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits1_0             ((uint32_t)0x00000100) /*!< Unmask DAC channel LFSR bit[1:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits2_0             ((uint32_t)0x00000200) /*!< Unmask DAC channel LFSR bit[2:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits3_0             ((uint32_t)0x00000300) /*!< Unmask DAC channel LFSR bit[3:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits4_0             ((uint32_t)0x00000400) /*!< Unmask DAC channel LFSR bit[4:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits5_0             ((uint32_t)0x00000500) /*!< Unmask DAC channel LFSR bit[5:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits6_0             ((uint32_t)0x00000600) /*!< Unmask DAC channel LFSR bit[6:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits7_0             ((uint32_t)0x00000700) /*!< Unmask DAC channel LFSR bit[7:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits8_0             ((uint32_t)0x00000800) /*!< Unmask DAC channel LFSR bit[8:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits9_0             ((uint32_t)0x00000900) /*!< Unmask DAC channel LFSR bit[9:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits10_0            ((uint32_t)0x00000A00) /*!< Unmask DAC channel LFSR bit[10:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_LFSRUnmask_Bits11_0            ((uint32_t)0x00000B00) /*!< Unmask DAC channel LFSR bit[11:0] for noise wave generation */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_1            ((uint32_t)0x00000000) /*!< Select max triangle amplitude of 1 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_3            ((uint32_t)0x00000100) /*!< Select max triangle amplitude of 3 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_7            ((uint32_t)0x00000200) /*!< Select max triangle amplitude of 7 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_15           ((uint32_t)0x00000300) /*!< Select max triangle amplitude of 15 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_31           ((uint32_t)0x00000400) /*!< Select max triangle amplitude of 31 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_63           ((uint32_t)0x00000500) /*!< Select max triangle amplitude of 63 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_127          ((uint32_t)0x00000600) /*!< Select max triangle amplitude of 127 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_255          ((uint32_t)0x00000700) /*!< Select max triangle amplitude of 255 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_511          ((uint32_t)0x00000800) /*!< Select max triangle amplitude of 511 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_1023         ((uint32_t)0x00000900) /*!< Select max triangle amplitude of 1023 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_2047         ((uint32_t)0x00000A00) /*!< Select max triangle amplitude of 2047 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_TriangleAmplitude_4095         ((uint32_t)0x00000B00) /*!< Select max triangle amplitude of 4095 */
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_OutputBuffer_Enable            ((uint32_t)0x00000000)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_OutputBuffer_Disable           ((uint32_t)0x00000002)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Channel_1                      ((uint32_t)0x00000000)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Channel_2                      ((uint32_t)0x00000010)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Align_12b_R                    ((uint32_t)0x00000000)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Align_12b_L                    ((uint32_t)0x00000004)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Align_8b_R                     ((uint32_t)0x00000008)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Wave_Noise                     ((uint32_t)0x00000040)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_Wave_Triangle                  ((uint32_t)0x00000080)
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_IT_DMAUDR                      ((uint32_t)0x00002000)  
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):#define DAC_FLAG_DMAUDR                    ((uint32_t)0x00002000)  
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT);
Stm32f10x_dac.h (d:\soft\soft_src\car\lib):void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT);
Stm32f10x_dbgmcu.c (d:\soft\soft_src\car\lib):#define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFF)
Stm32f10x_dbgmcu.c (d:\soft\soft_src\car\lib):uint32_t DBGMCU_GetREVID(void)
Stm32f10x_dbgmcu.c (d:\soft\soft_src\car\lib):uint32_t DBGMCU_GetDEVID(void)
Stm32f10x_dbgmcu.c (d:\soft\soft_src\car\lib):void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_SLEEP                 ((uint32_t)0x00000001)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_STOP                  ((uint32_t)0x00000002)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_STANDBY               ((uint32_t)0x00000004)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_IWDG_STOP             ((uint32_t)0x00000100)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_WWDG_STOP             ((uint32_t)0x00000200)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM1_STOP             ((uint32_t)0x00000400)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM2_STOP             ((uint32_t)0x00000800)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM3_STOP             ((uint32_t)0x00001000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM4_STOP             ((uint32_t)0x00002000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_CAN1_STOP             ((uint32_t)0x00004000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_I2C1_SMBUS_TIMEOUT    ((uint32_t)0x00008000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_I2C2_SMBUS_TIMEOUT    ((uint32_t)0x00010000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM8_STOP             ((uint32_t)0x00020000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM5_STOP             ((uint32_t)0x00040000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM6_STOP             ((uint32_t)0x00080000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM7_STOP             ((uint32_t)0x00100000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_CAN2_STOP             ((uint32_t)0x00200000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM15_STOP            ((uint32_t)0x00400000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM16_STOP            ((uint32_t)0x00800000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM17_STOP            ((uint32_t)0x01000000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM12_STOP            ((uint32_t)0x02000000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM13_STOP            ((uint32_t)0x04000000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM14_STOP            ((uint32_t)0x08000000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM9_STOP             ((uint32_t)0x10000000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM10_STOP            ((uint32_t)0x20000000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):#define DBGMCU_TIM11_STOP            ((uint32_t)0x40000000)
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):uint32_t DBGMCU_GetREVID(void);
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):uint32_t DBGMCU_GetDEVID(void);
Stm32f10x_dbgmcu.h (d:\soft\soft_src\car\lib):void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState);
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA1_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR_TEIF1))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA1_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR_TEIF2))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA1_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR_TEIF3))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA1_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR_TEIF4))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA1_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR_TEIF5))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA1_Channel6_IT_Mask    ((uint32_t)(DMA_ISR_GIF6 | DMA_ISR_TCIF6 | DMA_ISR_HTIF6 | DMA_ISR_TEIF6))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA1_Channel7_IT_Mask    ((uint32_t)(DMA_ISR_GIF7 | DMA_ISR_TCIF7 | DMA_ISR_HTIF7 | DMA_ISR_TEIF7))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA2_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR_TEIF1))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA2_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR_TEIF2))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA2_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR_TEIF3))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA2_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR_TEIF4))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define DMA2_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR_TEIF5))
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define FLAG_Mask                ((uint32_t)0x10000000)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):#define CCR_CLEAR_Mask           ((uint32_t)0xFFFF800F)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):void DMA_ClearFlag(uint32_t DMAy_FLAG)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):void DMA_ClearITPendingBit(uint32_t DMAy_IT)
Stm32f10x_dma.c (d:\soft\soft_src\car\lib):  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_PeripheralBaseAddr; /*!< Specifies the peripheral base address for DMAy Channelx. */
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_MemoryBaseAddr;     /*!< Specifies the memory base address for DMAy Channelx. */
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_DIR;                /*!< Specifies if the peripheral is the source or destination.
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_BufferSize;         /*!< Specifies the buffer size, in data unit, of the specified Channel. 
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_PeripheralInc;      /*!< Specifies whether the Peripheral address register is incremented or not.
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_MemoryInc;          /*!< Specifies whether the memory address register is incremented or not.
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_PeripheralDataSize; /*!< Specifies the Peripheral data width.
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_MemoryDataSize;     /*!< Specifies the Memory data width.
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_Mode;               /*!< Specifies the operation mode of the DMAy Channelx.
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_Priority;           /*!< Specifies the software priority for the DMAy Channelx.
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):  uint32_t DMA_M2M;                /*!< Specifies if the DMAy Channelx will be used in memory-to-memory transfer.
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_DIR_PeripheralDST              ((uint32_t)0x00000010)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_DIR_PeripheralSRC              ((uint32_t)0x00000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_PeripheralInc_Enable           ((uint32_t)0x00000040)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_PeripheralInc_Disable          ((uint32_t)0x00000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_MemoryInc_Enable               ((uint32_t)0x00000080)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_MemoryInc_Disable              ((uint32_t)0x00000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_PeripheralDataSize_Byte        ((uint32_t)0x00000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_PeripheralDataSize_HalfWord    ((uint32_t)0x00000100)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_PeripheralDataSize_Word        ((uint32_t)0x00000200)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_MemoryDataSize_Byte            ((uint32_t)0x00000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_MemoryDataSize_HalfWord        ((uint32_t)0x00000400)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_MemoryDataSize_Word            ((uint32_t)0x00000800)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_Mode_Circular                  ((uint32_t)0x00000020)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_Mode_Normal                    ((uint32_t)0x00000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_Priority_VeryHigh              ((uint32_t)0x00003000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_Priority_High                  ((uint32_t)0x00002000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_Priority_Medium                ((uint32_t)0x00001000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_Priority_Low                   ((uint32_t)0x00000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_M2M_Enable                     ((uint32_t)0x00004000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_M2M_Disable                    ((uint32_t)0x00000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_IT_TC                          ((uint32_t)0x00000002)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_IT_HT                          ((uint32_t)0x00000004)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA_IT_TE                          ((uint32_t)0x00000008)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_GL1                        ((uint32_t)0x00000001)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TC1                        ((uint32_t)0x00000002)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_HT1                        ((uint32_t)0x00000004)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TE1                        ((uint32_t)0x00000008)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_GL2                        ((uint32_t)0x00000010)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TC2                        ((uint32_t)0x00000020)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_HT2                        ((uint32_t)0x00000040)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TE2                        ((uint32_t)0x00000080)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_GL3                        ((uint32_t)0x00000100)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TC3                        ((uint32_t)0x00000200)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_HT3                        ((uint32_t)0x00000400)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TE3                        ((uint32_t)0x00000800)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_GL4                        ((uint32_t)0x00001000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TC4                        ((uint32_t)0x00002000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_HT4                        ((uint32_t)0x00004000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TE4                        ((uint32_t)0x00008000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_GL5                        ((uint32_t)0x00010000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TC5                        ((uint32_t)0x00020000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_HT5                        ((uint32_t)0x00040000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TE5                        ((uint32_t)0x00080000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_GL6                        ((uint32_t)0x00100000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TC6                        ((uint32_t)0x00200000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_HT6                        ((uint32_t)0x00400000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TE6                        ((uint32_t)0x00800000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_GL7                        ((uint32_t)0x01000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TC7                        ((uint32_t)0x02000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_HT7                        ((uint32_t)0x04000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_IT_TE7                        ((uint32_t)0x08000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_GL1                        ((uint32_t)0x10000001)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TC1                        ((uint32_t)0x10000002)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_HT1                        ((uint32_t)0x10000004)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TE1                        ((uint32_t)0x10000008)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_GL2                        ((uint32_t)0x10000010)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TC2                        ((uint32_t)0x10000020)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_HT2                        ((uint32_t)0x10000040)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TE2                        ((uint32_t)0x10000080)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_GL3                        ((uint32_t)0x10000100)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TC3                        ((uint32_t)0x10000200)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_HT3                        ((uint32_t)0x10000400)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TE3                        ((uint32_t)0x10000800)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_GL4                        ((uint32_t)0x10001000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TC4                        ((uint32_t)0x10002000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_HT4                        ((uint32_t)0x10004000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TE4                        ((uint32_t)0x10008000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_GL5                        ((uint32_t)0x10010000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TC5                        ((uint32_t)0x10020000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_HT5                        ((uint32_t)0x10040000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_IT_TE5                        ((uint32_t)0x10080000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_GL1                      ((uint32_t)0x00000001)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TC1                      ((uint32_t)0x00000002)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_HT1                      ((uint32_t)0x00000004)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TE1                      ((uint32_t)0x00000008)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_GL2                      ((uint32_t)0x00000010)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TC2                      ((uint32_t)0x00000020)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_HT2                      ((uint32_t)0x00000040)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TE2                      ((uint32_t)0x00000080)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_GL3                      ((uint32_t)0x00000100)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TC3                      ((uint32_t)0x00000200)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_HT3                      ((uint32_t)0x00000400)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TE3                      ((uint32_t)0x00000800)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_GL4                      ((uint32_t)0x00001000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TC4                      ((uint32_t)0x00002000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_HT4                      ((uint32_t)0x00004000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TE4                      ((uint32_t)0x00008000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_GL5                      ((uint32_t)0x00010000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TC5                      ((uint32_t)0x00020000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_HT5                      ((uint32_t)0x00040000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TE5                      ((uint32_t)0x00080000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_GL6                      ((uint32_t)0x00100000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TC6                      ((uint32_t)0x00200000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_HT6                      ((uint32_t)0x00400000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TE6                      ((uint32_t)0x00800000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_GL7                      ((uint32_t)0x01000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TC7                      ((uint32_t)0x02000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_HT7                      ((uint32_t)0x04000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA1_FLAG_TE7                      ((uint32_t)0x08000000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_GL1                      ((uint32_t)0x10000001)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TC1                      ((uint32_t)0x10000002)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_HT1                      ((uint32_t)0x10000004)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TE1                      ((uint32_t)0x10000008)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_GL2                      ((uint32_t)0x10000010)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TC2                      ((uint32_t)0x10000020)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_HT2                      ((uint32_t)0x10000040)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TE2                      ((uint32_t)0x10000080)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_GL3                      ((uint32_t)0x10000100)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TC3                      ((uint32_t)0x10000200)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_HT3                      ((uint32_t)0x10000400)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TE3                      ((uint32_t)0x10000800)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_GL4                      ((uint32_t)0x10001000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TC4                      ((uint32_t)0x10002000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_HT4                      ((uint32_t)0x10004000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TE4                      ((uint32_t)0x10008000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_GL5                      ((uint32_t)0x10010000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TC5                      ((uint32_t)0x10020000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_HT5                      ((uint32_t)0x10040000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):#define DMA2_FLAG_TE5                      ((uint32_t)0x10080000)
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState);
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG);
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):void DMA_ClearFlag(uint32_t DMAy_FLAG);
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):ITStatus DMA_GetITStatus(uint32_t DMAy_IT);
Stm32f10x_dma.h (d:\soft\soft_src\car\lib):void DMA_ClearITPendingBit(uint32_t DMAy_IT);
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):#define EXTI_LINENONE    ((uint32_t)0x00000)  /* No interrupt selected */
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0;
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t)EXTI_BASE;
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):      tmp = (uint32_t)EXTI_BASE;
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):void EXTI_ClearFlag(uint32_t EXTI_Line)
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):  uint32_t enablestatus = 0;
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
Stm32f10x_exti.c (d:\soft\soft_src\car\lib):void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):  uint32_t EXTI_Line;               /*!< Specifies the EXTI lines to be enabled or disabled.
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line0       ((uint32_t)0x00001)  /*!< External interrupt line 0 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line1       ((uint32_t)0x00002)  /*!< External interrupt line 1 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line2       ((uint32_t)0x00004)  /*!< External interrupt line 2 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line3       ((uint32_t)0x00008)  /*!< External interrupt line 3 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line4       ((uint32_t)0x00010)  /*!< External interrupt line 4 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line5       ((uint32_t)0x00020)  /*!< External interrupt line 5 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line6       ((uint32_t)0x00040)  /*!< External interrupt line 6 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line7       ((uint32_t)0x00080)  /*!< External interrupt line 7 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line8       ((uint32_t)0x00100)  /*!< External interrupt line 8 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line9       ((uint32_t)0x00200)  /*!< External interrupt line 9 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line10      ((uint32_t)0x00400)  /*!< External interrupt line 10 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line11      ((uint32_t)0x00800)  /*!< External interrupt line 11 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line12      ((uint32_t)0x01000)  /*!< External interrupt line 12 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line13      ((uint32_t)0x02000)  /*!< External interrupt line 13 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line14      ((uint32_t)0x04000)  /*!< External interrupt line 14 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line15      ((uint32_t)0x08000)  /*!< External interrupt line 15 */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line16      ((uint32_t)0x10000)  /*!< External interrupt line 16 Connected to the PVD Output */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line17      ((uint32_t)0x20000)  /*!< External interrupt line 17 Connected to the RTC Alarm event */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line18      ((uint32_t)0x40000)  /*!< External interrupt line 18 Connected to the USB Device/USB OTG FS
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define EXTI_Line19      ((uint32_t)0x80000)  /*!< External interrupt line 19 Connected to the Ethernet Wakeup event */
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):#define IS_EXTI_LINE(LINE) ((((LINE) & (uint32_t)0xFFF00000) == 0x00) && ((LINE) != (uint16_t)0x00))
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):void EXTI_ClearFlag(uint32_t EXTI_Line);
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):ITStatus EXTI_GetITStatus(uint32_t EXTI_Line);
Stm32f10x_exti.h (d:\soft\soft_src\car\lib):void EXTI_ClearITPendingBit(uint32_t EXTI_Line);
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define ACR_LATENCY_Mask         ((uint32_t)0x00000038)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define ACR_HLFCYA_Mask          ((uint32_t)0xFFFFFFF7)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define ACR_PRFTBE_Mask          ((uint32_t)0xFFFFFFEF)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define ACR_PRFTBS_Mask          ((uint32_t)0x00000020) 
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_PG_Set                ((uint32_t)0x00000001)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_PG_Reset              ((uint32_t)0x00001FFE) 
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_PER_Set               ((uint32_t)0x00000002)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_PER_Reset             ((uint32_t)0x00001FFD)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_MER_Set               ((uint32_t)0x00000004)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_MER_Reset             ((uint32_t)0x00001FFB)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_OPTPG_Set             ((uint32_t)0x00000010)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_OPTPG_Reset           ((uint32_t)0x00001FEF)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_OPTER_Set             ((uint32_t)0x00000020)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_OPTER_Reset           ((uint32_t)0x00001FDF)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_STRT_Set              ((uint32_t)0x00000040)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define CR_LOCK_Set              ((uint32_t)0x00000080)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define RDPRT_Mask               ((uint32_t)0x00000002)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define WRP0_Mask                ((uint32_t)0x000000FF)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define WRP1_Mask                ((uint32_t)0x0000FF00)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define WRP2_Mask                ((uint32_t)0x00FF0000)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define WRP3_Mask                ((uint32_t)0xFF000000)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define FLASH_KEY1               ((uint32_t)0x45670123)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define FLASH_KEY2               ((uint32_t)0xCDEF89AB)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define FLASH_BANK1_END_ADDRESS   ((uint32_t)0x807FFFF)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define EraseTimeout          ((uint32_t)0x000B0000)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):#define ProgramTimeout        ((uint32_t)0x00002000)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):void FLASH_SetLatency(uint32_t FLASH_Latency)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):  FLASH_Pages = (uint32_t)(~FLASH_Pages);
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):uint32_t FLASH_GetUserOptionByte(void)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):  return (uint32_t)(FLASH->OBR >> 2);
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):uint32_t FLASH_GetWriteProtectionOptionByte(void)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):  return (uint32_t)(FLASH->WRPR);
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):  if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):      FLASH->CR2 &= ~(uint32_t)(FLASH_IT & 0x7FFFFFFF);
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):      FLASH->CR &= ~(uint32_t)FLASH_IT;
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):    FLASH->CR &= ~(uint32_t)FLASH_IT;
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):      if((FLASH->SR2 & FLASH_FLAG) != (uint32_t)RESET)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):      if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):void FLASH_ClearFlag(uint32_t FLASH_FLAG)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
Stm32f10x_flash.c (d:\soft\soft_src\car\lib):FLASH_Status FLASH_WaitForLastBank2Operation(uint32_t Timeout)
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_Latency_0                ((uint32_t)0x00000000)  /*!< FLASH Zero Latency cycle */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_Latency_1                ((uint32_t)0x00000001)  /*!< FLASH One Latency cycle */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_Latency_2                ((uint32_t)0x00000002)  /*!< FLASH Two Latency cycles */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_HalfCycleAccess_Enable   ((uint32_t)0x00000008)  /*!< FLASH Half Cycle Enable */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_HalfCycleAccess_Disable  ((uint32_t)0x00000000)  /*!< FLASH Half Cycle Disable */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_PrefetchBuffer_Enable    ((uint32_t)0x00000010)  /*!< FLASH Prefetch Buffer Enable */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_PrefetchBuffer_Disable   ((uint32_t)0x00000000)  /*!< FLASH Prefetch Buffer Disable */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages0to3         ((uint32_t)0x00000001) /*!< STM32 Low and Medium density devices: Write protection of page 0 to 3 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages4to7         ((uint32_t)0x00000002) /*!< STM32 Low and Medium density devices: Write protection of page 4 to 7 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages8to11        ((uint32_t)0x00000004) /*!< STM32 Low and Medium density devices: Write protection of page 8 to 11 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages12to15       ((uint32_t)0x00000008) /*!< STM32 Low and Medium density devices: Write protection of page 12 to 15 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages16to19       ((uint32_t)0x00000010) /*!< STM32 Low and Medium density devices: Write protection of page 16 to 19 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages20to23       ((uint32_t)0x00000020) /*!< STM32 Low and Medium density devices: Write protection of page 20 to 23 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages24to27       ((uint32_t)0x00000040) /*!< STM32 Low and Medium density devices: Write protection of page 24 to 27 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages28to31       ((uint32_t)0x00000080) /*!< STM32 Low and Medium density devices: Write protection of page 28 to 31 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages32to35       ((uint32_t)0x00000100) /*!< STM32 Medium-density devices: Write protection of page 32 to 35 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages36to39       ((uint32_t)0x00000200) /*!< STM32 Medium-density devices: Write protection of page 36 to 39 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages40to43       ((uint32_t)0x00000400) /*!< STM32 Medium-density devices: Write protection of page 40 to 43 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages44to47       ((uint32_t)0x00000800) /*!< STM32 Medium-density devices: Write protection of page 44 to 47 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages48to51       ((uint32_t)0x00001000) /*!< STM32 Medium-density devices: Write protection of page 48 to 51 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages52to55       ((uint32_t)0x00002000) /*!< STM32 Medium-density devices: Write protection of page 52 to 55 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages56to59       ((uint32_t)0x00004000) /*!< STM32 Medium-density devices: Write protection of page 56 to 59 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages60to63       ((uint32_t)0x00008000) /*!< STM32 Medium-density devices: Write protection of page 60 to 63 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages64to67       ((uint32_t)0x00010000) /*!< STM32 Medium-density devices: Write protection of page 64 to 67 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages68to71       ((uint32_t)0x00020000) /*!< STM32 Medium-density devices: Write protection of page 68 to 71 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages72to75       ((uint32_t)0x00040000) /*!< STM32 Medium-density devices: Write protection of page 72 to 75 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages76to79       ((uint32_t)0x00080000) /*!< STM32 Medium-density devices: Write protection of page 76 to 79 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages80to83       ((uint32_t)0x00100000) /*!< STM32 Medium-density devices: Write protection of page 80 to 83 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages84to87       ((uint32_t)0x00200000) /*!< STM32 Medium-density devices: Write protection of page 84 to 87 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages88to91       ((uint32_t)0x00400000) /*!< STM32 Medium-density devices: Write protection of page 88 to 91 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages92to95       ((uint32_t)0x00800000) /*!< STM32 Medium-density devices: Write protection of page 92 to 95 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages96to99       ((uint32_t)0x01000000) /*!< STM32 Medium-density devices: Write protection of page 96 to 99 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages100to103     ((uint32_t)0x02000000) /*!< STM32 Medium-density devices: Write protection of page 100 to 103 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages104to107     ((uint32_t)0x04000000) /*!< STM32 Medium-density devices: Write protection of page 104 to 107 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages108to111     ((uint32_t)0x08000000) /*!< STM32 Medium-density devices: Write protection of page 108 to 111 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages112to115     ((uint32_t)0x10000000) /*!< STM32 Medium-density devices: Write protection of page 112 to 115 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages116to119     ((uint32_t)0x20000000) /*!< STM32 Medium-density devices: Write protection of page 115 to 119 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages120to123     ((uint32_t)0x40000000) /*!< STM32 Medium-density devices: Write protection of page 120 to 123 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages124to127     ((uint32_t)0x80000000) /*!< STM32 Medium-density devices: Write protection of page 124 to 127 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages0to1         ((uint32_t)0x00000001) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages2to3         ((uint32_t)0x00000002) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages4to5         ((uint32_t)0x00000004) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages6to7         ((uint32_t)0x00000008) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages8to9         ((uint32_t)0x00000010) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages10to11       ((uint32_t)0x00000020) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages12to13       ((uint32_t)0x00000040) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages14to15       ((uint32_t)0x00000080) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages16to17       ((uint32_t)0x00000100) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages18to19       ((uint32_t)0x00000200) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages20to21       ((uint32_t)0x00000400) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages22to23       ((uint32_t)0x00000800) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages24to25       ((uint32_t)0x00001000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages26to27       ((uint32_t)0x00002000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages28to29       ((uint32_t)0x00004000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages30to31       ((uint32_t)0x00008000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages32to33       ((uint32_t)0x00010000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages34to35       ((uint32_t)0x00020000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages36to37       ((uint32_t)0x00040000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages38to39       ((uint32_t)0x00080000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages40to41       ((uint32_t)0x00100000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages42to43       ((uint32_t)0x00200000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages44to45       ((uint32_t)0x00400000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages46to47       ((uint32_t)0x00800000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages48to49       ((uint32_t)0x01000000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages50to51       ((uint32_t)0x02000000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages52to53       ((uint32_t)0x04000000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages54to55       ((uint32_t)0x08000000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages56to57       ((uint32_t)0x10000000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages58to59       ((uint32_t)0x20000000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages60to61       ((uint32_t)0x40000000) /*!< STM32 High-density, XL-density and Connectivity line devices:
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages62to127      ((uint32_t)0x80000000) /*!< STM32 Connectivity line devices: Write protection of page 62 to 127 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages62to255      ((uint32_t)0x80000000) /*!< STM32 Medium-density devices: Write protection of page 62 to 255 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_Pages62to511      ((uint32_t)0x80000000) /*!< STM32 XL-density devices: Write protection of page 62 to 511 */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_WRProt_AllPages          ((uint32_t)0xFFFFFFFF) /*!< Write protection of all Pages */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_IT_BANK2_ERROR                 ((uint32_t)0x80000400)  /*!< FPEC BANK2 error interrupt source */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_IT_BANK2_EOP                   ((uint32_t)0x80001000)  /*!< End of FLASH BANK2 Operation Interrupt source */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_IT_ERROR                 ((uint32_t)0x00000400)  /*!< FPEC BANK1 error interrupt source */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_IT_EOP                   ((uint32_t)0x00001000)  /*!< End of FLASH BANK1 Operation Interrupt source */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define IS_FLASH_IT(IT) ((((IT) & (uint32_t)0x7FFFEBFF) == 0x00000000) && (((IT) != 0x00000000)))
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_IT_ERROR                 ((uint32_t)0x00000400)  /*!< FPEC error interrupt source */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_IT_EOP                   ((uint32_t)0x00001000)  /*!< End of FLASH Operation Interrupt source */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define IS_FLASH_IT(IT) ((((IT) & (uint32_t)0xFFFFEBFF) == 0x00000000) && (((IT) != 0x00000000)))
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_BANK2_BSY                 ((uint32_t)0x80000001)  /*!< FLASH BANK2 Busy flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_BANK2_EOP                 ((uint32_t)0x80000020)  /*!< FLASH BANK2 End of Operation flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_BANK2_PGERR               ((uint32_t)0x80000004)  /*!< FLASH BANK2 Program error flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_BANK2_WRPRTERR            ((uint32_t)0x80000010)  /*!< FLASH BANK2 Write protected error flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_BSY                 ((uint32_t)0x00000001)  /*!< FLASH Busy flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_EOP                 ((uint32_t)0x00000020)  /*!< FLASH End of Operation flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_PGERR               ((uint32_t)0x00000004)  /*!< FLASH Program error flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_WRPRTERR            ((uint32_t)0x00000010)  /*!< FLASH Write protected error flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_OPTERR              ((uint32_t)0x00000001)  /*!< FLASH Option Byte error flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define IS_FLASH_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0x7FFFFFCA) == 0x00000000) && ((FLAG) != 0x00000000))
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_BSY                 ((uint32_t)0x00000001)  /*!< FLASH Busy flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_EOP                 ((uint32_t)0x00000020)  /*!< FLASH End of Operation flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_PGERR               ((uint32_t)0x00000004)  /*!< FLASH Program error flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_WRPRTERR            ((uint32_t)0x00000010)  /*!< FLASH Write protected error flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define FLASH_FLAG_OPTERR              ((uint32_t)0x00000001)  /*!< FLASH Option Byte error flag */
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):#define IS_FLASH_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFFFFFFCA) == 0x00000000) && ((FLAG) != 0x00000000))
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):void FLASH_SetLatency(uint32_t FLASH_Latency);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):FLASH_Status FLASH_ErasePage(uint32_t Page_Address);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):uint32_t FLASH_GetUserOptionByte(void);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):uint32_t FLASH_GetWriteProtectionOptionByte(void);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):void FLASH_ClearFlag(uint32_t FLASH_FLAG);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout);
Stm32f10x_flash.h (d:\soft\soft_src\car\lib):FLASH_Status FLASH_WaitForLastBank2Operation(uint32_t Timeout);
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):#define BCR_MBKEN_Set                       ((uint32_t)0x00000001)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):#define BCR_MBKEN_Reset                     ((uint32_t)0x000FFFFE)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):#define BCR_FACCEN_Set                      ((uint32_t)0x00000040)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):#define PCR_PBKEN_Set                       ((uint32_t)0x00000004)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):#define PCR_PBKEN_Reset                     ((uint32_t)0x000FFFFB)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):#define PCR_ECCEN_Set                       ((uint32_t)0x00000040)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):#define PCR_ECCEN_Reset                     ((uint32_t)0x000FFFBF)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):#define PCR_MemoryType_NAND                 ((uint32_t)0x00000008)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):void FSMC_NANDDeInit(uint32_t FSMC_Bank)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  uint32_t eccval = 0x00000000;
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  uint32_t tmpsr = 0x00000000;
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
Stm32f10x_fsmc.c (d:\soft\soft_src\car\lib):void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_AddressSetupTime;       /*!< Defines the number of HCLK cycles to configure
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_AddressHoldTime;        /*!< Defines the number of HCLK cycles to configure
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_DataSetupTime;          /*!< Defines the number of HCLK cycles to configure
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_BusTurnAroundDuration;  /*!< Defines the number of HCLK cycles to configure
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_CLKDivision;            /*!< Defines the period of CLK clock output signal, expressed in number of HCLK cycles.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_DataLatency;            /*!< Defines the number of memory clock cycles to issue
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_AccessMode;             /*!< Specifies the asynchronous access mode. 
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_Bank;                /*!< Specifies the NOR/SRAM memory bank that will be used.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_DataAddressMux;      /*!< Specifies whether the address and data values are
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_MemoryType;          /*!< Specifies the type of external memory attached to
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_MemoryDataWidth;     /*!< Specifies the external memory device width.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_BurstAccessMode;     /*!< Enables or disables the burst access mode for Flash memory,
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_AsynchronousWait;     /*!< Enables or disables wait signal during asynchronous transfers,
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_WaitSignalPolarity;  /*!< Specifies the wait signal polarity, valid only when accessing
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_WrapMode;            /*!< Enables or disables the Wrapped burst access mode for Flash
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_WaitSignalActive;    /*!< Specifies if the wait signal is asserted by the memory one
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_WriteOperation;      /*!< Enables or disables the write operation in the selected bank by the FSMC. 
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_WaitSignal;          /*!< Enables or disables the wait-state insertion via wait
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_ExtendedMode;        /*!< Enables or disables the extended mode.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_WriteBurst;          /*!< Enables or disables the write burst operation.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_SetupTime;      /*!< Defines the number of HCLK cycles to setup address before
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_WaitSetupTime;  /*!< Defines the minimum number of HCLK cycles to assert the
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_HoldSetupTime;  /*!< Defines the number of HCLK clock cycles to hold address
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_HiZSetupTime;   /*!< Defines the number of HCLK clock cycles during which the
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_Bank;              /*!< Specifies the NAND memory bank that will be used.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_Waitfeature;      /*!< Enables or disables the Wait feature for the NAND Memory Bank.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_MemoryDataWidth;  /*!< Specifies the external memory device width.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_ECC;              /*!< Enables or disables the ECC computation.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_ECCPageSize;      /*!< Defines the page size for the extended ECC.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_TCLRSetupTime;    /*!< Defines the number of HCLK cycles to configure the
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_TARSetupTime;     /*!< Defines the number of HCLK cycles to configure the
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_Waitfeature;    /*!< Enables or disables the Wait feature for the Memory Bank.
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_TCLRSetupTime;  /*!< Defines the number of HCLK cycles to configure the
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):  uint32_t FSMC_TARSetupTime;   /*!< Defines the number of HCLK cycles to configure the
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_Bank1_NORSRAM1                             ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_Bank1_NORSRAM2                             ((uint32_t)0x00000002)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_Bank1_NORSRAM3                             ((uint32_t)0x00000004)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_Bank1_NORSRAM4                             ((uint32_t)0x00000006)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_Bank2_NAND                                 ((uint32_t)0x00000010)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_Bank3_NAND                                 ((uint32_t)0x00000100)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_Bank4_PCCARD                               ((uint32_t)0x00001000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_DataAddressMux_Disable                       ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_DataAddressMux_Enable                        ((uint32_t)0x00000002)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_MemoryType_SRAM                            ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_MemoryType_PSRAM                           ((uint32_t)0x00000004)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_MemoryType_NOR                             ((uint32_t)0x00000008)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_MemoryDataWidth_8b                         ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_MemoryDataWidth_16b                        ((uint32_t)0x00000010)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_BurstAccessMode_Disable                    ((uint32_t)0x00000000) 
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_BurstAccessMode_Enable                     ((uint32_t)0x00000100)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_AsynchronousWait_Disable                   ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_AsynchronousWait_Enable                    ((uint32_t)0x00008000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WaitSignalPolarity_Low                     ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WaitSignalPolarity_High                    ((uint32_t)0x00000200)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WrapMode_Disable                           ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WrapMode_Enable                            ((uint32_t)0x00000400) 
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WaitSignalActive_BeforeWaitState           ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WaitSignalActive_DuringWaitState           ((uint32_t)0x00000800) 
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WriteOperation_Disable                     ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WriteOperation_Enable                      ((uint32_t)0x00001000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WaitSignal_Disable                         ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WaitSignal_Enable                          ((uint32_t)0x00002000) 
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ExtendedMode_Disable                       ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ExtendedMode_Enable                        ((uint32_t)0x00004000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WriteBurst_Disable                         ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_WriteBurst_Enable                          ((uint32_t)0x00080000) 
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_AccessMode_A                               ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_AccessMode_B                               ((uint32_t)0x10000000) 
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_AccessMode_C                               ((uint32_t)0x20000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_AccessMode_D                               ((uint32_t)0x30000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_Waitfeature_Disable                        ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_Waitfeature_Enable                         ((uint32_t)0x00000002)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ECC_Disable                                ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ECC_Enable                                 ((uint32_t)0x00000040)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ECCPageSize_256Bytes                       ((uint32_t)0x00000000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ECCPageSize_512Bytes                       ((uint32_t)0x00020000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ECCPageSize_1024Bytes                      ((uint32_t)0x00040000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ECCPageSize_2048Bytes                      ((uint32_t)0x00060000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ECCPageSize_4096Bytes                      ((uint32_t)0x00080000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_ECCPageSize_8192Bytes                      ((uint32_t)0x000A0000)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_IT_RisingEdge                              ((uint32_t)0x00000008)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_IT_Level                                   ((uint32_t)0x00000010)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_IT_FallingEdge                             ((uint32_t)0x00000020)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define IS_FSMC_IT(IT) ((((IT) & (uint32_t)0xFFFFFFC7) == 0x00000000) && ((IT) != 0x00000000))
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_FLAG_RisingEdge                            ((uint32_t)0x00000001)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_FLAG_Level                                 ((uint32_t)0x00000002)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_FLAG_FallingEdge                           ((uint32_t)0x00000004)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define FSMC_FLAG_FEMPT                                 ((uint32_t)0x00000040)
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):#define IS_FSMC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFFFFFFF8) == 0x00000000) && ((FLAG) != 0x00000000))
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):void FSMC_NANDDeInit(uint32_t FSMC_Bank);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):uint32_t FSMC_GetECC(uint32_t FSMC_Bank);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT);
Stm32f10x_fsmc.h (d:\soft\soft_src\car\lib):void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT);
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):#define DBGAFR_POSITION_MASK        ((uint32_t)0x000F0000)
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):#define DBGAFR_SWJCFG_MASK          ((uint32_t)0xF0FFFFFF)
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):#define DBGAFR_LOCATION_MASK        ((uint32_t)0x00200000)
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):#define DBGAFR_NUMBITS_MASK         ((uint32_t)0x00100000)
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0x00, pinmask = 0x00;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):      pos = ((uint32_t)0x01) << pinpos;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):        pinmask = ((uint32_t)0x0F) << pos;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):      pos = (((uint32_t)0x01) << (pinpos + 0x08));
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):        pinmask = ((uint32_t)0x0F) << pos;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0x00010000;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0x00;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):    tmp1 = ((uint32_t)0x03) << tmpmask;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0x00;
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
Stm32f10x_gpio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_SPI1             ((uint32_t)0x00000001)  /*!< SPI1 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_I2C1             ((uint32_t)0x00000002)  /*!< I2C1 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_USART1           ((uint32_t)0x00000004)  /*!< USART1 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_USART2           ((uint32_t)0x00000008)  /*!< USART2 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_PartialRemap_USART3    ((uint32_t)0x00140010)  /*!< USART3 Partial Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_FullRemap_USART3       ((uint32_t)0x00140030)  /*!< USART3 Full Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_PartialRemap_TIM1      ((uint32_t)0x00160040)  /*!< TIM1 Partial Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_FullRemap_TIM1         ((uint32_t)0x001600C0)  /*!< TIM1 Full Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_PartialRemap1_TIM2     ((uint32_t)0x00180100)  /*!< TIM2 Partial1 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_PartialRemap2_TIM2     ((uint32_t)0x00180200)  /*!< TIM2 Partial2 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_FullRemap_TIM2         ((uint32_t)0x00180300)  /*!< TIM2 Full Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_PartialRemap_TIM3      ((uint32_t)0x001A0800)  /*!< TIM3 Partial Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_FullRemap_TIM3         ((uint32_t)0x001A0C00)  /*!< TIM3 Full Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM4             ((uint32_t)0x00001000)  /*!< TIM4 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap1_CAN1            ((uint32_t)0x001D4000)  /*!< CAN1 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap2_CAN1            ((uint32_t)0x001D6000)  /*!< CAN1 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_PD01             ((uint32_t)0x00008000)  /*!< PD01 Alternate Function mapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM5CH4_LSI      ((uint32_t)0x00200001)  /*!< LSI connected to TIM5 Channel4 input capture for calibration */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_ADC1_ETRGINJ     ((uint32_t)0x00200002)  /*!< ADC1 External Trigger Injected Conversion remapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_ADC1_ETRGREG     ((uint32_t)0x00200004)  /*!< ADC1 External Trigger Regular Conversion remapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_ADC2_ETRGINJ     ((uint32_t)0x00200008)  /*!< ADC2 External Trigger Injected Conversion remapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_ADC2_ETRGREG     ((uint32_t)0x00200010)  /*!< ADC2 External Trigger Regular Conversion remapping */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_ETH              ((uint32_t)0x00200020)  /*!< Ethernet remapping (only for Connectivity line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_CAN2             ((uint32_t)0x00200040)  /*!< CAN2 remapping (only for Connectivity line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_SWJ_NoJTRST      ((uint32_t)0x00300100)  /*!< Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_SWJ_JTAGDisable  ((uint32_t)0x00300200)  /*!< JTAG-DP Disabled and SW-DP Enabled */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_SWJ_Disable      ((uint32_t)0x00300400)  /*!< Full SWJ Disabled (JTAG-DP + SW-DP) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_SPI3             ((uint32_t)0x00201100)  /*!< SPI3/I2S3 Alternate Function mapping (only for Connectivity line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM2ITR1_PTP_SOF ((uint32_t)0x00202000)  /*!< Ethernet PTP output or USB OTG SOF (Start of Frame) connected
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_PTP_PPS          ((uint32_t)0x00204000)  /*!< Ethernet MAC PPS_PTS output on PB05 (only for Connectivity line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM15            ((uint32_t)0x80000001)  /*!< TIM15 Alternate Function mapping (only for Value line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM16            ((uint32_t)0x80000002)  /*!< TIM16 Alternate Function mapping (only for Value line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM17            ((uint32_t)0x80000004)  /*!< TIM17 Alternate Function mapping (only for Value line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_CEC              ((uint32_t)0x80000008)  /*!< CEC Alternate Function mapping (only for Value line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM1_DMA         ((uint32_t)0x80000010)  /*!< TIM1 DMA requests mapping (only for Value line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM9             ((uint32_t)0x80000020)  /*!< TIM9 Alternate Function mapping (only for XL-density devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM10            ((uint32_t)0x80000040)  /*!< TIM10 Alternate Function mapping (only for XL-density devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM11            ((uint32_t)0x80000080)  /*!< TIM11 Alternate Function mapping (only for XL-density devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM13            ((uint32_t)0x80000100)  /*!< TIM13 Alternate Function mapping (only for High density Value line and XL-density devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM14            ((uint32_t)0x80000200)  /*!< TIM14 Alternate Function mapping (only for High density Value line and XL-density devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_FSMC_NADV        ((uint32_t)0x80000400)  /*!< FSMC_NADV Alternate Function mapping (only for High density Value line and XL-density devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM67_DAC_DMA    ((uint32_t)0x80000800)  /*!< TIM6/TIM7 and DAC DMA requests remapping (only for High density Value line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_TIM12            ((uint32_t)0x80001000)  /*!< TIM12 Alternate Function mapping (only for High density Value line devices) */
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):#define GPIO_Remap_MISC             ((uint32_t)0x80002000)  /*!< Miscellaneous Remap (DMA2 Channel5 Position and DAC Trigger remapping, 
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState);
Stm32f10x_gpio.h (d:\soft\soft_src\car\lib):void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface);
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):#define FLAG_Mask               ((uint32_t)0x00FFFFFF)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):#define ITEN_Mask               ((uint32_t)0x07000000)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  uint32_t pclk1 = 8000000;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t) I2Cx;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib): *     registers in a single word (uint32_t) (Status Register 2 value is shifted left 
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  uint32_t lastevent = 0;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  uint32_t flag1 = 0, flag2 = 0;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  uint32_t lastevent = 0;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  uint32_t flag1 = 0, flag2 = 0;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  __IO uint32_t i2creg = 0, i2cxbase = 0;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  i2cxbase = (uint32_t)I2Cx;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  uint32_t flagpos = 0;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  uint32_t enablestatus = 0;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
Stm32f10x_i2c.c (d:\soft\soft_src\car\lib):  uint32_t flagpos = 0;
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):  uint32_t I2C_ClockSpeed;          /*!< Specifies the clock frequency.
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_SMBALERT                 ((uint32_t)0x01008000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_TIMEOUT                  ((uint32_t)0x01004000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_PECERR                   ((uint32_t)0x01001000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_OVR                      ((uint32_t)0x01000800)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_AF                       ((uint32_t)0x01000400)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_ARLO                     ((uint32_t)0x01000200)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_BERR                     ((uint32_t)0x01000100)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_TXE                      ((uint32_t)0x06000080)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_RXNE                     ((uint32_t)0x06000040)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_STOPF                    ((uint32_t)0x02000010)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_ADD10                    ((uint32_t)0x02000008)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_BTF                      ((uint32_t)0x02000004)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_ADDR                     ((uint32_t)0x02000002)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_IT_SB                       ((uint32_t)0x02000001)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_DUALF                  ((uint32_t)0x00800000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_SMBHOST                ((uint32_t)0x00400000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_SMBDEFAULT             ((uint32_t)0x00200000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_GENCALL                ((uint32_t)0x00100000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_TRA                    ((uint32_t)0x00040000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_BUSY                   ((uint32_t)0x00020000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_MSL                    ((uint32_t)0x00010000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_SMBALERT               ((uint32_t)0x10008000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_TIMEOUT                ((uint32_t)0x10004000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_PECERR                 ((uint32_t)0x10001000)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_OVR                    ((uint32_t)0x10000800)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_AF                     ((uint32_t)0x10000400)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_ARLO                   ((uint32_t)0x10000200)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_BERR                   ((uint32_t)0x10000100)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_TXE                    ((uint32_t)0x10000080)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_RXNE                   ((uint32_t)0x10000040)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_STOPF                  ((uint32_t)0x10000010)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_ADD10                  ((uint32_t)0x10000008)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_BTF                    ((uint32_t)0x10000004)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_ADDR                   ((uint32_t)0x10000002)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_FLAG_SB                     ((uint32_t)0x10000001)
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_MASTER_MODE_SELECT                      ((uint32_t)0x00030001)  /* BUSY, MSL and SB flag */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED        ((uint32_t)0x00070082)  /* BUSY, MSL, ADDR, TXE and TRA flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED           ((uint32_t)0x00030002)  /* BUSY, MSL and ADDR flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_MASTER_MODE_ADDRESS10                   ((uint32_t)0x00030008)  /* BUSY, MSL and ADD10 flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_MASTER_BYTE_RECEIVED                    ((uint32_t)0x00030040)  /* BUSY, MSL and RXNE flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define I2C_EVENT_MASTER_BYTE_TRANSMITTING                 ((uint32_t)0x00070080) /* TRA, BUSY, MSL, TXE flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_MASTER_BYTE_TRANSMITTED                 ((uint32_t)0x00070084)  /* TRA, BUSY, MSL, TXE and BTF flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED          ((uint32_t)0x00020002) /* BUSY and ADDR flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED       ((uint32_t)0x00060082) /* TRA, BUSY, TXE and ADDR flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED    ((uint32_t)0x00820000)  /* DUALF and BUSY flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED ((uint32_t)0x00860080)  /* DUALF, TRA, BUSY and TXE flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED        ((uint32_t)0x00120000)  /* GENCALL and BUSY flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_BYTE_RECEIVED                     ((uint32_t)0x00020040)  /* BUSY and RXNE flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_STOP_DETECTED                     ((uint32_t)0x00000010)  /* STOPF flag */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_BYTE_TRANSMITTED                  ((uint32_t)0x00060084)  /* TRA, BUSY, TXE and BTF flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_BYTE_TRANSMITTING                 ((uint32_t)0x00060080)  /* TRA, BUSY and TXE flags */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):#define  I2C_EVENT_SLAVE_ACK_FAILURE                       ((uint32_t)0x00000400)  /* AF flag */
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib): *     registers in a single word (uint32_t) (Status Register 2 value is shifted left 
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT);
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx);
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
Stm32f10x_i2c.h (d:\soft\soft_src\car\lib):void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
Stm32f10x_iwdg.c (d:\soft\soft_src\car\lib):  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):#define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):#define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
Stm32f10x_pwr.c (d:\soft\soft_src\car\lib):void PWR_ClearFlag(uint32_t PWR_FLAG)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_PVDLevel_2V2          ((uint32_t)0x00000000)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_PVDLevel_2V3          ((uint32_t)0x00000020)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_PVDLevel_2V4          ((uint32_t)0x00000040)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_PVDLevel_2V5          ((uint32_t)0x00000060)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_PVDLevel_2V6          ((uint32_t)0x00000080)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_PVDLevel_2V7          ((uint32_t)0x000000A0)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_PVDLevel_2V8          ((uint32_t)0x000000C0)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_PVDLevel_2V9          ((uint32_t)0x000000E0)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_Regulator_ON          ((uint32_t)0x00000000)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_Regulator_LowPower    ((uint32_t)0x00000001)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_FLAG_WU               ((uint32_t)0x00000001)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_FLAG_SB               ((uint32_t)0x00000002)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):#define PWR_FLAG_PVDO             ((uint32_t)0x00000004)
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel);
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry);
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG);
Stm32f10x_pwr.h (d:\soft\soft_src\car\lib):void PWR_ClearFlag(uint32_t PWR_FLAG);
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CR_HSEBYP_Set             ((uint32_t)0x00040000)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CR_HSEON_Set              ((uint32_t)0x00010000)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib): #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib): #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CSR_RMVF_Set              ((uint32_t)0x01000000)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib): #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib): #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib): #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib): #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib): #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):#define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  RCC->CR |= (uint32_t)0x00000001;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  RCC->CFGR &= (uint32_t)0xF8FF0000;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  RCC->CFGR &= (uint32_t)0xF0FF0000;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  RCC->CR &= (uint32_t)0xFEF6FFFF;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  RCC->CR &= (uint32_t)0xFFFBFFFF;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  RCC->CFGR &= (uint32_t)0xFF80FFFF;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  RCC->CR &= (uint32_t)0xEBFFFFFF;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_HSEConfig(uint32_t RCC_HSE)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  __IO uint32_t StartUpCounter = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  tmpreg |= (uint32_t)HSICalibrationValue << 3;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_PCLK1Config(uint32_t RCC_HCLK)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_PCLK2Config(uint32_t RCC_HCLK)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t prediv1factor = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  uint32_t statusreg = 0;
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
Stm32f10x_rcc.c (d:\soft\soft_src\car\lib):  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):  uint32_t SYSCLK_Frequency;  /*!< returns SYSCLK clock frequency expressed in Hz */
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):  uint32_t HCLK_Frequency;    /*!< returns HCLK clock frequency expressed in Hz */
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):  uint32_t PCLK1_Frequency;   /*!< returns PCLK1 clock frequency expressed in Hz */
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):  uint32_t PCLK2_Frequency;   /*!< returns PCLK2 clock frequency expressed in Hz */
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):  uint32_t ADCCLK_Frequency;  /*!< returns ADCCLK clock frequency expressed in Hz */
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_HSE_OFF                      ((uint32_t)0x00000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_HSE_ON                       ((uint32_t)0x00010000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_HSE_Bypass                   ((uint32_t)0x00040000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_PLLSource_HSI_Div2           ((uint32_t)0x00000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLSource_HSE_Div1           ((uint32_t)0x00010000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLSource_HSE_Div2           ((uint32_t)0x00030000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLSource_PREDIV1            ((uint32_t)0x00010000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_2                    ((uint32_t)0x00000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_3                    ((uint32_t)0x00040000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_4                    ((uint32_t)0x00080000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_5                    ((uint32_t)0x000C0000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_6                    ((uint32_t)0x00100000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_7                    ((uint32_t)0x00140000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_8                    ((uint32_t)0x00180000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_9                    ((uint32_t)0x001C0000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_10                   ((uint32_t)0x00200000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_11                   ((uint32_t)0x00240000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_12                   ((uint32_t)0x00280000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_13                   ((uint32_t)0x002C0000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_14                   ((uint32_t)0x00300000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_15                   ((uint32_t)0x00340000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_16                   ((uint32_t)0x00380000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_4                    ((uint32_t)0x00080000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_5                    ((uint32_t)0x000C0000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_6                    ((uint32_t)0x00100000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_7                    ((uint32_t)0x00140000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_8                    ((uint32_t)0x00180000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_9                    ((uint32_t)0x001C0000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_PLLMul_6_5                  ((uint32_t)0x00340000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div1               ((uint32_t)0x00000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div2               ((uint32_t)0x00000001)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div3               ((uint32_t)0x00000002)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div4               ((uint32_t)0x00000003)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div5               ((uint32_t)0x00000004)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div6               ((uint32_t)0x00000005)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div7               ((uint32_t)0x00000006)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div8               ((uint32_t)0x00000007)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div9               ((uint32_t)0x00000008)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div10              ((uint32_t)0x00000009)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div11              ((uint32_t)0x0000000A)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div12              ((uint32_t)0x0000000B)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div13              ((uint32_t)0x0000000C)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div14              ((uint32_t)0x0000000D)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div15              ((uint32_t)0x0000000E)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Div16              ((uint32_t)0x0000000F)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Source_HSE         ((uint32_t)0x00000000) 
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Source_PLL2        ((uint32_t)0x00010000) 
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV1_Source_HSE         ((uint32_t)0x00000000) 
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div1               ((uint32_t)0x00000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div2               ((uint32_t)0x00000010)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div3               ((uint32_t)0x00000020)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div4               ((uint32_t)0x00000030)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div5               ((uint32_t)0x00000040)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div6               ((uint32_t)0x00000050)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div7               ((uint32_t)0x00000060)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div8               ((uint32_t)0x00000070)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div9               ((uint32_t)0x00000080)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div10              ((uint32_t)0x00000090)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div11              ((uint32_t)0x000000A0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div12              ((uint32_t)0x000000B0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div13              ((uint32_t)0x000000C0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div14              ((uint32_t)0x000000D0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div15              ((uint32_t)0x000000E0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PREDIV2_Div16              ((uint32_t)0x000000F0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL2Mul_8                  ((uint32_t)0x00000600)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL2Mul_9                  ((uint32_t)0x00000700)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL2Mul_10                 ((uint32_t)0x00000800)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL2Mul_11                 ((uint32_t)0x00000900)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL2Mul_12                 ((uint32_t)0x00000A00)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL2Mul_13                 ((uint32_t)0x00000B00)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL2Mul_14                 ((uint32_t)0x00000C00)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL2Mul_16                 ((uint32_t)0x00000E00)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL2Mul_20                 ((uint32_t)0x00000F00)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL3Mul_8                  ((uint32_t)0x00006000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL3Mul_9                  ((uint32_t)0x00007000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL3Mul_10                 ((uint32_t)0x00008000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL3Mul_11                 ((uint32_t)0x00009000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL3Mul_12                 ((uint32_t)0x0000A000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL3Mul_13                 ((uint32_t)0x0000B000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL3Mul_14                 ((uint32_t)0x0000C000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL3Mul_16                 ((uint32_t)0x0000E000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define  RCC_PLL3Mul_20                 ((uint32_t)0x0000F000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLKSource_HSI             ((uint32_t)0x00000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLKSource_HSE             ((uint32_t)0x00000001)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLKSource_PLLCLK          ((uint32_t)0x00000002)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLK_Div1                  ((uint32_t)0x00000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLK_Div2                  ((uint32_t)0x00000080)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLK_Div4                  ((uint32_t)0x00000090)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLK_Div8                  ((uint32_t)0x000000A0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLK_Div16                 ((uint32_t)0x000000B0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLK_Div64                 ((uint32_t)0x000000C0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLK_Div128                ((uint32_t)0x000000D0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLK_Div256                ((uint32_t)0x000000E0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_SYSCLK_Div512                ((uint32_t)0x000000F0)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_HCLK_Div1                    ((uint32_t)0x00000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_HCLK_Div2                    ((uint32_t)0x00000400)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_HCLK_Div4                    ((uint32_t)0x00000500)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_HCLK_Div8                    ((uint32_t)0x00000600)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_HCLK_Div16                   ((uint32_t)0x00000700)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_PCLK2_Div2                   ((uint32_t)0x00000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_PCLK2_Div4                   ((uint32_t)0x00004000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_PCLK2_Div6                   ((uint32_t)0x00008000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_PCLK2_Div8                   ((uint32_t)0x0000C000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_RTCCLKSource_LSE             ((uint32_t)0x00000100)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_RTCCLKSource_LSI             ((uint32_t)0x00000200)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_RTCCLKSource_HSE_Div128      ((uint32_t)0x00000300)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_AHBPeriph_DMA1               ((uint32_t)0x00000001)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_AHBPeriph_DMA2               ((uint32_t)0x00000002)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_AHBPeriph_SRAM               ((uint32_t)0x00000004)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_AHBPeriph_FLITF              ((uint32_t)0x00000010)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_AHBPeriph_CRC                ((uint32_t)0x00000040)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_AHBPeriph_FSMC              ((uint32_t)0x00000100)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_AHBPeriph_SDIO              ((uint32_t)0x00000400)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_AHBPeriph_OTG_FS            ((uint32_t)0x00001000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_AHBPeriph_ETH_MAC           ((uint32_t)0x00004000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_AHBPeriph_ETH_MAC_Tx        ((uint32_t)0x00008000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): #define RCC_AHBPeriph_ETH_MAC_Rx        ((uint32_t)0x00010000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_AFIO              ((uint32_t)0x00000001)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_GPIOA             ((uint32_t)0x00000004)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_GPIOB             ((uint32_t)0x00000008)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_GPIOC             ((uint32_t)0x00000010)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_GPIOD             ((uint32_t)0x00000020)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_GPIOE             ((uint32_t)0x00000040)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_GPIOF             ((uint32_t)0x00000080)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_GPIOG             ((uint32_t)0x00000100)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_ADC1              ((uint32_t)0x00000200)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_ADC2              ((uint32_t)0x00000400)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_TIM1              ((uint32_t)0x00000800)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_SPI1              ((uint32_t)0x00001000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_TIM8              ((uint32_t)0x00002000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_USART1            ((uint32_t)0x00004000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_ADC3              ((uint32_t)0x00008000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_TIM15             ((uint32_t)0x00010000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_TIM16             ((uint32_t)0x00020000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_TIM17             ((uint32_t)0x00040000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_TIM9              ((uint32_t)0x00080000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_TIM10             ((uint32_t)0x00100000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB2Periph_TIM11             ((uint32_t)0x00200000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_TIM2              ((uint32_t)0x00000001)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_TIM3              ((uint32_t)0x00000002)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_TIM4              ((uint32_t)0x00000004)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_TIM5              ((uint32_t)0x00000008)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_TIM6              ((uint32_t)0x00000010)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_TIM7              ((uint32_t)0x00000020)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_TIM12             ((uint32_t)0x00000040)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_TIM13             ((uint32_t)0x00000080)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_TIM14             ((uint32_t)0x00000100)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_WWDG              ((uint32_t)0x00000800)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_SPI2              ((uint32_t)0x00004000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_SPI3              ((uint32_t)0x00008000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_USART2            ((uint32_t)0x00020000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_USART3            ((uint32_t)0x00040000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_UART4             ((uint32_t)0x00080000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_UART5             ((uint32_t)0x00100000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_I2C1              ((uint32_t)0x00200000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_I2C2              ((uint32_t)0x00400000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_USB               ((uint32_t)0x00800000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_CAN1              ((uint32_t)0x02000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_CAN2              ((uint32_t)0x04000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_BKP               ((uint32_t)0x08000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_PWR               ((uint32_t)0x10000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_DAC               ((uint32_t)0x20000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):#define RCC_APB1Periph_CEC               ((uint32_t)0x40000000)
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_HSEConfig(uint32_t RCC_HSE);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): void RCC_PLL2Config(uint32_t RCC_PLL2Mul);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): void RCC_PLL3Config(uint32_t RCC_PLL3Mul);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_HCLKConfig(uint32_t RCC_SYSCLK);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_PCLK1Config(uint32_t RCC_HCLK);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_PCLK2Config(uint32_t RCC_HCLK);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_ADCCLKConfig(uint32_t RCC_PCLK2);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource);                                  
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib): void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
Stm32f10x_rcc.h (d:\soft\soft_src\car\lib):void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):#define RTC_LSB_MASK     ((uint32_t)0x0000FFFF)  /*!< RTC LSB Mask */
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):#define PRLH_MSB_MASK    ((uint32_t)0x000F0000)  /*!< RTC Prescaler MSB Mask */
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):uint32_t RTC_GetCounter(void)
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):  return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):void RTC_SetCounter(uint32_t CounterValue)
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):void RTC_SetPrescaler(uint32_t PrescalerValue)
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):void RTC_SetAlarm(uint32_t AlarmValue)
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):uint32_t RTC_GetDivider(void)
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0x00;
Stm32f10x_rtc.c (d:\soft\soft_src\car\lib):  tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
Stm32f10x_rtc.h (d:\soft\soft_src\car\lib):uint32_t  RTC_GetCounter(void);
Stm32f10x_rtc.h (d:\soft\soft_src\car\lib):void RTC_SetCounter(uint32_t CounterValue);
Stm32f10x_rtc.h (d:\soft\soft_src\car\lib):void RTC_SetPrescaler(uint32_t PrescalerValue);
Stm32f10x_rtc.h (d:\soft\soft_src\car\lib):void RTC_SetAlarm(uint32_t AlarmValue);
Stm32f10x_rtc.h (d:\soft\soft_src\car\lib):uint32_t  RTC_GetDivider(void);
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):#define CLKCR_CLEAR_MASK         ((uint32_t)0xFFFF8100) 
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):#define PWR_PWRCTRL_MASK         ((uint32_t)0xFFFFFFFC)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):#define DCTRL_CLEAR_MASK         ((uint32_t)0xFFFFFF08)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):#define CMD_CLEAR_MASK           ((uint32_t)0xFFFFF800)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):#define SDIO_RESP_ADDR           ((uint32_t)(SDIO_BASE + 0x14))
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):void SDIO_SetPowerState(uint32_t SDIO_PowerState)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):uint32_t SDIO_GetPowerState(void)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmp = 0;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  return (*(__IO uint32_t *) tmp); 
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):uint32_t SDIO_GetDataCounter(void)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):uint32_t SDIO_ReadData(void)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):void SDIO_WriteData(uint32_t Data)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):uint32_t SDIO_GetFIFOCount(void)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):void SDIO_ClearFlag(uint32_t SDIO_FLAG)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
Stm32f10x_sdio.c (d:\soft\soft_src\car\lib):void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_ClockEdge;            /*!< Specifies the clock transition on which the bit capture is made.
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_ClockBypass;          /*!< Specifies whether the SDIO Clock divider bypass is
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_ClockPowerSave;       /*!< Specifies whether SDIO Clock output is enabled or
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_BusWide;              /*!< Specifies the SDIO bus width.
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_HardwareFlowControl;  /*!< Specifies whether the SDIO hardware flow control is enabled or disabled.
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_Argument;  /*!< Specifies the SDIO command argument which is sent
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_CmdIndex;  /*!< Specifies the SDIO command index. It must be lower than 0x40. */
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_Response;  /*!< Specifies the SDIO response type.
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_Wait;      /*!< Specifies whether SDIO wait-for-interrupt request is enabled or disabled.
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_CPSM;      /*!< Specifies whether SDIO Command path state machine (CPSM)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_DataTimeOut;    /*!< Specifies the data timeout period in card bus clock periods. */
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_DataLength;     /*!< Specifies the number of data bytes to be transferred. */
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_DataBlockSize;  /*!< Specifies the data block size for block transfer.
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_TransferDir;    /*!< Specifies the data transfer direction, whether the transfer
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_TransferMode;   /*!< Specifies whether data transfer is in stream or block mode.
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):  uint32_t SDIO_DPSM;           /*!< Specifies whether SDIO Data path state machine (DPSM)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_ClockEdge_Rising               ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_ClockEdge_Falling              ((uint32_t)0x00002000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_ClockBypass_Disable             ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_ClockBypass_Enable              ((uint32_t)0x00000400)    
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_ClockPowerSave_Disable         ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_ClockPowerSave_Enable          ((uint32_t)0x00000200) 
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_BusWide_1b                     ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_BusWide_4b                     ((uint32_t)0x00000800)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_BusWide_8b                     ((uint32_t)0x00001000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_HardwareFlowControl_Disable    ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_HardwareFlowControl_Enable     ((uint32_t)0x00004000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_PowerState_OFF                 ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_PowerState_ON                  ((uint32_t)0x00000003)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_CCRCFAIL                    ((uint32_t)0x00000001)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_DCRCFAIL                    ((uint32_t)0x00000002)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_CTIMEOUT                    ((uint32_t)0x00000004)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_DTIMEOUT                    ((uint32_t)0x00000008)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_TXUNDERR                    ((uint32_t)0x00000010)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_RXOVERR                     ((uint32_t)0x00000020)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_CMDREND                     ((uint32_t)0x00000040)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_CMDSENT                     ((uint32_t)0x00000080)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_DATAEND                     ((uint32_t)0x00000100)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_STBITERR                    ((uint32_t)0x00000200)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_DBCKEND                     ((uint32_t)0x00000400)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_CMDACT                      ((uint32_t)0x00000800)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_TXACT                       ((uint32_t)0x00001000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_RXACT                       ((uint32_t)0x00002000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_TXFIFOHE                    ((uint32_t)0x00004000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_RXFIFOHF                    ((uint32_t)0x00008000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_TXFIFOF                     ((uint32_t)0x00010000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_RXFIFOF                     ((uint32_t)0x00020000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_TXFIFOE                     ((uint32_t)0x00040000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_RXFIFOE                     ((uint32_t)0x00080000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_TXDAVL                      ((uint32_t)0x00100000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_RXDAVL                      ((uint32_t)0x00200000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_SDIOIT                      ((uint32_t)0x00400000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_IT_CEATAEND                    ((uint32_t)0x00800000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define IS_SDIO_IT(IT) ((((IT) & (uint32_t)0xFF000000) == 0x00) && ((IT) != (uint32_t)0x00))
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_Response_No                    ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_Response_Short                 ((uint32_t)0x00000040)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_Response_Long                  ((uint32_t)0x000000C0)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_Wait_No                        ((uint32_t)0x00000000) /*!< SDIO No Wait, TimeOut is enabled */
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_Wait_IT                        ((uint32_t)0x00000100) /*!< SDIO Wait Interrupt Request */
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_Wait_Pend                      ((uint32_t)0x00000200) /*!< SDIO Wait End of transfer */
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_CPSM_Disable                    ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_CPSM_Enable                     ((uint32_t)0x00000400)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_RESP1                          ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_RESP2                          ((uint32_t)0x00000004)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_RESP3                          ((uint32_t)0x00000008)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_RESP4                          ((uint32_t)0x0000000C)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_1b               ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_2b               ((uint32_t)0x00000010)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_4b               ((uint32_t)0x00000020)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_8b               ((uint32_t)0x00000030)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_16b              ((uint32_t)0x00000040)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_32b              ((uint32_t)0x00000050)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_64b              ((uint32_t)0x00000060)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_128b             ((uint32_t)0x00000070)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_256b             ((uint32_t)0x00000080)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_512b             ((uint32_t)0x00000090)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_1024b            ((uint32_t)0x000000A0)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_2048b            ((uint32_t)0x000000B0)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_4096b            ((uint32_t)0x000000C0)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_8192b            ((uint32_t)0x000000D0)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DataBlockSize_16384b           ((uint32_t)0x000000E0)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_TransferDir_ToCard             ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_TransferDir_ToSDIO             ((uint32_t)0x00000002)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_TransferMode_Block             ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_TransferMode_Stream            ((uint32_t)0x00000004)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DPSM_Disable                    ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_DPSM_Enable                     ((uint32_t)0x00000001)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_CCRCFAIL                  ((uint32_t)0x00000001)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_DCRCFAIL                  ((uint32_t)0x00000002)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_CTIMEOUT                  ((uint32_t)0x00000004)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_DTIMEOUT                  ((uint32_t)0x00000008)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_TXUNDERR                  ((uint32_t)0x00000010)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_RXOVERR                   ((uint32_t)0x00000020)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_CMDREND                   ((uint32_t)0x00000040)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_CMDSENT                   ((uint32_t)0x00000080)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_DATAEND                   ((uint32_t)0x00000100)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_STBITERR                  ((uint32_t)0x00000200)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_DBCKEND                   ((uint32_t)0x00000400)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_CMDACT                    ((uint32_t)0x00000800)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_TXACT                     ((uint32_t)0x00001000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_RXACT                     ((uint32_t)0x00002000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_TXFIFOHE                  ((uint32_t)0x00004000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_RXFIFOHF                  ((uint32_t)0x00008000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_TXFIFOF                   ((uint32_t)0x00010000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_RXFIFOF                   ((uint32_t)0x00020000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_TXFIFOE                   ((uint32_t)0x00040000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_RXFIFOE                   ((uint32_t)0x00080000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_TXDAVL                    ((uint32_t)0x00100000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_RXDAVL                    ((uint32_t)0x00200000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_SDIOIT                    ((uint32_t)0x00400000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_FLAG_CEATAEND                  ((uint32_t)0x00800000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define IS_SDIO_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFF3FF800) == 0x00) && ((FLAG) != (uint32_t)0x00))
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define IS_SDIO_CLEAR_IT(IT) ((((IT) & (uint32_t)0xFF3FF800) == 0x00) && ((IT) != (uint32_t)0x00))
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_ReadWaitMode_CLK               ((uint32_t)0x00000001)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):#define SDIO_ReadWaitMode_DATA2             ((uint32_t)0x00000000)
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):void SDIO_SetPowerState(uint32_t SDIO_PowerState);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):uint32_t SDIO_GetPowerState(void);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):uint32_t SDIO_GetResponse(uint32_t SDIO_RESP);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):uint32_t SDIO_GetDataCounter(void);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):uint32_t SDIO_ReadData(void);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):void SDIO_WriteData(uint32_t Data);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):uint32_t SDIO_GetFIFOCount(void);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):void SDIO_ClearFlag(uint32_t SDIO_FLAG);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):ITStatus SDIO_GetITStatus(uint32_t SDIO_IT);
Stm32f10x_sdio.h (d:\soft\soft_src\car\lib):void SDIO_ClearITPendingBit(uint32_t SDIO_IT);
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):#define I2S2_CLOCK_SRC       ((uint32_t)(0x00020000))
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):#define I2S3_CLOCK_SRC       ((uint32_t)(0x00040000))
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0;
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):  uint32_t sourceclock = 0;
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):    if(((uint32_t)SPIx) == SPI2_BASE)
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):      tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):      sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
Stm32f10x_spi.c (d:\soft\soft_src\car\lib):      sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):  uint32_t I2S_AudioFreq;    /*!< Specifies the frequency selected for the I2S communication.
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_192k               ((uint32_t)192000)
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_96k                ((uint32_t)96000)
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_48k                ((uint32_t)48000)
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_44k                ((uint32_t)44100)
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_32k                ((uint32_t)32000)
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_22k                ((uint32_t)22050)
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_16k                ((uint32_t)16000)
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_11k                ((uint32_t)11025)
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_8k                 ((uint32_t)8000)
Stm32f10x_spi.h (d:\soft\soft_src\car\lib):#define I2S_AudioFreq_Default            ((uint32_t)2)
Stm32f10x_tim.c (d:\soft\soft_src\car\lib):    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
Stm32f10x_tim.c (d:\soft\soft_src\car\lib):    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
Stm32f10x_tim.c (d:\soft\soft_src\car\lib):  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
Stm32f10x_tim.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0;
Stm32f10x_tim.c (d:\soft\soft_src\car\lib):  tmp = (uint32_t) TIMx;
Stm32f10x_tim.c (d:\soft\soft_src\car\lib):    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
Stm32f10x_tim.c (d:\soft\soft_src\car\lib):    *(__IO uint32_t *) tmp |= TIM_OCMode;
Stm32f10x_tim.c (d:\soft\soft_src\car\lib):    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
Stm32f10x_tim.c (d:\soft\soft_src\car\lib):    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0x00, apbclock = 0x00;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  uint32_t integerdivider = 0x00;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  uint32_t fractionaldivider = 0x00;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  uint32_t usartxbase = 0;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  usartxbase = (uint32_t)USARTx;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0x00;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  uint32_t usartxbase = 0x00;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  usartxbase = (uint32_t)USARTx;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  itmask = (((uint32_t)0x01) << itpos);
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):    *(__IO uint32_t*)usartxbase  |= itmask;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):    *(__IO uint32_t*)usartxbase &= ~itmask;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  itmask = (uint32_t)0x01 << itmask;
Stm32f10x_usart.c (d:\soft\soft_src\car\lib):  bitpos = (uint32_t)0x01 << bitpos;
Stm32f10x_usart.h (d:\soft\soft_src\car\lib):  uint32_t USART_BaudRate;            /*!< This member configures the USART communication baud rate.
Stm32f10x_usart.h (d:\soft\soft_src\car\lib):#define IS_USART_PERIPH_FLAG(PERIPH, USART_FLAG) ((((*(uint32_t*)&(PERIPH)) != UART4_BASE) &&\
Stm32f10x_usart.h (d:\soft\soft_src\car\lib):                                                  ((*(uint32_t*)&(PERIPH)) != UART5_BASE)) \
Stm32f10x_wwdg.c (d:\soft\soft_src\car\lib):#define CR_WDGA_Set       ((uint32_t)0x00000080)
Stm32f10x_wwdg.c (d:\soft\soft_src\car\lib):#define CFR_WDGTB_Mask    ((uint32_t)0xFFFFFE7F)
Stm32f10x_wwdg.c (d:\soft\soft_src\car\lib):#define CFR_W_Mask        ((uint32_t)0xFFFFFF80)
Stm32f10x_wwdg.c (d:\soft\soft_src\car\lib):void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
Stm32f10x_wwdg.c (d:\soft\soft_src\car\lib):  uint32_t tmpreg = 0;
Stm32f10x_wwdg.c (d:\soft\soft_src\car\lib):  __IO uint32_t tmpreg = 0;
Stm32f10x_wwdg.c (d:\soft\soft_src\car\lib):  tmpreg |= WindowValue & (uint32_t) BIT_Mask;
Stm32f10x_wwdg.c (d:\soft\soft_src\car\lib):  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
Stm32f10x_wwdg.c (d:\soft\soft_src\car\lib):  WWDG->SR = (uint32_t)RESET;
Stm32f10x_wwdg.h (d:\soft\soft_src\car\lib):#define WWDG_Prescaler_1    ((uint32_t)0x00000000)
Stm32f10x_wwdg.h (d:\soft\soft_src\car\lib):#define WWDG_Prescaler_2    ((uint32_t)0x00000080)
Stm32f10x_wwdg.h (d:\soft\soft_src\car\lib):#define WWDG_Prescaler_4    ((uint32_t)0x00000100)
Stm32f10x_wwdg.h (d:\soft\soft_src\car\lib):#define WWDG_Prescaler_8    ((uint32_t)0x00000180)
Stm32f10x_wwdg.h (d:\soft\soft_src\car\lib):void WWDG_SetPrescaler(uint32_t WWDG_Prescaler);
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t SystemCoreClock         = SYSCLK_FREQ_HSE;        /*!< System Clock Frequency (Core Clock) */
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t SystemCoreClock         = SYSCLK_FREQ_24MHz;        /*!< System Clock Frequency (Core Clock) */
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t SystemCoreClock         = SYSCLK_FREQ_36MHz;        /*!< System Clock Frequency (Core Clock) */
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t SystemCoreClock         = SYSCLK_FREQ_48MHz;        /*!< System Clock Frequency (Core Clock) */
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t SystemCoreClock         = SYSCLK_FREQ_56MHz;        /*!< System Clock Frequency (Core Clock) */
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t SystemCoreClock         = SYSCLK_FREQ_72MHz;        /*!< System Clock Frequency (Core Clock) */
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t SystemCoreClock         = HSI_VALUE;        /*!< System Clock Frequency (Core Clock) */
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR |= (uint32_t)0x00000001;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CFGR &= (uint32_t)0xF8FF0000;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CFGR &= (uint32_t)0xF0FF0000;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR &= (uint32_t)0xFEF6FFFF;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR &= (uint32_t)0xFFFBFFFF;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CFGR &= (uint32_t)0xFF80FFFF;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR &= (uint32_t)0xEBFFFFFF;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  uint32_t prediv1factor = 0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
System_stm32f10x.c (d:\soft\soft_src\car\lib):  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x01;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x00;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  if (HSEStatus == (uint32_t)0x01)
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):      FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):      FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
System_stm32f10x.c (d:\soft\soft_src\car\lib):  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x01;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x00;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  if (HSEStatus == (uint32_t)0x01)
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
System_stm32f10x.c (d:\soft\soft_src\car\lib):  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x01;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x00;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  if (HSEStatus == (uint32_t)0x01)
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL9);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
System_stm32f10x.c (d:\soft\soft_src\car\lib):  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x01;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x00;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  if (HSEStatus == (uint32_t)0x01)
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
System_stm32f10x.c (d:\soft\soft_src\car\lib):  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x01;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x00;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  if (HSEStatus == (uint32_t)0x01)
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
System_stm32f10x.c (d:\soft\soft_src\car\lib):  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x01;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    HSEStatus = (uint32_t)0x00;
System_stm32f10x.c (d:\soft\soft_src\car\lib):  if (HSEStatus == (uint32_t)0x01)
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
System_stm32f10x.c (d:\soft\soft_src\car\lib):    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
System_stm32f10x.c (d:\soft\soft_src\car\lib):    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
System_stm32f10x.h (d:\soft\soft_src\car\lib):extern uint32_t SystemCoreClock;          /*!< System Clock Frequency (Core Clock) */
